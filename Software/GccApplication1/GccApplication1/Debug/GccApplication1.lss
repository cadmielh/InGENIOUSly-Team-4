
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000005c2  00000656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ff  00800102  00800102  00000658  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf0  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000501  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ed  00000000  00000000  000018b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  000022a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  00002803  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00003111  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	ce c0       	rjmp	.+412    	; 0x1a2 <__vector_1>
   6:	00 00       	nop
   8:	e8 c0       	rjmp	.+464    	; 0x1da <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e5 c0       	rjmp	.+458    	; 0x24c <__vector_32>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 30       	cpi	r26, 0x01	; 1
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	7c c2       	rjmp	.+1272   	; 0x5be <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
	
	uint8_t speed;
	speed=200;

	
	USART_Init();
  c8:	10 d1       	rcall	.+544    	; 0x2ea <USART_Init>
	ADC_init();
  ca:	26 d0       	rcall	.+76     	; 0x118 <ADC_init>
	PWM1_init();
  cc:	17 d0       	rcall	.+46     	; 0xfc <PWM1_init>
	PWM2_init();
  ce:	1d d0       	rcall	.+58     	; 0x10a <PWM2_init>
	timer3_init();
  d0:	a0 d0       	rcall	.+320    	; 0x212 <timer3_init>
	encoders_init();
  d2:	51 d0       	rcall	.+162    	; 0x176 <encoders_init>
	sei(); //enable interrupts
  d4:	78 94       	sei
  d6:	0f 2e       	mov	r0, r31
  d8:	f5 e0       	ldi	r31, 0x05	; 5
  da:	ef 2e       	mov	r14, r31
  dc:	f1 e0       	ldi	r31, 0x01	; 1
  de:	ff 2e       	mov	r15, r31
  e0:	f0 2d       	mov	r31, r0
  e2:	05 ef       	ldi	r16, 0xF5	; 245
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	e7 01       	movw	r28, r14
		//total=0;
		

		for(int i=0;i<60;i++)
			{
				v[i]=ADC_read(0);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	1d d0       	rcall	.+58     	; 0x126 <ADC_read>
  ec:	69 93       	st	Y+, r22
  ee:	79 93       	st	Y+, r23
  f0:	89 93       	st	Y+, r24
  f2:	99 93       	st	Y+, r25
	while (1)  // main loop										
	{
		//total=0;
		

		for(int i=0;i<60;i++)
  f4:	c0 17       	cp	r28, r16
  f6:	d1 07       	cpc	r29, r17
  f8:	b9 f7       	brne	.-18     	; 0xe8 <main+0x20>
  fa:	f5 cf       	rjmp	.-22     	; 0xe6 <main+0x1e>

000000fc <PWM1_init>:


void PWM1_init()
{
	// initialize TCCR0 as per requirement, say as follows
	TCCR0A |= (1<<COM0A1)|(1<<WGM00);
  fc:	84 b5       	in	r24, 0x24	; 36
  fe:	81 68       	ori	r24, 0x81	; 129
 100:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	85 bd       	out	0x25, r24	; 37
	
	//PWM PIN
	DDRB|= (1<<PORTB3);
 106:	23 9a       	sbi	0x04, 3	; 4
 108:	08 95       	ret

0000010a <PWM2_init>:


void PWM2_init()
{
	// initialize TCCR1 as per requirement, say as follows
	TCCR0A |= (1<<COM0B1)|(1<<WGM02);
 10a:	84 b5       	in	r24, 0x24	; 36
 10c:	88 62       	ori	r24, 0x28	; 40
 10e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	85 bd       	out	0x25, r24	; 37
	
	//PWM PIN
	DDRB|= (1<<PORTB4);
 114:	24 9a       	sbi	0x04, 4	; 4
 116:	08 95       	ret

00000118 <ADC_init>:
uint8_t val;


void ADC_init()
{
	DDRA &= ~(1<<PINA1);
 118:	09 98       	cbi	0x01, 1	; 1
	ADCSRA |= 1<<ADEN;		  //Turn on ADC
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 68       	ori	r24, 0x80	; 128
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <ADC_read>:

float ADC_read(uint8_t channel)
{
	float distance;
	channel=channel & 0b00000111;		//Select ADC Channel, channel must be 0-7
	ADMUX = 0;
 126:	ec e7       	ldi	r30, 0x7C	; 124
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	10 82       	st	Z, r1
	//ADMUX |= (1<<MUX0);        //Clear the older channel that was read
	ADMUX|= channel;		//Defines the new ADC channel to be read
 12c:	90 81       	ld	r25, Z


float ADC_read(uint8_t channel)
{
	float distance;
	channel=channel & 0b00000111;		//Select ADC Channel, channel must be 0-7
 12e:	87 70       	andi	r24, 0x07	; 7
	ADMUX = 0;
	//ADMUX |= (1<<MUX0);        //Clear the older channel that was read
	ADMUX|= channel;		//Defines the new ADC channel to be read
 130:	98 2b       	or	r25, r24
 132:	90 83       	st	Z, r25
	
	ADCSRA |=(1<<ADSC);	// enable ADC and start single conversion
 134:	ea e7       	ldi	r30, 0x7A	; 122
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	80 83       	st	Z, r24
	
	
	while(ADCSRA & (1<<ADSC));	// wait for conversion to complete
 13e:	80 81       	ld	r24, Z
 140:	86 fd       	sbrc	r24, 6
 142:	fd cf       	rjmp	.-6      	; 0x13e <ADC_read+0x18>
	//volts=ADC*0.0048828125;
	//distance = 65 * pow(volts, -1.10);
	distance = (2914. / (ADC + 4.98)) -1;
 144:	60 91 78 00 	lds	r22, 0x0078
 148:	70 91 79 00 	lds	r23, 0x0079
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	a8 d1       	rcall	.+848    	; 0x4a2 <__floatunsisf>
 152:	29 e2       	ldi	r18, 0x29	; 41
 154:	3c e5       	ldi	r19, 0x5C	; 92
 156:	4f e9       	ldi	r20, 0x9F	; 159
 158:	50 e4       	ldi	r21, 0x40	; 64
 15a:	d7 d0       	rcall	.+430    	; 0x30a <__addsf3>
 15c:	9b 01       	movw	r18, r22
 15e:	ac 01       	movw	r20, r24
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	70 e2       	ldi	r23, 0x20	; 32
 164:	86 e3       	ldi	r24, 0x36	; 54
 166:	95 e4       	ldi	r25, 0x45	; 69
 168:	34 d1       	rcall	.+616    	; 0x3d2 <__divsf3>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	40 e8       	ldi	r20, 0x80	; 128
 170:	5f e3       	ldi	r21, 0x3F	; 63
 172:	ca c0       	rjmp	.+404    	; 0x308 <__subsf3>
	return distance;
}
 174:	08 95       	ret

00000176 <encoders_init>:


void encoders_init()
{
	/* set PD2, PD3 as input */
	DDRD &=~ (1 << PORTD2);
 176:	52 98       	cbi	0x0a, 2	; 10
	DDRD &=~(1 << PORTD3);/* PD2 and PD3 as input */
 178:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << PORTD2)|(1<<PORTD3);   /* PD2 and PD3 pull-up enabled   */
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	8c 60       	ori	r24, 0x0C	; 12
 17e:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK|=(1<<INT0)|(1<<INT1);	//We use external interrupt INT0 and INT1
 180:	8d b3       	in	r24, 0x1d	; 29
 182:	83 60       	ori	r24, 0x03	; 3
 184:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC00)|(1<<ISC01)|(1<<ISC10)|(1<<ISC11);	//The rising edge of INT0 and INT1 generates asynchronously an interrupt request.
 186:	e9 e6       	ldi	r30, 0x69	; 105
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8f 60       	ori	r24, 0x0F	; 15
 18e:	80 83       	st	Z, r24
	
	grey_left=0;
 190:	10 92 04 01 	sts	0x0104, r1
	grey_right=0;
 194:	10 92 02 01 	sts	0x0102, r1
	rotations_right=0;
 198:	10 92 03 01 	sts	0x0103, r1
	rotations_left=0;
 19c:	10 92 fb 01 	sts	0x01FB, r1
 1a0:	08 95       	ret

000001a2 <__vector_1>:
}



ISR(INT0_vect) //Right side interrupt
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8f 93       	push	r24
	
		grey_right++;
 1ae:	80 91 02 01 	lds	r24, 0x0102
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 02 01 	sts	0x0102, r24
		if(grey_right>=10)
 1b8:	80 91 02 01 	lds	r24, 0x0102
 1bc:	8a 30       	cpi	r24, 0x0A	; 10
 1be:	38 f0       	brcs	.+14     	; 0x1ce <__vector_1+0x2c>
		{
			rotations_right++;
 1c0:	80 91 03 01 	lds	r24, 0x0103
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 03 01 	sts	0x0103, r24
			grey_right=0;
 1ca:	10 92 02 01 	sts	0x0102, r1
		}
	
}
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_2>:


ISR(INT1_vect)  //Left side interrupt
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
	
	grey_left++;
 1e6:	80 91 04 01 	lds	r24, 0x0104
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	80 93 04 01 	sts	0x0104, r24
	if(grey_left>=10)
 1f0:	80 91 04 01 	lds	r24, 0x0104
 1f4:	8a 30       	cpi	r24, 0x0A	; 10
 1f6:	38 f0       	brcs	.+14     	; 0x206 <__vector_2+0x2c>
	{
		rotations_left++;
 1f8:	80 91 fb 01 	lds	r24, 0x01FB
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 fb 01 	sts	0x01FB, r24
		grey_left=0;
 202:	10 92 04 01 	sts	0x0104, r1
	}
	
}
 206:	8f 91       	pop	r24
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <timer3_init>:


void timer3_init()
{
	// clear on compare match
	TCCR3A |= (1<<COM3A1);
 212:	e0 e9       	ldi	r30, 0x90	; 144
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32);
 21c:	e1 e9       	ldi	r30, 0x91	; 145
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	88 60       	ori	r24, 0x08	; 8
 224:	80 83       	st	Z, r24
	// set up timer with no prescaler count to 500
	TCCR3B |= (1 << CS30);
 226:	80 81       	ld	r24, Z
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24
	
	//set up compare value
	OCR3AH = 0x01;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = 0xF4;
 232:	84 ef       	ldi	r24, 0xF4	; 244
 234:	80 93 98 00 	sts	0x0098, r24
	
	// initialize counter
	TCNT3H = 0;
 238:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 23c:	10 92 94 00 	sts	0x0094, r1
	
	
	
	TIMSK3 |= (1<<OCIE3A) | (1<<TOIE3);
 240:	e1 e7       	ldi	r30, 0x71	; 113
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	83 60       	ori	r24, 0x03	; 3
 248:	80 83       	st	Z, r24
 24a:	08 95       	ret

0000024c <__vector_32>:
}



ISR(TIMER3_COMPA_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	0b b6       	in	r0, 0x3b	; 59
 258:	0f 92       	push	r0
 25a:	2f 93       	push	r18
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	
	// initialize counter
	TCNT3H = 0;
 264:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 268:	10 92 94 00 	sts	0x0094, r1
	// keep a track of number of overflows
	ovfl++;
 26c:	80 91 fd 01 	lds	r24, 0x01FD
 270:	90 91 fe 01 	lds	r25, 0x01FE
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	90 93 fe 01 	sts	0x01FE, r25
 27a:	80 93 fd 01 	sts	0x01FD, r24
	if(ovfl>=40)
 27e:	80 91 fd 01 	lds	r24, 0x01FD
 282:	90 91 fe 01 	lds	r25, 0x01FE
 286:	88 97       	sbiw	r24, 0x28	; 40
 288:	20 f1       	brcs	.+72     	; 0x2d2 <__vector_32+0x86>
	{	s_time.ms++;
 28a:	e5 ef       	ldi	r30, 0xF5	; 245
 28c:	f1 e0       	ldi	r31, 0x01	; 1
 28e:	80 81       	ld	r24, Z
 290:	91 81       	ldd	r25, Z+1	; 0x01
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	91 83       	std	Z+1, r25	; 0x01
 296:	80 83       	st	Z, r24
		if (s_time.ms>=1000)
 298:	88 3e       	cpi	r24, 0xE8	; 232
 29a:	93 40       	sbci	r25, 0x03	; 3
 29c:	b0 f0       	brcs	.+44     	; 0x2ca <__vector_32+0x7e>
		{
			s_time.s++;
 29e:	82 81       	ldd	r24, Z+2	; 0x02
 2a0:	93 81       	ldd	r25, Z+3	; 0x03
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	93 83       	std	Z+3, r25	; 0x03
 2a6:	82 83       	std	Z+2, r24	; 0x02
			s_time.ms=0;
 2a8:	11 82       	std	Z+1, r1	; 0x01
 2aa:	10 82       	st	Z, r1
			if(s_time.s>=60)
 2ac:	cc 97       	sbiw	r24, 0x3c	; 60
 2ae:	68 f0       	brcs	.+26     	; 0x2ca <__vector_32+0x7e>
			{
				s_time.m++;
 2b0:	84 81       	ldd	r24, Z+4	; 0x04
 2b2:	95 81       	ldd	r25, Z+5	; 0x05
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	95 83       	std	Z+5, r25	; 0x05
 2b8:	84 83       	std	Z+4, r24	; 0x04
				s_time.s=0;
 2ba:	13 82       	std	Z+3, r1	; 0x03
 2bc:	12 82       	std	Z+2, r1	; 0x02
				
				if(s_time.m>=60)
 2be:	cc 97       	sbiw	r24, 0x3c	; 60
 2c0:	20 f0       	brcs	.+8      	; 0x2ca <__vector_32+0x7e>
				s_time.m=0;
 2c2:	10 92 fa 01 	sts	0x01FA, r1
 2c6:	10 92 f9 01 	sts	0x01F9, r1
			}
			
		}
		ovfl=0;
 2ca:	10 92 fe 01 	sts	0x01FE, r1
 2ce:	10 92 fd 01 	sts	0x01FD, r1
	}
	
}
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0b be       	out	0x3b, r0	; 59
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <USART_Init>:
unsigned int my_ubrr = MYUBRR;

void USART_Init()
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr>>8);
 2ea:	80 91 01 01 	lds	r24, 0x0101
 2ee:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char)my_ubrr;
 2f2:	80 91 00 01 	lds	r24, 0x0100
 2f6:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 2fa:	88 e1       	ldi	r24, 0x18	; 24
 2fc:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 300:	8e e0       	ldi	r24, 0x0E	; 14
 302:	80 93 c2 00 	sts	0x00C2, r24
 306:	08 95       	ret

00000308 <__subsf3>:
 308:	50 58       	subi	r21, 0x80	; 128

0000030a <__addsf3>:
 30a:	bb 27       	eor	r27, r27
 30c:	aa 27       	eor	r26, r26
 30e:	0e d0       	rcall	.+28     	; 0x32c <__addsf3x>
 310:	1c c1       	rjmp	.+568    	; 0x54a <__fp_round>
 312:	0d d1       	rcall	.+538    	; 0x52e <__fp_pscA>
 314:	30 f0       	brcs	.+12     	; 0x322 <__addsf3+0x18>
 316:	12 d1       	rcall	.+548    	; 0x53c <__fp_pscB>
 318:	20 f0       	brcs	.+8      	; 0x322 <__addsf3+0x18>
 31a:	31 f4       	brne	.+12     	; 0x328 <__addsf3+0x1e>
 31c:	9f 3f       	cpi	r25, 0xFF	; 255
 31e:	11 f4       	brne	.+4      	; 0x324 <__addsf3+0x1a>
 320:	1e f4       	brtc	.+6      	; 0x328 <__addsf3+0x1e>
 322:	02 c1       	rjmp	.+516    	; 0x528 <__fp_nan>
 324:	0e f4       	brtc	.+2      	; 0x328 <__addsf3+0x1e>
 326:	e0 95       	com	r30
 328:	e7 fb       	bst	r30, 7
 32a:	f8 c0       	rjmp	.+496    	; 0x51c <__fp_inf>

0000032c <__addsf3x>:
 32c:	e9 2f       	mov	r30, r25
 32e:	1e d1       	rcall	.+572    	; 0x56c <__fp_split3>
 330:	80 f3       	brcs	.-32     	; 0x312 <__addsf3+0x8>
 332:	ba 17       	cp	r27, r26
 334:	62 07       	cpc	r22, r18
 336:	73 07       	cpc	r23, r19
 338:	84 07       	cpc	r24, r20
 33a:	95 07       	cpc	r25, r21
 33c:	18 f0       	brcs	.+6      	; 0x344 <__addsf3x+0x18>
 33e:	71 f4       	brne	.+28     	; 0x35c <__addsf3x+0x30>
 340:	9e f5       	brtc	.+102    	; 0x3a8 <__addsf3x+0x7c>
 342:	36 c1       	rjmp	.+620    	; 0x5b0 <__fp_zero>
 344:	0e f4       	brtc	.+2      	; 0x348 <__addsf3x+0x1c>
 346:	e0 95       	com	r30
 348:	0b 2e       	mov	r0, r27
 34a:	ba 2f       	mov	r27, r26
 34c:	a0 2d       	mov	r26, r0
 34e:	0b 01       	movw	r0, r22
 350:	b9 01       	movw	r22, r18
 352:	90 01       	movw	r18, r0
 354:	0c 01       	movw	r0, r24
 356:	ca 01       	movw	r24, r20
 358:	a0 01       	movw	r20, r0
 35a:	11 24       	eor	r1, r1
 35c:	ff 27       	eor	r31, r31
 35e:	59 1b       	sub	r21, r25
 360:	99 f0       	breq	.+38     	; 0x388 <__addsf3x+0x5c>
 362:	59 3f       	cpi	r21, 0xF9	; 249
 364:	50 f4       	brcc	.+20     	; 0x37a <__addsf3x+0x4e>
 366:	50 3e       	cpi	r21, 0xE0	; 224
 368:	68 f1       	brcs	.+90     	; 0x3c4 <__addsf3x+0x98>
 36a:	1a 16       	cp	r1, r26
 36c:	f0 40       	sbci	r31, 0x00	; 0
 36e:	a2 2f       	mov	r26, r18
 370:	23 2f       	mov	r18, r19
 372:	34 2f       	mov	r19, r20
 374:	44 27       	eor	r20, r20
 376:	58 5f       	subi	r21, 0xF8	; 248
 378:	f3 cf       	rjmp	.-26     	; 0x360 <__addsf3x+0x34>
 37a:	46 95       	lsr	r20
 37c:	37 95       	ror	r19
 37e:	27 95       	ror	r18
 380:	a7 95       	ror	r26
 382:	f0 40       	sbci	r31, 0x00	; 0
 384:	53 95       	inc	r21
 386:	c9 f7       	brne	.-14     	; 0x37a <__addsf3x+0x4e>
 388:	7e f4       	brtc	.+30     	; 0x3a8 <__addsf3x+0x7c>
 38a:	1f 16       	cp	r1, r31
 38c:	ba 0b       	sbc	r27, r26
 38e:	62 0b       	sbc	r22, r18
 390:	73 0b       	sbc	r23, r19
 392:	84 0b       	sbc	r24, r20
 394:	ba f0       	brmi	.+46     	; 0x3c4 <__addsf3x+0x98>
 396:	91 50       	subi	r25, 0x01	; 1
 398:	a1 f0       	breq	.+40     	; 0x3c2 <__addsf3x+0x96>
 39a:	ff 0f       	add	r31, r31
 39c:	bb 1f       	adc	r27, r27
 39e:	66 1f       	adc	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	88 1f       	adc	r24, r24
 3a4:	c2 f7       	brpl	.-16     	; 0x396 <__addsf3x+0x6a>
 3a6:	0e c0       	rjmp	.+28     	; 0x3c4 <__addsf3x+0x98>
 3a8:	ba 0f       	add	r27, r26
 3aa:	62 1f       	adc	r22, r18
 3ac:	73 1f       	adc	r23, r19
 3ae:	84 1f       	adc	r24, r20
 3b0:	48 f4       	brcc	.+18     	; 0x3c4 <__addsf3x+0x98>
 3b2:	87 95       	ror	r24
 3b4:	77 95       	ror	r23
 3b6:	67 95       	ror	r22
 3b8:	b7 95       	ror	r27
 3ba:	f7 95       	ror	r31
 3bc:	9e 3f       	cpi	r25, 0xFE	; 254
 3be:	08 f0       	brcs	.+2      	; 0x3c2 <__addsf3x+0x96>
 3c0:	b3 cf       	rjmp	.-154    	; 0x328 <__addsf3+0x1e>
 3c2:	93 95       	inc	r25
 3c4:	88 0f       	add	r24, r24
 3c6:	08 f0       	brcs	.+2      	; 0x3ca <__addsf3x+0x9e>
 3c8:	99 27       	eor	r25, r25
 3ca:	ee 0f       	add	r30, r30
 3cc:	97 95       	ror	r25
 3ce:	87 95       	ror	r24
 3d0:	08 95       	ret

000003d2 <__divsf3>:
 3d2:	0c d0       	rcall	.+24     	; 0x3ec <__divsf3x>
 3d4:	ba c0       	rjmp	.+372    	; 0x54a <__fp_round>
 3d6:	b2 d0       	rcall	.+356    	; 0x53c <__fp_pscB>
 3d8:	40 f0       	brcs	.+16     	; 0x3ea <__divsf3+0x18>
 3da:	a9 d0       	rcall	.+338    	; 0x52e <__fp_pscA>
 3dc:	30 f0       	brcs	.+12     	; 0x3ea <__divsf3+0x18>
 3de:	21 f4       	brne	.+8      	; 0x3e8 <__divsf3+0x16>
 3e0:	5f 3f       	cpi	r21, 0xFF	; 255
 3e2:	19 f0       	breq	.+6      	; 0x3ea <__divsf3+0x18>
 3e4:	9b c0       	rjmp	.+310    	; 0x51c <__fp_inf>
 3e6:	51 11       	cpse	r21, r1
 3e8:	e4 c0       	rjmp	.+456    	; 0x5b2 <__fp_szero>
 3ea:	9e c0       	rjmp	.+316    	; 0x528 <__fp_nan>

000003ec <__divsf3x>:
 3ec:	bf d0       	rcall	.+382    	; 0x56c <__fp_split3>
 3ee:	98 f3       	brcs	.-26     	; 0x3d6 <__divsf3+0x4>

000003f0 <__divsf3_pse>:
 3f0:	99 23       	and	r25, r25
 3f2:	c9 f3       	breq	.-14     	; 0x3e6 <__divsf3+0x14>
 3f4:	55 23       	and	r21, r21
 3f6:	b1 f3       	breq	.-20     	; 0x3e4 <__divsf3+0x12>
 3f8:	95 1b       	sub	r25, r21
 3fa:	55 0b       	sbc	r21, r21
 3fc:	bb 27       	eor	r27, r27
 3fe:	aa 27       	eor	r26, r26
 400:	62 17       	cp	r22, r18
 402:	73 07       	cpc	r23, r19
 404:	84 07       	cpc	r24, r20
 406:	38 f0       	brcs	.+14     	; 0x416 <__divsf3_pse+0x26>
 408:	9f 5f       	subi	r25, 0xFF	; 255
 40a:	5f 4f       	sbci	r21, 0xFF	; 255
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	44 1f       	adc	r20, r20
 412:	aa 1f       	adc	r26, r26
 414:	a9 f3       	breq	.-22     	; 0x400 <__divsf3_pse+0x10>
 416:	33 d0       	rcall	.+102    	; 0x47e <__divsf3_pse+0x8e>
 418:	0e 2e       	mov	r0, r30
 41a:	3a f0       	brmi	.+14     	; 0x42a <__divsf3_pse+0x3a>
 41c:	e0 e8       	ldi	r30, 0x80	; 128
 41e:	30 d0       	rcall	.+96     	; 0x480 <__divsf3_pse+0x90>
 420:	91 50       	subi	r25, 0x01	; 1
 422:	50 40       	sbci	r21, 0x00	; 0
 424:	e6 95       	lsr	r30
 426:	00 1c       	adc	r0, r0
 428:	ca f7       	brpl	.-14     	; 0x41c <__divsf3_pse+0x2c>
 42a:	29 d0       	rcall	.+82     	; 0x47e <__divsf3_pse+0x8e>
 42c:	fe 2f       	mov	r31, r30
 42e:	27 d0       	rcall	.+78     	; 0x47e <__divsf3_pse+0x8e>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	88 1f       	adc	r24, r24
 436:	bb 1f       	adc	r27, r27
 438:	26 17       	cp	r18, r22
 43a:	37 07       	cpc	r19, r23
 43c:	48 07       	cpc	r20, r24
 43e:	ab 07       	cpc	r26, r27
 440:	b0 e8       	ldi	r27, 0x80	; 128
 442:	09 f0       	breq	.+2      	; 0x446 <__divsf3_pse+0x56>
 444:	bb 0b       	sbc	r27, r27
 446:	80 2d       	mov	r24, r0
 448:	bf 01       	movw	r22, r30
 44a:	ff 27       	eor	r31, r31
 44c:	93 58       	subi	r25, 0x83	; 131
 44e:	5f 4f       	sbci	r21, 0xFF	; 255
 450:	2a f0       	brmi	.+10     	; 0x45c <__divsf3_pse+0x6c>
 452:	9e 3f       	cpi	r25, 0xFE	; 254
 454:	51 05       	cpc	r21, r1
 456:	68 f0       	brcs	.+26     	; 0x472 <__divsf3_pse+0x82>
 458:	61 c0       	rjmp	.+194    	; 0x51c <__fp_inf>
 45a:	ab c0       	rjmp	.+342    	; 0x5b2 <__fp_szero>
 45c:	5f 3f       	cpi	r21, 0xFF	; 255
 45e:	ec f3       	brlt	.-6      	; 0x45a <__divsf3_pse+0x6a>
 460:	98 3e       	cpi	r25, 0xE8	; 232
 462:	dc f3       	brlt	.-10     	; 0x45a <__divsf3_pse+0x6a>
 464:	86 95       	lsr	r24
 466:	77 95       	ror	r23
 468:	67 95       	ror	r22
 46a:	b7 95       	ror	r27
 46c:	f7 95       	ror	r31
 46e:	9f 5f       	subi	r25, 0xFF	; 255
 470:	c9 f7       	brne	.-14     	; 0x464 <__divsf3_pse+0x74>
 472:	88 0f       	add	r24, r24
 474:	91 1d       	adc	r25, r1
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
 47a:	97 f9       	bld	r25, 7
 47c:	08 95       	ret
 47e:	e1 e0       	ldi	r30, 0x01	; 1
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	88 1f       	adc	r24, r24
 486:	bb 1f       	adc	r27, r27
 488:	62 17       	cp	r22, r18
 48a:	73 07       	cpc	r23, r19
 48c:	84 07       	cpc	r24, r20
 48e:	ba 07       	cpc	r27, r26
 490:	20 f0       	brcs	.+8      	; 0x49a <__divsf3_pse+0xaa>
 492:	62 1b       	sub	r22, r18
 494:	73 0b       	sbc	r23, r19
 496:	84 0b       	sbc	r24, r20
 498:	ba 0b       	sbc	r27, r26
 49a:	ee 1f       	adc	r30, r30
 49c:	88 f7       	brcc	.-30     	; 0x480 <__divsf3_pse+0x90>
 49e:	e0 95       	com	r30
 4a0:	08 95       	ret

000004a2 <__floatunsisf>:
 4a2:	e8 94       	clt
 4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <__floatsisf+0x12>

000004a6 <__floatsisf>:
 4a6:	97 fb       	bst	r25, 7
 4a8:	3e f4       	brtc	.+14     	; 0x4b8 <__floatsisf+0x12>
 4aa:	90 95       	com	r25
 4ac:	80 95       	com	r24
 4ae:	70 95       	com	r23
 4b0:	61 95       	neg	r22
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	8f 4f       	sbci	r24, 0xFF	; 255
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	99 23       	and	r25, r25
 4ba:	a9 f0       	breq	.+42     	; 0x4e6 <__floatsisf+0x40>
 4bc:	f9 2f       	mov	r31, r25
 4be:	96 e9       	ldi	r25, 0x96	; 150
 4c0:	bb 27       	eor	r27, r27
 4c2:	93 95       	inc	r25
 4c4:	f6 95       	lsr	r31
 4c6:	87 95       	ror	r24
 4c8:	77 95       	ror	r23
 4ca:	67 95       	ror	r22
 4cc:	b7 95       	ror	r27
 4ce:	f1 11       	cpse	r31, r1
 4d0:	f8 cf       	rjmp	.-16     	; 0x4c2 <__floatsisf+0x1c>
 4d2:	fa f4       	brpl	.+62     	; 0x512 <__floatsisf+0x6c>
 4d4:	bb 0f       	add	r27, r27
 4d6:	11 f4       	brne	.+4      	; 0x4dc <__floatsisf+0x36>
 4d8:	60 ff       	sbrs	r22, 0
 4da:	1b c0       	rjmp	.+54     	; 0x512 <__floatsisf+0x6c>
 4dc:	6f 5f       	subi	r22, 0xFF	; 255
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	8f 4f       	sbci	r24, 0xFF	; 255
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	16 c0       	rjmp	.+44     	; 0x512 <__floatsisf+0x6c>
 4e6:	88 23       	and	r24, r24
 4e8:	11 f0       	breq	.+4      	; 0x4ee <__floatsisf+0x48>
 4ea:	96 e9       	ldi	r25, 0x96	; 150
 4ec:	11 c0       	rjmp	.+34     	; 0x510 <__floatsisf+0x6a>
 4ee:	77 23       	and	r23, r23
 4f0:	21 f0       	breq	.+8      	; 0x4fa <__floatsisf+0x54>
 4f2:	9e e8       	ldi	r25, 0x8E	; 142
 4f4:	87 2f       	mov	r24, r23
 4f6:	76 2f       	mov	r23, r22
 4f8:	05 c0       	rjmp	.+10     	; 0x504 <__floatsisf+0x5e>
 4fa:	66 23       	and	r22, r22
 4fc:	71 f0       	breq	.+28     	; 0x51a <__floatsisf+0x74>
 4fe:	96 e8       	ldi	r25, 0x86	; 134
 500:	86 2f       	mov	r24, r22
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	2a f0       	brmi	.+10     	; 0x512 <__floatsisf+0x6c>
 508:	9a 95       	dec	r25
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	88 1f       	adc	r24, r24
 510:	da f7       	brpl	.-10     	; 0x508 <__floatsisf+0x62>
 512:	88 0f       	add	r24, r24
 514:	96 95       	lsr	r25
 516:	87 95       	ror	r24
 518:	97 f9       	bld	r25, 7
 51a:	08 95       	ret

0000051c <__fp_inf>:
 51c:	97 f9       	bld	r25, 7
 51e:	9f 67       	ori	r25, 0x7F	; 127
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	08 95       	ret

00000528 <__fp_nan>:
 528:	9f ef       	ldi	r25, 0xFF	; 255
 52a:	80 ec       	ldi	r24, 0xC0	; 192
 52c:	08 95       	ret

0000052e <__fp_pscA>:
 52e:	00 24       	eor	r0, r0
 530:	0a 94       	dec	r0
 532:	16 16       	cp	r1, r22
 534:	17 06       	cpc	r1, r23
 536:	18 06       	cpc	r1, r24
 538:	09 06       	cpc	r0, r25
 53a:	08 95       	ret

0000053c <__fp_pscB>:
 53c:	00 24       	eor	r0, r0
 53e:	0a 94       	dec	r0
 540:	12 16       	cp	r1, r18
 542:	13 06       	cpc	r1, r19
 544:	14 06       	cpc	r1, r20
 546:	05 06       	cpc	r0, r21
 548:	08 95       	ret

0000054a <__fp_round>:
 54a:	09 2e       	mov	r0, r25
 54c:	03 94       	inc	r0
 54e:	00 0c       	add	r0, r0
 550:	11 f4       	brne	.+4      	; 0x556 <__fp_round+0xc>
 552:	88 23       	and	r24, r24
 554:	52 f0       	brmi	.+20     	; 0x56a <__fp_round+0x20>
 556:	bb 0f       	add	r27, r27
 558:	40 f4       	brcc	.+16     	; 0x56a <__fp_round+0x20>
 55a:	bf 2b       	or	r27, r31
 55c:	11 f4       	brne	.+4      	; 0x562 <__fp_round+0x18>
 55e:	60 ff       	sbrs	r22, 0
 560:	04 c0       	rjmp	.+8      	; 0x56a <__fp_round+0x20>
 562:	6f 5f       	subi	r22, 0xFF	; 255
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	08 95       	ret

0000056c <__fp_split3>:
 56c:	57 fd       	sbrc	r21, 7
 56e:	90 58       	subi	r25, 0x80	; 128
 570:	44 0f       	add	r20, r20
 572:	55 1f       	adc	r21, r21
 574:	59 f0       	breq	.+22     	; 0x58c <__fp_splitA+0x10>
 576:	5f 3f       	cpi	r21, 0xFF	; 255
 578:	71 f0       	breq	.+28     	; 0x596 <__fp_splitA+0x1a>
 57a:	47 95       	ror	r20

0000057c <__fp_splitA>:
 57c:	88 0f       	add	r24, r24
 57e:	97 fb       	bst	r25, 7
 580:	99 1f       	adc	r25, r25
 582:	61 f0       	breq	.+24     	; 0x59c <__fp_splitA+0x20>
 584:	9f 3f       	cpi	r25, 0xFF	; 255
 586:	79 f0       	breq	.+30     	; 0x5a6 <__fp_splitA+0x2a>
 588:	87 95       	ror	r24
 58a:	08 95       	ret
 58c:	12 16       	cp	r1, r18
 58e:	13 06       	cpc	r1, r19
 590:	14 06       	cpc	r1, r20
 592:	55 1f       	adc	r21, r21
 594:	f2 cf       	rjmp	.-28     	; 0x57a <__fp_split3+0xe>
 596:	46 95       	lsr	r20
 598:	f1 df       	rcall	.-30     	; 0x57c <__fp_splitA>
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <__fp_splitA+0x30>
 59c:	16 16       	cp	r1, r22
 59e:	17 06       	cpc	r1, r23
 5a0:	18 06       	cpc	r1, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	f1 cf       	rjmp	.-30     	; 0x588 <__fp_splitA+0xc>
 5a6:	86 95       	lsr	r24
 5a8:	71 05       	cpc	r23, r1
 5aa:	61 05       	cpc	r22, r1
 5ac:	08 94       	sec
 5ae:	08 95       	ret

000005b0 <__fp_zero>:
 5b0:	e8 94       	clt

000005b2 <__fp_szero>:
 5b2:	bb 27       	eor	r27, r27
 5b4:	66 27       	eor	r22, r22
 5b6:	77 27       	eor	r23, r23
 5b8:	cb 01       	movw	r24, r22
 5ba:	97 f9       	bld	r25, 7
 5bc:	08 95       	ret

000005be <_exit>:
 5be:	f8 94       	cli

000005c0 <__stop_program>:
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <__stop_program>
