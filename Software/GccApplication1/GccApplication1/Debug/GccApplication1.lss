
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000942  000009d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000942  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a6  00800102  00800102  000009d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c59  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000553  00000000  00000000  000017b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e6  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030b  00000000  00000000  00002c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002f26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	5d c2       	rjmp	.+1210   	; 0x4c0 <__vector_1>
   6:	00 00       	nop
   8:	77 c2       	rjmp	.+1262   	; 0x4f8 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	74 c2       	rjmp	.+1256   	; 0x56a <__vector_32>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 3a       	cpi	r26, 0xA8	; 168
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	3c c4       	rjmp	.+2168   	; 0x93e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
{ 
	
	uint8_t speed;
	speed=200;

	flag=0;
  c8:	10 92 15 01 	sts	0x0115, r1
  cc:	10 92 14 01 	sts	0x0114, r1
	
	USART_Init();
  d0:	aa d2       	rcall	.+1364   	; 0x626 <USART_Init>
	ADC_init();
  d2:	16 d0       	rcall	.+44     	; 0x100 <ADC_init>
	PWM1_init();
  d4:	07 d0       	rcall	.+14     	; 0xe4 <PWM1_init>
	PWM2_init();
  d6:	0d d0       	rcall	.+26     	; 0xf2 <PWM2_init>
	timer3_init();
  d8:	2b d2       	rcall	.+1110   	; 0x530 <timer3_init>
	encoders_init();
  da:	dc d1       	rcall	.+952    	; 0x494 <encoders_init>
	sei(); //enable interrupts
  dc:	78 94       	sei

		//for(int i=0;i<40;i++)
			//v[i]=ADC_read(0);
			
		//if(flag==1)
		get_ADC_average(0);
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	07 d1       	rcall	.+526    	; 0x2f0 <get_ADC_average>
		
			//Motor_1('b',speed,5);
			//Motor_2('b',speed,5);
		

	} 
  e2:	fd cf       	rjmp	.-6      	; 0xde <main+0x16>

000000e4 <PWM1_init>:


void PWM1_init()
{
	// initialize TCCR0 as per requirement, say as follows
	TCCR0A |= (1<<COM0A1)|(1<<WGM00);
  e4:	84 b5       	in	r24, 0x24	; 36
  e6:	81 68       	ori	r24, 0x81	; 129
  e8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	85 bd       	out	0x25, r24	; 37
	
	//PWM PIN
	DDRB|= (1<<PORTB3);
  ee:	23 9a       	sbi	0x04, 3	; 4
  f0:	08 95       	ret

000000f2 <PWM2_init>:


void PWM2_init()
{
	// initialize TCCR1 as per requirement, say as follows
	TCCR0A |= (1<<COM0B1)|(1<<WGM02);
  f2:	84 b5       	in	r24, 0x24	; 36
  f4:	88 62       	ori	r24, 0x28	; 40
  f6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	85 bd       	out	0x25, r24	; 37
	
	//PWM PIN
	DDRB|= (1<<PORTB4);
  fc:	24 9a       	sbi	0x04, 4	; 4
  fe:	08 95       	ret

00000100 <ADC_init>:



void ADC_init()
{
	DDRA &= ~(1<<PINA1);
 100:	09 98       	cbi	0x01, 1	; 1
	ADCSRA |= 1<<ADEN;		  //Turn on ADC
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <ADC_read>:

uint16_t ADC_read(uint8_t channel)
{
	float distance;
	channel=channel & 0b00000111;		//Select ADC Channel, channel must be 0-7
	ADMUX = 0;
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	10 82       	st	Z, r1
	//ADMUX |= (1<<MUX0);        //Clear the older channel that was read
	ADMUX|= channel;		//Defines the new ADC channel to be read
 114:	90 81       	ld	r25, Z


uint16_t ADC_read(uint8_t channel)
{
	float distance;
	channel=channel & 0b00000111;		//Select ADC Channel, channel must be 0-7
 116:	87 70       	andi	r24, 0x07	; 7
	ADMUX = 0;
	//ADMUX |= (1<<MUX0);        //Clear the older channel that was read
	ADMUX|= channel;		//Defines the new ADC channel to be read
 118:	98 2b       	or	r25, r24
 11a:	90 83       	st	Z, r25
	
	ADCSRA |=(1<<ADSC);	// enable ADC and start single conversion
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	80 83       	st	Z, r24
	
	
	while(ADCSRA & (1<<ADSC));	// wait for conversion to complete
 126:	80 81       	ld	r24, Z
 128:	86 fd       	sbrc	r24, 6
 12a:	fd cf       	rjmp	.-6      	; 0x126 <ADC_read+0x18>
	//volts=ADC*0.0048828125;
	//distance = 65 * pow(volts, -1.10);
	//distance = (2914. / (ADC + 4.98)) -1;
	return ADC;
 12c:	80 91 78 00 	lds	r24, 0x0078
 130:	90 91 79 00 	lds	r25, 0x0079
}
 134:	08 95       	ret

00000136 <ADC_update_values>:


void ADC_update_values()
{		//taking first value from sensor which is inaccurate
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
		flag=0;
 13a:	10 92 15 01 	sts	0x0115, r1
 13e:	10 92 14 01 	sts	0x0114, r1
		ADC_read(0);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	e4 df       	rcall	.-56     	; 0x10e <ADC_read>
		ADC_read(1);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	e2 df       	rcall	.-60     	; 0x10e <ADC_read>
		ADC_read(2);
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	e0 df       	rcall	.-64     	; 0x10e <ADC_read>
		ADC_read(3);
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	de df       	rcall	.-68     	; 0x10e <ADC_read>
		
		chan0[contor]=ADC_read(0);
 152:	c0 91 12 01 	lds	r28, 0x0112
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	d9 df       	rcall	.-78     	; 0x10e <ADC_read>
 15c:	cc 0f       	add	r28, r28
 15e:	dd 1f       	adc	r29, r29
 160:	c8 5c       	subi	r28, 0xC8	; 200
 162:	de 4f       	sbci	r29, 0xFE	; 254
 164:	99 83       	std	Y+1, r25	; 0x01
 166:	88 83       	st	Y, r24
		chan1[contor]=ADC_read(1);
 168:	c0 91 12 01 	lds	r28, 0x0112
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	ce df       	rcall	.-100    	; 0x10e <ADC_read>
 172:	cc 0f       	add	r28, r28
 174:	dd 1f       	adc	r29, r29
 176:	cd 5a       	subi	r28, 0xAD	; 173
 178:	de 4f       	sbci	r29, 0xFE	; 254
 17a:	99 83       	std	Y+1, r25	; 0x01
 17c:	88 83       	st	Y, r24
		chan2[contor]=ADC_read(2);
 17e:	c0 91 12 01 	lds	r28, 0x0112
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	c3 df       	rcall	.-122    	; 0x10e <ADC_read>
 188:	cc 0f       	add	r28, r28
 18a:	dd 1f       	adc	r29, r29
 18c:	cd 52       	subi	r28, 0x2D	; 45
 18e:	de 4f       	sbci	r29, 0xFE	; 254
 190:	99 83       	std	Y+1, r25	; 0x01
 192:	88 83       	st	Y, r24
		chan3[contor]=ADC_read(3);
 194:	c0 91 12 01 	lds	r28, 0x0112
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	b8 df       	rcall	.-144    	; 0x10e <ADC_read>
 19e:	cc 0f       	add	r28, r28
 1a0:	dd 1f       	adc	r29, r29
 1a2:	cc 5d       	subi	r28, 0xDC	; 220
 1a4:	de 4f       	sbci	r29, 0xFE	; 254
 1a6:	99 83       	std	Y+1, r25	; 0x01
 1a8:	88 83       	st	Y, r24
		
		sum0 += chan0[contor];
 1aa:	20 91 12 01 	lds	r18, 0x0112
 1ae:	82 2f       	mov	r24, r18
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	fc 01       	movw	r30, r24
 1b8:	e8 5c       	subi	r30, 0xC8	; 200
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	a0 81       	ld	r26, Z
 1be:	b1 81       	ldd	r27, Z+1	; 0x01
 1c0:	40 91 0e 01 	lds	r20, 0x010E
 1c4:	50 91 0f 01 	lds	r21, 0x010F
 1c8:	60 91 10 01 	lds	r22, 0x0110
 1cc:	70 91 11 01 	lds	r23, 0x0111
 1d0:	4a 0f       	add	r20, r26
 1d2:	5b 1f       	adc	r21, r27
 1d4:	61 1d       	adc	r22, r1
 1d6:	71 1d       	adc	r23, r1
 1d8:	40 93 0e 01 	sts	0x010E, r20
 1dc:	50 93 0f 01 	sts	0x010F, r21
 1e0:	60 93 10 01 	sts	0x0110, r22
 1e4:	70 93 11 01 	sts	0x0111, r23
		chan0[contor]=0;
 1e8:	11 82       	std	Z+1, r1	; 0x01
 1ea:	10 82       	st	Z, r1
		sum1 += chan1[contor];
 1ec:	fc 01       	movw	r30, r24
 1ee:	ed 5a       	subi	r30, 0xAD	; 173
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	a0 81       	ld	r26, Z
 1f4:	b1 81       	ldd	r27, Z+1	; 0x01
 1f6:	40 91 0a 01 	lds	r20, 0x010A
 1fa:	50 91 0b 01 	lds	r21, 0x010B
 1fe:	60 91 0c 01 	lds	r22, 0x010C
 202:	70 91 0d 01 	lds	r23, 0x010D
 206:	4a 0f       	add	r20, r26
 208:	5b 1f       	adc	r21, r27
 20a:	61 1d       	adc	r22, r1
 20c:	71 1d       	adc	r23, r1
 20e:	40 93 0a 01 	sts	0x010A, r20
 212:	50 93 0b 01 	sts	0x010B, r21
 216:	60 93 0c 01 	sts	0x010C, r22
 21a:	70 93 0d 01 	sts	0x010D, r23
		chan1[contor]=0;
 21e:	11 82       	std	Z+1, r1	; 0x01
 220:	10 82       	st	Z, r1
		sum2 += chan2[contor];
 222:	fc 01       	movw	r30, r24
 224:	ed 52       	subi	r30, 0x2D	; 45
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	a0 81       	ld	r26, Z
 22a:	b1 81       	ldd	r27, Z+1	; 0x01
 22c:	40 91 06 01 	lds	r20, 0x0106
 230:	50 91 07 01 	lds	r21, 0x0107
 234:	60 91 08 01 	lds	r22, 0x0108
 238:	70 91 09 01 	lds	r23, 0x0109
 23c:	4a 0f       	add	r20, r26
 23e:	5b 1f       	adc	r21, r27
 240:	61 1d       	adc	r22, r1
 242:	71 1d       	adc	r23, r1
 244:	40 93 06 01 	sts	0x0106, r20
 248:	50 93 07 01 	sts	0x0107, r21
 24c:	60 93 08 01 	sts	0x0108, r22
 250:	70 93 09 01 	sts	0x0109, r23
		chan2[contor]=0;
 254:	11 82       	std	Z+1, r1	; 0x01
 256:	10 82       	st	Z, r1
		sum3 += chan3[contor];
 258:	fc 01       	movw	r30, r24
 25a:	ec 5d       	subi	r30, 0xDC	; 220
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	40 81       	ld	r20, Z
 260:	51 81       	ldd	r21, Z+1	; 0x01
 262:	80 91 02 01 	lds	r24, 0x0102
 266:	90 91 03 01 	lds	r25, 0x0103
 26a:	a0 91 04 01 	lds	r26, 0x0104
 26e:	b0 91 05 01 	lds	r27, 0x0105
 272:	84 0f       	add	r24, r20
 274:	95 1f       	adc	r25, r21
 276:	a1 1d       	adc	r26, r1
 278:	b1 1d       	adc	r27, r1
 27a:	80 93 02 01 	sts	0x0102, r24
 27e:	90 93 03 01 	sts	0x0103, r25
 282:	a0 93 04 01 	sts	0x0104, r26
 286:	b0 93 05 01 	sts	0x0105, r27
		chan3[contor]=0;
 28a:	11 82       	std	Z+1, r1	; 0x01
 28c:	10 82       	st	Z, r1
		
	contor++;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	82 0f       	add	r24, r18
 292:	80 93 12 01 	sts	0x0112, r24
	if(contor==10)
 296:	8a 30       	cpi	r24, 0x0A	; 10
 298:	41 f5       	brne	.+80     	; 0x2ea <ADC_update_values+0x1b4>
			{
				flag=1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	90 93 15 01 	sts	0x0115, r25
 2a2:	80 93 14 01 	sts	0x0114, r24
				contor=0;
 2a6:	10 92 12 01 	sts	0x0112, r1
				sum0=0;
 2aa:	10 92 0e 01 	sts	0x010E, r1
 2ae:	10 92 0f 01 	sts	0x010F, r1
 2b2:	10 92 10 01 	sts	0x0110, r1
 2b6:	10 92 11 01 	sts	0x0111, r1
				sum1=0;
 2ba:	10 92 0a 01 	sts	0x010A, r1
 2be:	10 92 0b 01 	sts	0x010B, r1
 2c2:	10 92 0c 01 	sts	0x010C, r1
 2c6:	10 92 0d 01 	sts	0x010D, r1
				sum2=0;
 2ca:	10 92 06 01 	sts	0x0106, r1
 2ce:	10 92 07 01 	sts	0x0107, r1
 2d2:	10 92 08 01 	sts	0x0108, r1
 2d6:	10 92 09 01 	sts	0x0109, r1
				sum3=0;
 2da:	10 92 02 01 	sts	0x0102, r1
 2de:	10 92 03 01 	sts	0x0103, r1
 2e2:	10 92 04 01 	sts	0x0104, r1
 2e6:	10 92 05 01 	sts	0x0105, r1
			}
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <get_ADC_average>:


float get_ADC_average(uint8_t channel)
{

		switch(channel)
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	b9 f1       	breq	.+110    	; 0x362 <get_ADC_average+0x72>
 2f4:	38 f0       	brcs	.+14     	; 0x304 <get_ADC_average+0x14>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	09 f4       	brne	.+2      	; 0x2fc <get_ADC_average+0xc>
 2fa:	62 c0       	rjmp	.+196    	; 0x3c0 <get_ADC_average+0xd0>
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	09 f4       	brne	.+2      	; 0x302 <get_ADC_average+0x12>
 300:	8e c0       	rjmp	.+284    	; 0x41e <get_ADC_average+0x12e>
 302:	bb c0       	rjmp	.+374    	; 0x47a <get_ADC_average+0x18a>
		{
			case 0:  data_sensor = sum0 /10;
 304:	60 91 0e 01 	lds	r22, 0x010E
 308:	70 91 0f 01 	lds	r23, 0x010F
 30c:	80 91 10 01 	lds	r24, 0x0110
 310:	90 91 11 01 	lds	r25, 0x0111
 314:	2a e0       	ldi	r18, 0x0A	; 10
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	ee d2       	rcall	.+1500   	; 0x8fa <__udivmodsi4>
 31e:	30 93 69 01 	sts	0x0169, r19
 322:	20 93 68 01 	sts	0x0168, r18
					 distance = (2914. / (data_sensor + 4.98)) -1;	//in cm formula
 326:	b9 01       	movw	r22, r18
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	58 d2       	rcall	.+1200   	; 0x7de <__floatunsisf>
 32e:	29 e2       	ldi	r18, 0x29	; 41
 330:	3c e5       	ldi	r19, 0x5C	; 92
 332:	4f e9       	ldi	r20, 0x9F	; 159
 334:	50 e4       	ldi	r21, 0x40	; 64
 336:	87 d1       	rcall	.+782    	; 0x646 <__addsf3>
 338:	9b 01       	movw	r18, r22
 33a:	ac 01       	movw	r20, r24
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e2       	ldi	r23, 0x20	; 32
 340:	86 e3       	ldi	r24, 0x36	; 54
 342:	95 e4       	ldi	r25, 0x45	; 69
 344:	e4 d1       	rcall	.+968    	; 0x70e <__divsf3>
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	40 e8       	ldi	r20, 0x80	; 128
 34c:	5f e3       	ldi	r21, 0x3F	; 63
 34e:	7a d1       	rcall	.+756    	; 0x644 <__subsf3>
 350:	60 93 4d 01 	sts	0x014D, r22
 354:	70 93 4e 01 	sts	0x014E, r23
 358:	80 93 4f 01 	sts	0x014F, r24
 35c:	90 93 50 01 	sts	0x0150, r25
					 break;
 360:	8c c0       	rjmp	.+280    	; 0x47a <get_ADC_average+0x18a>
			case 1:  data_sensor = sum1 /10;
 362:	60 91 0a 01 	lds	r22, 0x010A
 366:	70 91 0b 01 	lds	r23, 0x010B
 36a:	80 91 0c 01 	lds	r24, 0x010C
 36e:	90 91 0d 01 	lds	r25, 0x010D
 372:	2a e0       	ldi	r18, 0x0A	; 10
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	bf d2       	rcall	.+1406   	; 0x8fa <__udivmodsi4>
 37c:	30 93 69 01 	sts	0x0169, r19
 380:	20 93 68 01 	sts	0x0168, r18
					 distance = (2914. / (data_sensor + 4.98)) -1;	//in cm formula
 384:	b9 01       	movw	r22, r18
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	29 d2       	rcall	.+1106   	; 0x7de <__floatunsisf>
 38c:	29 e2       	ldi	r18, 0x29	; 41
 38e:	3c e5       	ldi	r19, 0x5C	; 92
 390:	4f e9       	ldi	r20, 0x9F	; 159
 392:	50 e4       	ldi	r21, 0x40	; 64
 394:	58 d1       	rcall	.+688    	; 0x646 <__addsf3>
 396:	9b 01       	movw	r18, r22
 398:	ac 01       	movw	r20, r24
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	70 e2       	ldi	r23, 0x20	; 32
 39e:	86 e3       	ldi	r24, 0x36	; 54
 3a0:	95 e4       	ldi	r25, 0x45	; 69
 3a2:	b5 d1       	rcall	.+874    	; 0x70e <__divsf3>
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	40 e8       	ldi	r20, 0x80	; 128
 3aa:	5f e3       	ldi	r21, 0x3F	; 63
 3ac:	4b d1       	rcall	.+662    	; 0x644 <__subsf3>
 3ae:	60 93 4d 01 	sts	0x014D, r22
 3b2:	70 93 4e 01 	sts	0x014E, r23
 3b6:	80 93 4f 01 	sts	0x014F, r24
 3ba:	90 93 50 01 	sts	0x0150, r25
					 break;
 3be:	5d c0       	rjmp	.+186    	; 0x47a <get_ADC_average+0x18a>
			case 2:  data_sensor = sum2 /10;
 3c0:	60 91 06 01 	lds	r22, 0x0106
 3c4:	70 91 07 01 	lds	r23, 0x0107
 3c8:	80 91 08 01 	lds	r24, 0x0108
 3cc:	90 91 09 01 	lds	r25, 0x0109
 3d0:	2a e0       	ldi	r18, 0x0A	; 10
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	50 e0       	ldi	r21, 0x00	; 0
 3d8:	90 d2       	rcall	.+1312   	; 0x8fa <__udivmodsi4>
 3da:	30 93 69 01 	sts	0x0169, r19
 3de:	20 93 68 01 	sts	0x0168, r18
					 distance = (2914. / (data_sensor + 4.98)) -1;	//in cm formula
 3e2:	b9 01       	movw	r22, r18
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	fa d1       	rcall	.+1012   	; 0x7de <__floatunsisf>
 3ea:	29 e2       	ldi	r18, 0x29	; 41
 3ec:	3c e5       	ldi	r19, 0x5C	; 92
 3ee:	4f e9       	ldi	r20, 0x9F	; 159
 3f0:	50 e4       	ldi	r21, 0x40	; 64
 3f2:	29 d1       	rcall	.+594    	; 0x646 <__addsf3>
 3f4:	9b 01       	movw	r18, r22
 3f6:	ac 01       	movw	r20, r24
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	70 e2       	ldi	r23, 0x20	; 32
 3fc:	86 e3       	ldi	r24, 0x36	; 54
 3fe:	95 e4       	ldi	r25, 0x45	; 69
 400:	86 d1       	rcall	.+780    	; 0x70e <__divsf3>
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	40 e8       	ldi	r20, 0x80	; 128
 408:	5f e3       	ldi	r21, 0x3F	; 63
 40a:	1c d1       	rcall	.+568    	; 0x644 <__subsf3>
 40c:	60 93 4d 01 	sts	0x014D, r22
 410:	70 93 4e 01 	sts	0x014E, r23
 414:	80 93 4f 01 	sts	0x014F, r24
 418:	90 93 50 01 	sts	0x0150, r25
					 break;
 41c:	2e c0       	rjmp	.+92     	; 0x47a <get_ADC_average+0x18a>
			case 3:  data_sensor = sum3 /10;
 41e:	60 91 02 01 	lds	r22, 0x0102
 422:	70 91 03 01 	lds	r23, 0x0103
 426:	80 91 04 01 	lds	r24, 0x0104
 42a:	90 91 05 01 	lds	r25, 0x0105
 42e:	2a e0       	ldi	r18, 0x0A	; 10
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	61 d2       	rcall	.+1218   	; 0x8fa <__udivmodsi4>
 438:	30 93 69 01 	sts	0x0169, r19
 43c:	20 93 68 01 	sts	0x0168, r18
				     distance = (2914. / (data_sensor + 4.98)) -1;	//in cm formula
 440:	b9 01       	movw	r22, r18
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	cb d1       	rcall	.+918    	; 0x7de <__floatunsisf>
 448:	29 e2       	ldi	r18, 0x29	; 41
 44a:	3c e5       	ldi	r19, 0x5C	; 92
 44c:	4f e9       	ldi	r20, 0x9F	; 159
 44e:	50 e4       	ldi	r21, 0x40	; 64
 450:	fa d0       	rcall	.+500    	; 0x646 <__addsf3>
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	70 e2       	ldi	r23, 0x20	; 32
 45a:	86 e3       	ldi	r24, 0x36	; 54
 45c:	95 e4       	ldi	r25, 0x45	; 69
 45e:	57 d1       	rcall	.+686    	; 0x70e <__divsf3>
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	40 e8       	ldi	r20, 0x80	; 128
 466:	5f e3       	ldi	r21, 0x3F	; 63
 468:	ed d0       	rcall	.+474    	; 0x644 <__subsf3>
 46a:	60 93 4d 01 	sts	0x014D, r22
 46e:	70 93 4e 01 	sts	0x014E, r23
 472:	80 93 4f 01 	sts	0x014F, r24
 476:	90 93 50 01 	sts	0x0150, r25
					 break;		 
		}
		flag=0;
 47a:	10 92 15 01 	sts	0x0115, r1
 47e:	10 92 14 01 	sts	0x0114, r1
		return distance; //ADC average in cm
 482:	60 91 4d 01 	lds	r22, 0x014D
 486:	70 91 4e 01 	lds	r23, 0x014E
 48a:	80 91 4f 01 	lds	r24, 0x014F
 48e:	90 91 50 01 	lds	r25, 0x0150
}
 492:	08 95       	ret

00000494 <encoders_init>:


void encoders_init()
{
	/* set PD2, PD3 as input */
	DDRD &=~ (1 << PORTD2);
 494:	52 98       	cbi	0x0a, 2	; 10
	DDRD &=~(1 << PORTD3);/* PD2 and PD3 as input */
 496:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << PORTD2)|(1<<PORTD3);   /* PD2 and PD3 pull-up enabled   */
 498:	8b b1       	in	r24, 0x0b	; 11
 49a:	8c 60       	ori	r24, 0x0C	; 12
 49c:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK|=(1<<INT0)|(1<<INT1);	//We use external interrupt INT0 and INT1
 49e:	8d b3       	in	r24, 0x1d	; 29
 4a0:	83 60       	ori	r24, 0x03	; 3
 4a2:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC00)|(1<<ISC01)|(1<<ISC10)|(1<<ISC11);	//The rising edge of INT0 and INT1 generates asynchronously an interrupt request.
 4a4:	e9 e6       	ldi	r30, 0x69	; 105
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	8f 60       	ori	r24, 0x0F	; 15
 4ac:	80 83       	st	Z, r24
	
	grey_left=0;
 4ae:	10 92 17 01 	sts	0x0117, r1
	grey_right=0;
 4b2:	10 92 13 01 	sts	0x0113, r1
	rotations_right=0;
 4b6:	10 92 16 01 	sts	0x0116, r1
	rotations_left=0;
 4ba:	10 92 1e 01 	sts	0x011E, r1
 4be:	08 95       	ret

000004c0 <__vector_1>:
}



ISR(INT0_vect) //Right side interrupt
{
 4c0:	1f 92       	push	r1
 4c2:	0f 92       	push	r0
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	0f 92       	push	r0
 4c8:	11 24       	eor	r1, r1
 4ca:	8f 93       	push	r24
	
		grey_right++;
 4cc:	80 91 13 01 	lds	r24, 0x0113
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	80 93 13 01 	sts	0x0113, r24
		if(grey_right>=10)
 4d6:	80 91 13 01 	lds	r24, 0x0113
 4da:	8a 30       	cpi	r24, 0x0A	; 10
 4dc:	38 f0       	brcs	.+14     	; 0x4ec <__vector_1+0x2c>
		{
			rotations_right++;
 4de:	80 91 16 01 	lds	r24, 0x0116
 4e2:	8f 5f       	subi	r24, 0xFF	; 255
 4e4:	80 93 16 01 	sts	0x0116, r24
			grey_right=0;
 4e8:	10 92 13 01 	sts	0x0113, r1
		}
	
}
 4ec:	8f 91       	pop	r24
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_2>:


ISR(INT1_vect)  //Left side interrupt
{
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	8f 93       	push	r24
	
	grey_left++;
 504:	80 91 17 01 	lds	r24, 0x0117
 508:	8f 5f       	subi	r24, 0xFF	; 255
 50a:	80 93 17 01 	sts	0x0117, r24
	if(grey_left>=10)
 50e:	80 91 17 01 	lds	r24, 0x0117
 512:	8a 30       	cpi	r24, 0x0A	; 10
 514:	38 f0       	brcs	.+14     	; 0x524 <__vector_2+0x2c>
	{
		rotations_left++;
 516:	80 91 1e 01 	lds	r24, 0x011E
 51a:	8f 5f       	subi	r24, 0xFF	; 255
 51c:	80 93 1e 01 	sts	0x011E, r24
		grey_left=0;
 520:	10 92 17 01 	sts	0x0117, r1
	}
	
}
 524:	8f 91       	pop	r24
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <timer3_init>:


void timer3_init()
{
	// clear on compare match
	TCCR3A |= (1<<COM3A1);
 530:	e0 e9       	ldi	r30, 0x90	; 144
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	80 68       	ori	r24, 0x80	; 128
 538:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32);
 53a:	e1 e9       	ldi	r30, 0x91	; 145
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	88 60       	ori	r24, 0x08	; 8
 542:	80 83       	st	Z, r24
	// set up timer with no prescaler count to 500
	TCCR3B |= (1 << CS30);
 544:	80 81       	ld	r24, Z
 546:	81 60       	ori	r24, 0x01	; 1
 548:	80 83       	st	Z, r24
	
	//set up compare value
	OCR3AH = 0x01;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = 0xF4;
 550:	84 ef       	ldi	r24, 0xF4	; 244
 552:	80 93 98 00 	sts	0x0098, r24
	
	// initialize counter
	TCNT3H = 0;
 556:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 55a:	10 92 94 00 	sts	0x0094, r1
	
	
	
	TIMSK3 |= (1<<OCIE3A) | (1<<TOIE3);
 55e:	e1 e7       	ldi	r30, 0x71	; 113
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	83 60       	ori	r24, 0x03	; 3
 566:	80 83       	st	Z, r24
 568:	08 95       	ret

0000056a <__vector_32>:




ISR(TIMER3_COMPA_vect)
{
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	0b b6       	in	r0, 0x3b	; 59
 576:	0f 92       	push	r0
 578:	2f 93       	push	r18
 57a:	3f 93       	push	r19
 57c:	4f 93       	push	r20
 57e:	5f 93       	push	r21
 580:	6f 93       	push	r22
 582:	7f 93       	push	r23
 584:	8f 93       	push	r24
 586:	9f 93       	push	r25
 588:	af 93       	push	r26
 58a:	bf 93       	push	r27
 58c:	ef 93       	push	r30
 58e:	ff 93       	push	r31
	
	// initialize counter
	TCNT3H = 0;
 590:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 594:	10 92 94 00 	sts	0x0094, r1
	// keep a track of number of overflows
	ovfl++;
 598:	80 91 f3 01 	lds	r24, 0x01F3
 59c:	90 91 f4 01 	lds	r25, 0x01F4
 5a0:	01 96       	adiw	r24, 0x01	; 1
 5a2:	90 93 f4 01 	sts	0x01F4, r25
 5a6:	80 93 f3 01 	sts	0x01F3, r24
	if(ovfl>=40)
 5aa:	80 91 f3 01 	lds	r24, 0x01F3
 5ae:	90 91 f4 01 	lds	r25, 0x01F4
 5b2:	88 97       	sbiw	r24, 0x28	; 40
 5b4:	20 f1       	brcs	.+72     	; 0x5fe <__vector_32+0x94>
	{	s_time.ms++;
 5b6:	e8 e1       	ldi	r30, 0x18	; 24
 5b8:	f1 e0       	ldi	r31, 0x01	; 1
 5ba:	80 81       	ld	r24, Z
 5bc:	91 81       	ldd	r25, Z+1	; 0x01
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	91 83       	std	Z+1, r25	; 0x01
 5c2:	80 83       	st	Z, r24
		if (s_time.ms>=1000)
 5c4:	88 3e       	cpi	r24, 0xE8	; 232
 5c6:	93 40       	sbci	r25, 0x03	; 3
 5c8:	b0 f0       	brcs	.+44     	; 0x5f6 <__vector_32+0x8c>
		{
			s_time.s++;
 5ca:	82 81       	ldd	r24, Z+2	; 0x02
 5cc:	93 81       	ldd	r25, Z+3	; 0x03
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	93 83       	std	Z+3, r25	; 0x03
 5d2:	82 83       	std	Z+2, r24	; 0x02
			s_time.ms=0;
 5d4:	11 82       	std	Z+1, r1	; 0x01
 5d6:	10 82       	st	Z, r1
			if(s_time.s>=60)
 5d8:	cc 97       	sbiw	r24, 0x3c	; 60
 5da:	68 f0       	brcs	.+26     	; 0x5f6 <__vector_32+0x8c>
			{
				s_time.m++;
 5dc:	84 81       	ldd	r24, Z+4	; 0x04
 5de:	95 81       	ldd	r25, Z+5	; 0x05
 5e0:	01 96       	adiw	r24, 0x01	; 1
 5e2:	95 83       	std	Z+5, r25	; 0x05
 5e4:	84 83       	std	Z+4, r24	; 0x04
				s_time.s=0;
 5e6:	13 82       	std	Z+3, r1	; 0x03
 5e8:	12 82       	std	Z+2, r1	; 0x02
				
				if(s_time.m>=60)
 5ea:	cc 97       	sbiw	r24, 0x3c	; 60
 5ec:	20 f0       	brcs	.+8      	; 0x5f6 <__vector_32+0x8c>
				s_time.m=0;
 5ee:	10 92 1d 01 	sts	0x011D, r1
 5f2:	10 92 1c 01 	sts	0x011C, r1
			}
			
		}
		ovfl=0;
 5f6:	10 92 f4 01 	sts	0x01F4, r1
 5fa:	10 92 f3 01 	sts	0x01F3, r1
	}
	
	ADC_update_values();
 5fe:	9b dd       	rcall	.-1226   	; 0x136 <ADC_update_values>
	
 600:	ff 91       	pop	r31
 602:	ef 91       	pop	r30
 604:	bf 91       	pop	r27
 606:	af 91       	pop	r26
 608:	9f 91       	pop	r25
 60a:	8f 91       	pop	r24
 60c:	7f 91       	pop	r23
 60e:	6f 91       	pop	r22
 610:	5f 91       	pop	r21
 612:	4f 91       	pop	r20
 614:	3f 91       	pop	r19
 616:	2f 91       	pop	r18
 618:	0f 90       	pop	r0
 61a:	0b be       	out	0x3b, r0	; 59
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <USART_Init>:
unsigned int my_ubrr = MYUBRR;

void USART_Init()
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr>>8);
 626:	80 91 01 01 	lds	r24, 0x0101
 62a:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char)my_ubrr;
 62e:	80 91 00 01 	lds	r24, 0x0100
 632:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 636:	88 e1       	ldi	r24, 0x18	; 24
 638:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 63c:	8e e0       	ldi	r24, 0x0E	; 14
 63e:	80 93 c2 00 	sts	0x00C2, r24
 642:	08 95       	ret

00000644 <__subsf3>:
 644:	50 58       	subi	r21, 0x80	; 128

00000646 <__addsf3>:
 646:	bb 27       	eor	r27, r27
 648:	aa 27       	eor	r26, r26
 64a:	0e d0       	rcall	.+28     	; 0x668 <__addsf3x>
 64c:	1c c1       	rjmp	.+568    	; 0x886 <__fp_round>
 64e:	0d d1       	rcall	.+538    	; 0x86a <__fp_pscA>
 650:	30 f0       	brcs	.+12     	; 0x65e <__addsf3+0x18>
 652:	12 d1       	rcall	.+548    	; 0x878 <__fp_pscB>
 654:	20 f0       	brcs	.+8      	; 0x65e <__addsf3+0x18>
 656:	31 f4       	brne	.+12     	; 0x664 <__addsf3+0x1e>
 658:	9f 3f       	cpi	r25, 0xFF	; 255
 65a:	11 f4       	brne	.+4      	; 0x660 <__addsf3+0x1a>
 65c:	1e f4       	brtc	.+6      	; 0x664 <__addsf3+0x1e>
 65e:	02 c1       	rjmp	.+516    	; 0x864 <__fp_nan>
 660:	0e f4       	brtc	.+2      	; 0x664 <__addsf3+0x1e>
 662:	e0 95       	com	r30
 664:	e7 fb       	bst	r30, 7
 666:	f8 c0       	rjmp	.+496    	; 0x858 <__fp_inf>

00000668 <__addsf3x>:
 668:	e9 2f       	mov	r30, r25
 66a:	1e d1       	rcall	.+572    	; 0x8a8 <__fp_split3>
 66c:	80 f3       	brcs	.-32     	; 0x64e <__addsf3+0x8>
 66e:	ba 17       	cp	r27, r26
 670:	62 07       	cpc	r22, r18
 672:	73 07       	cpc	r23, r19
 674:	84 07       	cpc	r24, r20
 676:	95 07       	cpc	r25, r21
 678:	18 f0       	brcs	.+6      	; 0x680 <__addsf3x+0x18>
 67a:	71 f4       	brne	.+28     	; 0x698 <__addsf3x+0x30>
 67c:	9e f5       	brtc	.+102    	; 0x6e4 <__addsf3x+0x7c>
 67e:	36 c1       	rjmp	.+620    	; 0x8ec <__fp_zero>
 680:	0e f4       	brtc	.+2      	; 0x684 <__addsf3x+0x1c>
 682:	e0 95       	com	r30
 684:	0b 2e       	mov	r0, r27
 686:	ba 2f       	mov	r27, r26
 688:	a0 2d       	mov	r26, r0
 68a:	0b 01       	movw	r0, r22
 68c:	b9 01       	movw	r22, r18
 68e:	90 01       	movw	r18, r0
 690:	0c 01       	movw	r0, r24
 692:	ca 01       	movw	r24, r20
 694:	a0 01       	movw	r20, r0
 696:	11 24       	eor	r1, r1
 698:	ff 27       	eor	r31, r31
 69a:	59 1b       	sub	r21, r25
 69c:	99 f0       	breq	.+38     	; 0x6c4 <__addsf3x+0x5c>
 69e:	59 3f       	cpi	r21, 0xF9	; 249
 6a0:	50 f4       	brcc	.+20     	; 0x6b6 <__addsf3x+0x4e>
 6a2:	50 3e       	cpi	r21, 0xE0	; 224
 6a4:	68 f1       	brcs	.+90     	; 0x700 <__addsf3x+0x98>
 6a6:	1a 16       	cp	r1, r26
 6a8:	f0 40       	sbci	r31, 0x00	; 0
 6aa:	a2 2f       	mov	r26, r18
 6ac:	23 2f       	mov	r18, r19
 6ae:	34 2f       	mov	r19, r20
 6b0:	44 27       	eor	r20, r20
 6b2:	58 5f       	subi	r21, 0xF8	; 248
 6b4:	f3 cf       	rjmp	.-26     	; 0x69c <__addsf3x+0x34>
 6b6:	46 95       	lsr	r20
 6b8:	37 95       	ror	r19
 6ba:	27 95       	ror	r18
 6bc:	a7 95       	ror	r26
 6be:	f0 40       	sbci	r31, 0x00	; 0
 6c0:	53 95       	inc	r21
 6c2:	c9 f7       	brne	.-14     	; 0x6b6 <__addsf3x+0x4e>
 6c4:	7e f4       	brtc	.+30     	; 0x6e4 <__addsf3x+0x7c>
 6c6:	1f 16       	cp	r1, r31
 6c8:	ba 0b       	sbc	r27, r26
 6ca:	62 0b       	sbc	r22, r18
 6cc:	73 0b       	sbc	r23, r19
 6ce:	84 0b       	sbc	r24, r20
 6d0:	ba f0       	brmi	.+46     	; 0x700 <__addsf3x+0x98>
 6d2:	91 50       	subi	r25, 0x01	; 1
 6d4:	a1 f0       	breq	.+40     	; 0x6fe <__addsf3x+0x96>
 6d6:	ff 0f       	add	r31, r31
 6d8:	bb 1f       	adc	r27, r27
 6da:	66 1f       	adc	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	c2 f7       	brpl	.-16     	; 0x6d2 <__addsf3x+0x6a>
 6e2:	0e c0       	rjmp	.+28     	; 0x700 <__addsf3x+0x98>
 6e4:	ba 0f       	add	r27, r26
 6e6:	62 1f       	adc	r22, r18
 6e8:	73 1f       	adc	r23, r19
 6ea:	84 1f       	adc	r24, r20
 6ec:	48 f4       	brcc	.+18     	; 0x700 <__addsf3x+0x98>
 6ee:	87 95       	ror	r24
 6f0:	77 95       	ror	r23
 6f2:	67 95       	ror	r22
 6f4:	b7 95       	ror	r27
 6f6:	f7 95       	ror	r31
 6f8:	9e 3f       	cpi	r25, 0xFE	; 254
 6fa:	08 f0       	brcs	.+2      	; 0x6fe <__addsf3x+0x96>
 6fc:	b3 cf       	rjmp	.-154    	; 0x664 <__addsf3+0x1e>
 6fe:	93 95       	inc	r25
 700:	88 0f       	add	r24, r24
 702:	08 f0       	brcs	.+2      	; 0x706 <__addsf3x+0x9e>
 704:	99 27       	eor	r25, r25
 706:	ee 0f       	add	r30, r30
 708:	97 95       	ror	r25
 70a:	87 95       	ror	r24
 70c:	08 95       	ret

0000070e <__divsf3>:
 70e:	0c d0       	rcall	.+24     	; 0x728 <__divsf3x>
 710:	ba c0       	rjmp	.+372    	; 0x886 <__fp_round>
 712:	b2 d0       	rcall	.+356    	; 0x878 <__fp_pscB>
 714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0x18>
 716:	a9 d0       	rcall	.+338    	; 0x86a <__fp_pscA>
 718:	30 f0       	brcs	.+12     	; 0x726 <__divsf3+0x18>
 71a:	21 f4       	brne	.+8      	; 0x724 <__divsf3+0x16>
 71c:	5f 3f       	cpi	r21, 0xFF	; 255
 71e:	19 f0       	breq	.+6      	; 0x726 <__divsf3+0x18>
 720:	9b c0       	rjmp	.+310    	; 0x858 <__fp_inf>
 722:	51 11       	cpse	r21, r1
 724:	e4 c0       	rjmp	.+456    	; 0x8ee <__fp_szero>
 726:	9e c0       	rjmp	.+316    	; 0x864 <__fp_nan>

00000728 <__divsf3x>:
 728:	bf d0       	rcall	.+382    	; 0x8a8 <__fp_split3>
 72a:	98 f3       	brcs	.-26     	; 0x712 <__divsf3+0x4>

0000072c <__divsf3_pse>:
 72c:	99 23       	and	r25, r25
 72e:	c9 f3       	breq	.-14     	; 0x722 <__divsf3+0x14>
 730:	55 23       	and	r21, r21
 732:	b1 f3       	breq	.-20     	; 0x720 <__divsf3+0x12>
 734:	95 1b       	sub	r25, r21
 736:	55 0b       	sbc	r21, r21
 738:	bb 27       	eor	r27, r27
 73a:	aa 27       	eor	r26, r26
 73c:	62 17       	cp	r22, r18
 73e:	73 07       	cpc	r23, r19
 740:	84 07       	cpc	r24, r20
 742:	38 f0       	brcs	.+14     	; 0x752 <__divsf3_pse+0x26>
 744:	9f 5f       	subi	r25, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	22 0f       	add	r18, r18
 74a:	33 1f       	adc	r19, r19
 74c:	44 1f       	adc	r20, r20
 74e:	aa 1f       	adc	r26, r26
 750:	a9 f3       	breq	.-22     	; 0x73c <__divsf3_pse+0x10>
 752:	33 d0       	rcall	.+102    	; 0x7ba <__divsf3_pse+0x8e>
 754:	0e 2e       	mov	r0, r30
 756:	3a f0       	brmi	.+14     	; 0x766 <__divsf3_pse+0x3a>
 758:	e0 e8       	ldi	r30, 0x80	; 128
 75a:	30 d0       	rcall	.+96     	; 0x7bc <__divsf3_pse+0x90>
 75c:	91 50       	subi	r25, 0x01	; 1
 75e:	50 40       	sbci	r21, 0x00	; 0
 760:	e6 95       	lsr	r30
 762:	00 1c       	adc	r0, r0
 764:	ca f7       	brpl	.-14     	; 0x758 <__divsf3_pse+0x2c>
 766:	29 d0       	rcall	.+82     	; 0x7ba <__divsf3_pse+0x8e>
 768:	fe 2f       	mov	r31, r30
 76a:	27 d0       	rcall	.+78     	; 0x7ba <__divsf3_pse+0x8e>
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	bb 1f       	adc	r27, r27
 774:	26 17       	cp	r18, r22
 776:	37 07       	cpc	r19, r23
 778:	48 07       	cpc	r20, r24
 77a:	ab 07       	cpc	r26, r27
 77c:	b0 e8       	ldi	r27, 0x80	; 128
 77e:	09 f0       	breq	.+2      	; 0x782 <__divsf3_pse+0x56>
 780:	bb 0b       	sbc	r27, r27
 782:	80 2d       	mov	r24, r0
 784:	bf 01       	movw	r22, r30
 786:	ff 27       	eor	r31, r31
 788:	93 58       	subi	r25, 0x83	; 131
 78a:	5f 4f       	sbci	r21, 0xFF	; 255
 78c:	2a f0       	brmi	.+10     	; 0x798 <__divsf3_pse+0x6c>
 78e:	9e 3f       	cpi	r25, 0xFE	; 254
 790:	51 05       	cpc	r21, r1
 792:	68 f0       	brcs	.+26     	; 0x7ae <__divsf3_pse+0x82>
 794:	61 c0       	rjmp	.+194    	; 0x858 <__fp_inf>
 796:	ab c0       	rjmp	.+342    	; 0x8ee <__fp_szero>
 798:	5f 3f       	cpi	r21, 0xFF	; 255
 79a:	ec f3       	brlt	.-6      	; 0x796 <__divsf3_pse+0x6a>
 79c:	98 3e       	cpi	r25, 0xE8	; 232
 79e:	dc f3       	brlt	.-10     	; 0x796 <__divsf3_pse+0x6a>
 7a0:	86 95       	lsr	r24
 7a2:	77 95       	ror	r23
 7a4:	67 95       	ror	r22
 7a6:	b7 95       	ror	r27
 7a8:	f7 95       	ror	r31
 7aa:	9f 5f       	subi	r25, 0xFF	; 255
 7ac:	c9 f7       	brne	.-14     	; 0x7a0 <__divsf3_pse+0x74>
 7ae:	88 0f       	add	r24, r24
 7b0:	91 1d       	adc	r25, r1
 7b2:	96 95       	lsr	r25
 7b4:	87 95       	ror	r24
 7b6:	97 f9       	bld	r25, 7
 7b8:	08 95       	ret
 7ba:	e1 e0       	ldi	r30, 0x01	; 1
 7bc:	66 0f       	add	r22, r22
 7be:	77 1f       	adc	r23, r23
 7c0:	88 1f       	adc	r24, r24
 7c2:	bb 1f       	adc	r27, r27
 7c4:	62 17       	cp	r22, r18
 7c6:	73 07       	cpc	r23, r19
 7c8:	84 07       	cpc	r24, r20
 7ca:	ba 07       	cpc	r27, r26
 7cc:	20 f0       	brcs	.+8      	; 0x7d6 <__divsf3_pse+0xaa>
 7ce:	62 1b       	sub	r22, r18
 7d0:	73 0b       	sbc	r23, r19
 7d2:	84 0b       	sbc	r24, r20
 7d4:	ba 0b       	sbc	r27, r26
 7d6:	ee 1f       	adc	r30, r30
 7d8:	88 f7       	brcc	.-30     	; 0x7bc <__divsf3_pse+0x90>
 7da:	e0 95       	com	r30
 7dc:	08 95       	ret

000007de <__floatunsisf>:
 7de:	e8 94       	clt
 7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <__floatsisf+0x12>

000007e2 <__floatsisf>:
 7e2:	97 fb       	bst	r25, 7
 7e4:	3e f4       	brtc	.+14     	; 0x7f4 <__floatsisf+0x12>
 7e6:	90 95       	com	r25
 7e8:	80 95       	com	r24
 7ea:	70 95       	com	r23
 7ec:	61 95       	neg	r22
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f 4f       	sbci	r24, 0xFF	; 255
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	99 23       	and	r25, r25
 7f6:	a9 f0       	breq	.+42     	; 0x822 <__floatsisf+0x40>
 7f8:	f9 2f       	mov	r31, r25
 7fa:	96 e9       	ldi	r25, 0x96	; 150
 7fc:	bb 27       	eor	r27, r27
 7fe:	93 95       	inc	r25
 800:	f6 95       	lsr	r31
 802:	87 95       	ror	r24
 804:	77 95       	ror	r23
 806:	67 95       	ror	r22
 808:	b7 95       	ror	r27
 80a:	f1 11       	cpse	r31, r1
 80c:	f8 cf       	rjmp	.-16     	; 0x7fe <__floatsisf+0x1c>
 80e:	fa f4       	brpl	.+62     	; 0x84e <__floatsisf+0x6c>
 810:	bb 0f       	add	r27, r27
 812:	11 f4       	brne	.+4      	; 0x818 <__floatsisf+0x36>
 814:	60 ff       	sbrs	r22, 0
 816:	1b c0       	rjmp	.+54     	; 0x84e <__floatsisf+0x6c>
 818:	6f 5f       	subi	r22, 0xFF	; 255
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	16 c0       	rjmp	.+44     	; 0x84e <__floatsisf+0x6c>
 822:	88 23       	and	r24, r24
 824:	11 f0       	breq	.+4      	; 0x82a <__floatsisf+0x48>
 826:	96 e9       	ldi	r25, 0x96	; 150
 828:	11 c0       	rjmp	.+34     	; 0x84c <__floatsisf+0x6a>
 82a:	77 23       	and	r23, r23
 82c:	21 f0       	breq	.+8      	; 0x836 <__floatsisf+0x54>
 82e:	9e e8       	ldi	r25, 0x8E	; 142
 830:	87 2f       	mov	r24, r23
 832:	76 2f       	mov	r23, r22
 834:	05 c0       	rjmp	.+10     	; 0x840 <__floatsisf+0x5e>
 836:	66 23       	and	r22, r22
 838:	71 f0       	breq	.+28     	; 0x856 <__floatsisf+0x74>
 83a:	96 e8       	ldi	r25, 0x86	; 134
 83c:	86 2f       	mov	r24, r22
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	60 e0       	ldi	r22, 0x00	; 0
 842:	2a f0       	brmi	.+10     	; 0x84e <__floatsisf+0x6c>
 844:	9a 95       	dec	r25
 846:	66 0f       	add	r22, r22
 848:	77 1f       	adc	r23, r23
 84a:	88 1f       	adc	r24, r24
 84c:	da f7       	brpl	.-10     	; 0x844 <__floatsisf+0x62>
 84e:	88 0f       	add	r24, r24
 850:	96 95       	lsr	r25
 852:	87 95       	ror	r24
 854:	97 f9       	bld	r25, 7
 856:	08 95       	ret

00000858 <__fp_inf>:
 858:	97 f9       	bld	r25, 7
 85a:	9f 67       	ori	r25, 0x7F	; 127
 85c:	80 e8       	ldi	r24, 0x80	; 128
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	08 95       	ret

00000864 <__fp_nan>:
 864:	9f ef       	ldi	r25, 0xFF	; 255
 866:	80 ec       	ldi	r24, 0xC0	; 192
 868:	08 95       	ret

0000086a <__fp_pscA>:
 86a:	00 24       	eor	r0, r0
 86c:	0a 94       	dec	r0
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	18 06       	cpc	r1, r24
 874:	09 06       	cpc	r0, r25
 876:	08 95       	ret

00000878 <__fp_pscB>:
 878:	00 24       	eor	r0, r0
 87a:	0a 94       	dec	r0
 87c:	12 16       	cp	r1, r18
 87e:	13 06       	cpc	r1, r19
 880:	14 06       	cpc	r1, r20
 882:	05 06       	cpc	r0, r21
 884:	08 95       	ret

00000886 <__fp_round>:
 886:	09 2e       	mov	r0, r25
 888:	03 94       	inc	r0
 88a:	00 0c       	add	r0, r0
 88c:	11 f4       	brne	.+4      	; 0x892 <__fp_round+0xc>
 88e:	88 23       	and	r24, r24
 890:	52 f0       	brmi	.+20     	; 0x8a6 <__fp_round+0x20>
 892:	bb 0f       	add	r27, r27
 894:	40 f4       	brcc	.+16     	; 0x8a6 <__fp_round+0x20>
 896:	bf 2b       	or	r27, r31
 898:	11 f4       	brne	.+4      	; 0x89e <__fp_round+0x18>
 89a:	60 ff       	sbrs	r22, 0
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <__fp_round+0x20>
 89e:	6f 5f       	subi	r22, 0xFF	; 255
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	8f 4f       	sbci	r24, 0xFF	; 255
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	08 95       	ret

000008a8 <__fp_split3>:
 8a8:	57 fd       	sbrc	r21, 7
 8aa:	90 58       	subi	r25, 0x80	; 128
 8ac:	44 0f       	add	r20, r20
 8ae:	55 1f       	adc	r21, r21
 8b0:	59 f0       	breq	.+22     	; 0x8c8 <__fp_splitA+0x10>
 8b2:	5f 3f       	cpi	r21, 0xFF	; 255
 8b4:	71 f0       	breq	.+28     	; 0x8d2 <__fp_splitA+0x1a>
 8b6:	47 95       	ror	r20

000008b8 <__fp_splitA>:
 8b8:	88 0f       	add	r24, r24
 8ba:	97 fb       	bst	r25, 7
 8bc:	99 1f       	adc	r25, r25
 8be:	61 f0       	breq	.+24     	; 0x8d8 <__fp_splitA+0x20>
 8c0:	9f 3f       	cpi	r25, 0xFF	; 255
 8c2:	79 f0       	breq	.+30     	; 0x8e2 <__fp_splitA+0x2a>
 8c4:	87 95       	ror	r24
 8c6:	08 95       	ret
 8c8:	12 16       	cp	r1, r18
 8ca:	13 06       	cpc	r1, r19
 8cc:	14 06       	cpc	r1, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	f2 cf       	rjmp	.-28     	; 0x8b6 <__fp_split3+0xe>
 8d2:	46 95       	lsr	r20
 8d4:	f1 df       	rcall	.-30     	; 0x8b8 <__fp_splitA>
 8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <__fp_splitA+0x30>
 8d8:	16 16       	cp	r1, r22
 8da:	17 06       	cpc	r1, r23
 8dc:	18 06       	cpc	r1, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	f1 cf       	rjmp	.-30     	; 0x8c4 <__fp_splitA+0xc>
 8e2:	86 95       	lsr	r24
 8e4:	71 05       	cpc	r23, r1
 8e6:	61 05       	cpc	r22, r1
 8e8:	08 94       	sec
 8ea:	08 95       	ret

000008ec <__fp_zero>:
 8ec:	e8 94       	clt

000008ee <__fp_szero>:
 8ee:	bb 27       	eor	r27, r27
 8f0:	66 27       	eor	r22, r22
 8f2:	77 27       	eor	r23, r23
 8f4:	cb 01       	movw	r24, r22
 8f6:	97 f9       	bld	r25, 7
 8f8:	08 95       	ret

000008fa <__udivmodsi4>:
 8fa:	a1 e2       	ldi	r26, 0x21	; 33
 8fc:	1a 2e       	mov	r1, r26
 8fe:	aa 1b       	sub	r26, r26
 900:	bb 1b       	sub	r27, r27
 902:	fd 01       	movw	r30, r26
 904:	0d c0       	rjmp	.+26     	; 0x920 <__udivmodsi4_ep>

00000906 <__udivmodsi4_loop>:
 906:	aa 1f       	adc	r26, r26
 908:	bb 1f       	adc	r27, r27
 90a:	ee 1f       	adc	r30, r30
 90c:	ff 1f       	adc	r31, r31
 90e:	a2 17       	cp	r26, r18
 910:	b3 07       	cpc	r27, r19
 912:	e4 07       	cpc	r30, r20
 914:	f5 07       	cpc	r31, r21
 916:	20 f0       	brcs	.+8      	; 0x920 <__udivmodsi4_ep>
 918:	a2 1b       	sub	r26, r18
 91a:	b3 0b       	sbc	r27, r19
 91c:	e4 0b       	sbc	r30, r20
 91e:	f5 0b       	sbc	r31, r21

00000920 <__udivmodsi4_ep>:
 920:	66 1f       	adc	r22, r22
 922:	77 1f       	adc	r23, r23
 924:	88 1f       	adc	r24, r24
 926:	99 1f       	adc	r25, r25
 928:	1a 94       	dec	r1
 92a:	69 f7       	brne	.-38     	; 0x906 <__udivmodsi4_loop>
 92c:	60 95       	com	r22
 92e:	70 95       	com	r23
 930:	80 95       	com	r24
 932:	90 95       	com	r25
 934:	9b 01       	movw	r18, r22
 936:	ac 01       	movw	r20, r24
 938:	bd 01       	movw	r22, r26
 93a:	cf 01       	movw	r24, r30
 93c:	08 95       	ret

0000093e <_exit>:
 93e:	f8 94       	cli

00000940 <__stop_program>:
 940:	ff cf       	rjmp	.-2      	; 0x940 <__stop_program>
