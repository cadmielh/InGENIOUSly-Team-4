
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002de  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  00800102  00800102  00000374  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be9  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ff  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e1  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d2  00000000  00000000  0000250b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00002ddd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	b7 c0       	rjmp	.+366    	; 0x174 <__vector_1>
   6:	00 00       	nop
   8:	d1 c0       	rjmp	.+418    	; 0x1ac <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	ce c0       	rjmp	.+412    	; 0x21e <__vector_32>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ed       	ldi	r30, 0xDE	; 222
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 38       	cpi	r26, 0x89	; 137
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	0a c1       	rjmp	.+532    	; 0x2da <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
int main (void)
{ 
	
	uint8_t speed;
	speed=200;
	primit='a';
  c8:	81 e6       	ldi	r24, 0x61	; 97
  ca:	80 93 84 01 	sts	0x0184, r24
	
	USART_Init();
  ce:	f6 d0       	rcall	.+492    	; 0x2bc <USART_Init>
	ADC_init();
  d0:	24 d0       	rcall	.+72     	; 0x11a <ADC_init>
	PWM1_init();
  d2:	15 d0       	rcall	.+42     	; 0xfe <PWM1_init>
	PWM2_init();
  d4:	1b d0       	rcall	.+54     	; 0x10c <PWM2_init>
	timer3_init();
  d6:	86 d0       	rcall	.+268    	; 0x1e4 <timer3_init>
	encoders_init();
  d8:	37 d0       	rcall	.+110    	; 0x148 <encoders_init>
	sei(); //enable interrupts
  da:	78 94       	sei
  dc:	0f 2e       	mov	r0, r31
  de:	f5 e0       	ldi	r31, 0x05	; 5
  e0:	ef 2e       	mov	r14, r31
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	ff 2e       	mov	r15, r31
  e6:	f0 2d       	mov	r31, r0
  e8:	0d e7       	ldi	r16, 0x7D	; 125
  ea:	11 e0       	ldi	r17, 0x01	; 1
  ec:	e7 01       	movw	r28, r14
		//total=0;
		
	
		for(int i=0;i<60;i++)
			{
				v[i]=ADC_read(1);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	1b d0       	rcall	.+54     	; 0x128 <ADC_read>
  f2:	89 93       	st	Y+, r24
  f4:	99 93       	st	Y+, r25
	while (1)  // main loop										
	{
		//total=0;
		
	
		for(int i=0;i<60;i++)
  f6:	c0 17       	cp	r28, r16
  f8:	d1 07       	cpc	r29, r17
  fa:	c9 f7       	brne	.-14     	; 0xee <main+0x26>
  fc:	f7 cf       	rjmp	.-18     	; 0xec <main+0x24>

000000fe <PWM1_init>:


void PWM1_init()
{
	// initialize TCCR0 as per requirement, say as follows
	TCCR0A |= (1<<COM0A1)|(1<<WGM00);
  fe:	84 b5       	in	r24, 0x24	; 36
 100:	81 68       	ori	r24, 0x81	; 129
 102:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	85 bd       	out	0x25, r24	; 37
	
	//PWM PIN
	DDRB|= (1<<PORTB3);
 108:	23 9a       	sbi	0x04, 3	; 4
 10a:	08 95       	ret

0000010c <PWM2_init>:


void PWM2_init()
{
	// initialize TCCR1 as per requirement, say as follows
	TCCR0A |= (1<<COM0B1)|(1<<WGM02);
 10c:	84 b5       	in	r24, 0x24	; 36
 10e:	88 62       	ori	r24, 0x28	; 40
 110:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	85 bd       	out	0x25, r24	; 37
	
	//PWM PIN
	DDRB|= (1<<PORTB4);
 116:	24 9a       	sbi	0x04, 4	; 4
 118:	08 95       	ret

0000011a <ADC_init>:
uint8_t val;


void ADC_init()
{
	DDRA &= ~(1<<PINA1);
 11a:	09 98       	cbi	0x01, 1	; 1
	ADCSRA |= 1<<ADEN;		  //Turn on ADC
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 68       	ori	r24, 0x80	; 128
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <ADC_read>:

uint16_t ADC_read(uint8_t channel)
{
	float distance;
	channel=channel & 0b00000111;		//Select ADC Channel, channel must be 0-7
	ADMUX = 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 7c 00 	sts	0x007C, r24
	//ADMUX |= (1<<MUX0);        //Clear the older channel that was read
	//ADMUX|= channel;		//Defines the new ADC channel to be read
	
	ADCSRA |=(1<<ADSC);	// enable ADC and start single conversion
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
	
	
	while(ADCSRA & (1<<ADSC));	// wait for conversion to complete
 138:	80 81       	ld	r24, Z
 13a:	86 fd       	sbrc	r24, 6
 13c:	fd cf       	rjmp	.-6      	; 0x138 <ADC_read+0x10>
	//volts=ADC*0.0048828125;
	//distance = 65 * pow(volts, -1.10);
	//distance = (2914. / (ADC + 5))-1;
	return ADC;
 13e:	80 91 78 00 	lds	r24, 0x0078
 142:	90 91 79 00 	lds	r25, 0x0079
}
 146:	08 95       	ret

00000148 <encoders_init>:


void encoders_init()
{
	/* set PD2, PD3 as input */
	DDRD &=~ (1 << PORTD2);
 148:	52 98       	cbi	0x0a, 2	; 10
	DDRD &=~(1 << PORTD3);/* PD2 and PD3 as input */
 14a:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << PORTD2)|(1<<PORTD3);   /* PD2 and PD3 pull-up enabled   */
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	8c 60       	ori	r24, 0x0C	; 12
 150:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK|=(1<<INT0)|(1<<INT1);	//We use external interrupt INT0 and INT1
 152:	8d b3       	in	r24, 0x1d	; 29
 154:	83 60       	ori	r24, 0x03	; 3
 156:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC00)|(1<<ISC01)|(1<<ISC10)|(1<<ISC11);	//The rising edge of INT0 and INT1 generates asynchronously an interrupt request.
 158:	e9 e6       	ldi	r30, 0x69	; 105
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8f 60       	ori	r24, 0x0F	; 15
 160:	80 83       	st	Z, r24
	
	grey_left=0;
 162:	10 92 04 01 	sts	0x0104, r1
	grey_right=0;
 166:	10 92 02 01 	sts	0x0102, r1
	rotations_right=0;
 16a:	10 92 03 01 	sts	0x0103, r1
	rotations_left=0;
 16e:	10 92 83 01 	sts	0x0183, r1
 172:	08 95       	ret

00000174 <__vector_1>:
}



ISR(INT0_vect) //Right side interrupt
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
	
		grey_right++;
 180:	80 91 02 01 	lds	r24, 0x0102
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 02 01 	sts	0x0102, r24
		if(grey_right>=10)
 18a:	80 91 02 01 	lds	r24, 0x0102
 18e:	8a 30       	cpi	r24, 0x0A	; 10
 190:	38 f0       	brcs	.+14     	; 0x1a0 <__vector_1+0x2c>
		{
			rotations_right++;
 192:	80 91 03 01 	lds	r24, 0x0103
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	80 93 03 01 	sts	0x0103, r24
			grey_right=0;
 19c:	10 92 02 01 	sts	0x0102, r1
		}
	
}
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_2>:


ISR(INT1_vect)  //Left side interrupt
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	8f 93       	push	r24
	
	grey_left++;
 1b8:	80 91 04 01 	lds	r24, 0x0104
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 04 01 	sts	0x0104, r24
	if(grey_left>=10)
 1c2:	80 91 04 01 	lds	r24, 0x0104
 1c6:	8a 30       	cpi	r24, 0x0A	; 10
 1c8:	38 f0       	brcs	.+14     	; 0x1d8 <__vector_2+0x2c>
	{
		rotations_left++;
 1ca:	80 91 83 01 	lds	r24, 0x0183
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	80 93 83 01 	sts	0x0183, r24
		grey_left=0;
 1d4:	10 92 04 01 	sts	0x0104, r1
	}
	
}
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <timer3_init>:


void timer3_init()
{
	// clear on compare match
	TCCR3A |= (1<<COM3A1);
 1e4:	e0 e9       	ldi	r30, 0x90	; 144
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32);
 1ee:	e1 e9       	ldi	r30, 0x91	; 145
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	88 60       	ori	r24, 0x08	; 8
 1f6:	80 83       	st	Z, r24
	// set up timer with no prescaler count to 500
	TCCR3B |= (1 << CS30);
 1f8:	80 81       	ld	r24, Z
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	80 83       	st	Z, r24
	
	//set up compare value
	OCR3AH = 0x01;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = 0xF4;
 204:	84 ef       	ldi	r24, 0xF4	; 244
 206:	80 93 98 00 	sts	0x0098, r24
	
	// initialize counter
	TCNT3H = 0;
 20a:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 20e:	10 92 94 00 	sts	0x0094, r1
	
	
	
	TIMSK3 |= (1<<OCIE3A) | (1<<TOIE3);
 212:	e1 e7       	ldi	r30, 0x71	; 113
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	83 60       	ori	r24, 0x03	; 3
 21a:	80 83       	st	Z, r24
 21c:	08 95       	ret

0000021e <__vector_32>:
}



ISR(TIMER3_COMPA_vect)
{
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	0b b6       	in	r0, 0x3b	; 59
 22a:	0f 92       	push	r0
 22c:	2f 93       	push	r18
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	
	// initialize counter
	TCNT3H = 0;
 236:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 23a:	10 92 94 00 	sts	0x0094, r1
	// keep a track of number of overflows
	ovfl++;
 23e:	80 91 85 01 	lds	r24, 0x0185
 242:	90 91 86 01 	lds	r25, 0x0186
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 86 01 	sts	0x0186, r25
 24c:	80 93 85 01 	sts	0x0185, r24
	if(ovfl>=40)
 250:	80 91 85 01 	lds	r24, 0x0185
 254:	90 91 86 01 	lds	r25, 0x0186
 258:	88 97       	sbiw	r24, 0x28	; 40
 25a:	20 f1       	brcs	.+72     	; 0x2a4 <__vector_32+0x86>
	{	s_time.ms++;
 25c:	ed e7       	ldi	r30, 0x7D	; 125
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	80 81       	ld	r24, Z
 262:	91 81       	ldd	r25, Z+1	; 0x01
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	91 83       	std	Z+1, r25	; 0x01
 268:	80 83       	st	Z, r24
		if (s_time.ms>=1000)
 26a:	88 3e       	cpi	r24, 0xE8	; 232
 26c:	93 40       	sbci	r25, 0x03	; 3
 26e:	b0 f0       	brcs	.+44     	; 0x29c <__vector_32+0x7e>
		{
			s_time.s++;
 270:	82 81       	ldd	r24, Z+2	; 0x02
 272:	93 81       	ldd	r25, Z+3	; 0x03
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	93 83       	std	Z+3, r25	; 0x03
 278:	82 83       	std	Z+2, r24	; 0x02
			s_time.ms=0;
 27a:	11 82       	std	Z+1, r1	; 0x01
 27c:	10 82       	st	Z, r1
			if(s_time.s>=60)
 27e:	cc 97       	sbiw	r24, 0x3c	; 60
 280:	68 f0       	brcs	.+26     	; 0x29c <__vector_32+0x7e>
			{
				s_time.m++;
 282:	84 81       	ldd	r24, Z+4	; 0x04
 284:	95 81       	ldd	r25, Z+5	; 0x05
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	95 83       	std	Z+5, r25	; 0x05
 28a:	84 83       	std	Z+4, r24	; 0x04
				s_time.s=0;
 28c:	13 82       	std	Z+3, r1	; 0x03
 28e:	12 82       	std	Z+2, r1	; 0x02
				
				if(s_time.m>=60)
 290:	cc 97       	sbiw	r24, 0x3c	; 60
 292:	20 f0       	brcs	.+8      	; 0x29c <__vector_32+0x7e>
				s_time.m=0;
 294:	10 92 82 01 	sts	0x0182, r1
 298:	10 92 81 01 	sts	0x0181, r1
			}
			
		}
		ovfl=0;
 29c:	10 92 86 01 	sts	0x0186, r1
 2a0:	10 92 85 01 	sts	0x0185, r1
	}
	
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0b be       	out	0x3b, r0	; 59
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <USART_Init>:
unsigned int my_ubrr = MYUBRR;

void USART_Init()
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr>>8);
 2bc:	80 91 01 01 	lds	r24, 0x0101
 2c0:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char)my_ubrr;
 2c4:	80 91 00 01 	lds	r24, 0x0100
 2c8:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 2cc:	88 e1       	ldi	r24, 0x18	; 24
 2ce:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 2d2:	8e e0       	ldi	r24, 0x0E	; 14
 2d4:	80 93 c2 00 	sts	0x00C2, r24
 2d8:	08 95       	ret

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
