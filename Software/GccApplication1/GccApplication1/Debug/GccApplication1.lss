
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000766  000007fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000766  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002eb  00800102  00800102  000007fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dfa  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005cb  00000000  00000000  0000178e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae3  00000000  00000000  00001d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cd  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000521  00000000  00000000  00002f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000034a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	74 c1       	rjmp	.+744    	; 0x2ee <__vector_1>
   6:	00 00       	nop
   8:	8e c1       	rjmp	.+796    	; 0x326 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	8b c1       	rjmp	.+790    	; 0x398 <__vector_32>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e6       	ldi	r30, 0x66	; 102
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 3e       	cpi	r26, 0xED	; 237
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	4e c3       	rjmp	.+1692   	; 0x762 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
{ 
	
	uint8_t speed;
	speed=200;

	flag=0;
  c8:	10 92 0c 01 	sts	0x010C, r1
  cc:	10 92 0b 01 	sts	0x010B, r1
	
	USART_Init();
  d0:	b2 d1       	rcall	.+868    	; 0x436 <USART_Init>
	ADC_init();
  d2:	c1 d0       	rcall	.+386    	; 0x256 <ADC_init>
	PWM1_init();
  d4:	b2 d0       	rcall	.+356    	; 0x23a <PWM1_init>
	PWM2_init();
  d6:	b8 d0       	rcall	.+368    	; 0x248 <PWM2_init>
	timer3_init();
  d8:	42 d1       	rcall	.+644    	; 0x35e <timer3_init>
	encoders_init();
  da:	f3 d0       	rcall	.+486    	; 0x2c2 <encoders_init>
	sei(); //enable interrupts
  dc:	78 94       	sei
	
	OCR0A=0;
  de:	17 bc       	out	0x27, r1	; 39
  e0:	0f ea       	ldi	r16, 0xAF	; 175
  e2:	11 e0       	ldi	r17, 0x01	; 1
		}
		media=media/40;
		if(media<3)
			OCR0B=0;
		if(media>=3 && media<=5)
			OCR0B=250;
  e4:	0f 2e       	mov	r0, r31
  e6:	fa ef       	ldi	r31, 0xFA	; 250
  e8:	bf 2e       	mov	r11, r31
  ea:	f0 2d       	mov	r31, r0
		if(media>5 && media<=10)
			OCR0B=200;
  ec:	0f 2e       	mov	r0, r31
  ee:	f8 ec       	ldi	r31, 0xC8	; 200
  f0:	cf 2e       	mov	r12, r31
  f2:	f0 2d       	mov	r31, r0
		if(media>10 && media<=15)
			OCR0B=150;
  f4:	0f 2e       	mov	r0, r31
  f6:	f6 e9       	ldi	r31, 0x96	; 150
  f8:	df 2e       	mov	r13, r31
  fa:	f0 2d       	mov	r31, r0
  fc:	0f 2e       	mov	r0, r31
  fe:	ff e0       	ldi	r31, 0x0F	; 15
 100:	ef 2e       	mov	r14, r31
 102:	f1 e0       	ldi	r31, 0x01	; 1
 104:	ff 2e       	mov	r15, r31
 106:	f0 2d       	mov	r31, r0
		if(media > 15)
			OCR0B=100;
 108:	0f 2e       	mov	r0, r31
 10a:	f4 e6       	ldi	r31, 0x64	; 100
 10c:	af 2e       	mov	r10, r31
 10e:	f0 2d       	mov	r31, r0
		
		
	
		
		
		ADC_read(0);
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	a8 d0       	rcall	.+336    	; 0x264 <ADC_read>
 114:	e7 01       	movw	r28, r14
		for(int i=0;i<40;i++)
		{	v[i]=ADC_read(0);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	a5 d0       	rcall	.+330    	; 0x264 <ADC_read>
 11a:	69 93       	st	Y+, r22
 11c:	79 93       	st	Y+, r23
 11e:	89 93       	st	Y+, r24
 120:	99 93       	st	Y+, r25
			media=media+v[i];
 122:	20 91 02 01 	lds	r18, 0x0102
 126:	30 91 03 01 	lds	r19, 0x0103
 12a:	40 91 04 01 	lds	r20, 0x0104
 12e:	50 91 05 01 	lds	r21, 0x0105
 132:	91 d1       	rcall	.+802    	; 0x456 <__addsf3>
 134:	60 93 02 01 	sts	0x0102, r22
 138:	70 93 03 01 	sts	0x0103, r23
 13c:	80 93 04 01 	sts	0x0104, r24
 140:	90 93 05 01 	sts	0x0105, r25
		
	
		
		
		ADC_read(0);
		for(int i=0;i<40;i++)
 144:	c0 17       	cp	r28, r16
 146:	d1 07       	cpc	r29, r17
 148:	31 f7       	brne	.-52     	; 0x116 <main+0x4e>
		{	v[i]=ADC_read(0);
			media=media+v[i];
		}
		media=media/40;
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e2       	ldi	r20, 0x20	; 32
 150:	52 e4       	ldi	r21, 0x42	; 66
 152:	e9 d1       	rcall	.+978    	; 0x526 <__divsf3>
 154:	60 93 02 01 	sts	0x0102, r22
 158:	70 93 03 01 	sts	0x0103, r23
 15c:	80 93 04 01 	sts	0x0104, r24
 160:	90 93 05 01 	sts	0x0105, r25
		if(media<3)
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e4       	ldi	r20, 0x40	; 64
 16a:	50 e4       	ldi	r21, 0x40	; 64
 16c:	d8 d1       	rcall	.+944    	; 0x51e <__cmpsf2>
 16e:	88 23       	and	r24, r24
 170:	0c f4       	brge	.+2      	; 0x174 <main+0xac>
			OCR0B=0;
 172:	18 bc       	out	0x28, r1	; 40
		if(media>=3 && media<=5)
 174:	40 90 02 01 	lds	r4, 0x0102
 178:	50 90 03 01 	lds	r5, 0x0103
 17c:	60 90 04 01 	lds	r6, 0x0104
 180:	70 90 05 01 	lds	r7, 0x0105
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e4       	ldi	r20, 0x40	; 64
 18a:	50 e4       	ldi	r21, 0x40	; 64
 18c:	c3 01       	movw	r24, r6
 18e:	b2 01       	movw	r22, r4
 190:	e4 d2       	rcall	.+1480   	; 0x75a <__gesf2>
 192:	88 23       	and	r24, r24
 194:	54 f0       	brlt	.+20     	; 0x1aa <main+0xe2>
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	40 ea       	ldi	r20, 0xA0	; 160
 19c:	50 e4       	ldi	r21, 0x40	; 64
 19e:	c3 01       	movw	r24, r6
 1a0:	b2 01       	movw	r22, r4
 1a2:	bd d1       	rcall	.+890    	; 0x51e <__cmpsf2>
 1a4:	18 16       	cp	r1, r24
 1a6:	0c f0       	brlt	.+2      	; 0x1aa <main+0xe2>
			OCR0B=250;
 1a8:	b8 bc       	out	0x28, r11	; 40
		if(media>5 && media<=10)
 1aa:	40 90 02 01 	lds	r4, 0x0102
 1ae:	50 90 03 01 	lds	r5, 0x0103
 1b2:	60 90 04 01 	lds	r6, 0x0104
 1b6:	70 90 05 01 	lds	r7, 0x0105
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 ea       	ldi	r20, 0xA0	; 160
 1c0:	50 e4       	ldi	r21, 0x40	; 64
 1c2:	c3 01       	movw	r24, r6
 1c4:	b2 01       	movw	r22, r4
 1c6:	c9 d2       	rcall	.+1426   	; 0x75a <__gesf2>
 1c8:	18 16       	cp	r1, r24
 1ca:	54 f4       	brge	.+20     	; 0x1e0 <main+0x118>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e2       	ldi	r20, 0x20	; 32
 1d2:	51 e4       	ldi	r21, 0x41	; 65
 1d4:	c3 01       	movw	r24, r6
 1d6:	b2 01       	movw	r22, r4
 1d8:	a2 d1       	rcall	.+836    	; 0x51e <__cmpsf2>
 1da:	18 16       	cp	r1, r24
 1dc:	0c f0       	brlt	.+2      	; 0x1e0 <main+0x118>
			OCR0B=200;
 1de:	c8 bc       	out	0x28, r12	; 40
		if(media>10 && media<=15)
 1e0:	40 90 02 01 	lds	r4, 0x0102
 1e4:	50 90 03 01 	lds	r5, 0x0103
 1e8:	60 90 04 01 	lds	r6, 0x0104
 1ec:	70 90 05 01 	lds	r7, 0x0105
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	40 e2       	ldi	r20, 0x20	; 32
 1f6:	51 e4       	ldi	r21, 0x41	; 65
 1f8:	c3 01       	movw	r24, r6
 1fa:	b2 01       	movw	r22, r4
 1fc:	ae d2       	rcall	.+1372   	; 0x75a <__gesf2>
 1fe:	18 16       	cp	r1, r24
 200:	54 f4       	brge	.+20     	; 0x216 <main+0x14e>
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	40 e7       	ldi	r20, 0x70	; 112
 208:	51 e4       	ldi	r21, 0x41	; 65
 20a:	c3 01       	movw	r24, r6
 20c:	b2 01       	movw	r22, r4
 20e:	87 d1       	rcall	.+782    	; 0x51e <__cmpsf2>
 210:	18 16       	cp	r1, r24
 212:	0c f0       	brlt	.+2      	; 0x216 <main+0x14e>
			OCR0B=150;
 214:	d8 bc       	out	0x28, r13	; 40
		if(media > 15)
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e7       	ldi	r20, 0x70	; 112
 21c:	51 e4       	ldi	r21, 0x41	; 65
 21e:	60 91 02 01 	lds	r22, 0x0102
 222:	70 91 03 01 	lds	r23, 0x0103
 226:	80 91 04 01 	lds	r24, 0x0104
 22a:	90 91 05 01 	lds	r25, 0x0105
 22e:	95 d2       	rcall	.+1322   	; 0x75a <__gesf2>
 230:	18 16       	cp	r1, r24
 232:	0c f0       	brlt	.+2      	; 0x236 <main+0x16e>
 234:	6d cf       	rjmp	.-294    	; 0x110 <main+0x48>
			OCR0B=100;
 236:	a8 bc       	out	0x28, r10	; 40
 238:	6b cf       	rjmp	.-298    	; 0x110 <main+0x48>

0000023a <PWM1_init>:


void PWM1_init()
{
	// initialize TCCR0 as per requirement, say as follows
	TCCR0A |= (1<<COM0A1)|(1<<WGM00);
 23a:	84 b5       	in	r24, 0x24	; 36
 23c:	81 68       	ori	r24, 0x81	; 129
 23e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02); //prescaler of 254
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	85 bd       	out	0x25, r24	; 37
	
	//PWM PIN
	DDRB|= (1<<PORTB3);
 244:	23 9a       	sbi	0x04, 3	; 4
 246:	08 95       	ret

00000248 <PWM2_init>:


void PWM2_init()
{
	// initialize TCCR1 as per requirement, say as follows
	TCCR0A |= (1<<COM0B1)|(1<<WGM02);
 248:	84 b5       	in	r24, 0x24	; 36
 24a:	88 62       	ori	r24, 0x28	; 40
 24c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02); //prescaler of 254
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	85 bd       	out	0x25, r24	; 37
	
	//PWM PIN
	DDRB|= (1<<PORTB4);
 252:	24 9a       	sbi	0x04, 4	; 4
 254:	08 95       	ret

00000256 <ADC_init>:
				     distance = (2914. / (data_sensor + 4.98)) -1;	//in cm formula
					 break;		 
		}
		flag=0;
		return distance; //ADC average in cm
}
 256:	09 98       	cbi	0x01, 1	; 1
 258:	ea e7       	ldi	r30, 0x7A	; 122
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	80 68       	ori	r24, 0x80	; 128
 260:	80 83       	st	Z, r24
 262:	08 95       	ret

00000264 <ADC_read>:
 264:	ec e7       	ldi	r30, 0x7C	; 124
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	10 82       	st	Z, r1
 26a:	90 81       	ld	r25, Z
 26c:	87 70       	andi	r24, 0x07	; 7
 26e:	98 2b       	or	r25, r24
 270:	90 83       	st	Z, r25
 272:	ea e7       	ldi	r30, 0x7A	; 122
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	80 83       	st	Z, r24
 27c:	80 81       	ld	r24, Z
 27e:	86 fd       	sbrc	r24, 6
 280:	fd cf       	rjmp	.-6      	; 0x27c <ADC_read+0x18>
 282:	e8 e7       	ldi	r30, 0x78	; 120
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	91 81       	ldd	r25, Z+1	; 0x01
 28a:	60 81       	ld	r22, Z
 28c:	71 81       	ldd	r23, Z+1	; 0x01
 28e:	6b 5f       	subi	r22, 0xFB	; 251
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	af d1       	rcall	.+862    	; 0x5f6 <__floatunsisf>
 298:	9b 01       	movw	r18, r22
 29a:	ac 01       	movw	r20, r24
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	70 e2       	ldi	r23, 0x20	; 32
 2a0:	86 e3       	ldi	r24, 0x36	; 54
 2a2:	95 e4       	ldi	r25, 0x45	; 69
 2a4:	40 d1       	rcall	.+640    	; 0x526 <__divsf3>
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	40 e8       	ldi	r20, 0x80	; 128
 2ac:	5f e3       	ldi	r21, 0x3F	; 63
 2ae:	d2 d0       	rcall	.+420    	; 0x454 <__subsf3>
 2b0:	60 93 e4 01 	sts	0x01E4, r22
 2b4:	70 93 e5 01 	sts	0x01E5, r23
 2b8:	80 93 e6 01 	sts	0x01E6, r24
 2bc:	90 93 e7 01 	sts	0x01E7, r25
 2c0:	08 95       	ret

000002c2 <encoders_init>:


void encoders_init()
{
	/* set PD2, PD3 as input */
	DDRD &=~ (1 << PORTD2);
 2c2:	52 98       	cbi	0x0a, 2	; 10
	DDRD &=~(1 << PORTD3);/* PD2 and PD3 as input */
 2c4:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << PORTD2)|(1<<PORTD3);   /* PD2 and PD3 pull-up enabled   */
 2c6:	8b b1       	in	r24, 0x0b	; 11
 2c8:	8c 60       	ori	r24, 0x0C	; 12
 2ca:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK|=(1<<INT0)|(1<<INT1);	//We use external interrupt INT0 and INT1
 2cc:	8d b3       	in	r24, 0x1d	; 29
 2ce:	83 60       	ori	r24, 0x03	; 3
 2d0:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC00)|(1<<ISC01)|(1<<ISC10)|(1<<ISC11);	//The rising edge of INT0 and INT1 generates asynchronously an interrupt request.
 2d2:	e9 e6       	ldi	r30, 0x69	; 105
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	8f 60       	ori	r24, 0x0F	; 15
 2da:	80 83       	st	Z, r24
	
	grey_left=0;
 2dc:	10 92 0e 01 	sts	0x010E, r1
	grey_right=0;
 2e0:	10 92 06 01 	sts	0x0106, r1
	rotations_right=0;
 2e4:	10 92 0d 01 	sts	0x010D, r1
	rotations_left=0;
 2e8:	10 92 b5 01 	sts	0x01B5, r1
 2ec:	08 95       	ret

000002ee <__vector_1>:
}



ISR(INT0_vect) //Right side interrupt
{
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	8f 93       	push	r24
	
		grey_right++;
 2fa:	80 91 06 01 	lds	r24, 0x0106
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	80 93 06 01 	sts	0x0106, r24
		if(grey_right>=10)
 304:	80 91 06 01 	lds	r24, 0x0106
 308:	8a 30       	cpi	r24, 0x0A	; 10
 30a:	38 f0       	brcs	.+14     	; 0x31a <__vector_1+0x2c>
		{
			rotations_right++;
 30c:	80 91 0d 01 	lds	r24, 0x010D
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	80 93 0d 01 	sts	0x010D, r24
			grey_right=0;
 316:	10 92 06 01 	sts	0x0106, r1
		}
	
}
 31a:	8f 91       	pop	r24
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <__vector_2>:


ISR(INT1_vect)  //Left side interrupt
{
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	8f 93       	push	r24
	
	grey_left++;
 332:	80 91 0e 01 	lds	r24, 0x010E
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	80 93 0e 01 	sts	0x010E, r24
	if(grey_left>=10)
 33c:	80 91 0e 01 	lds	r24, 0x010E
 340:	8a 30       	cpi	r24, 0x0A	; 10
 342:	38 f0       	brcs	.+14     	; 0x352 <__vector_2+0x2c>
	{
		rotations_left++;
 344:	80 91 b5 01 	lds	r24, 0x01B5
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	80 93 b5 01 	sts	0x01B5, r24
		grey_left=0;
 34e:	10 92 0e 01 	sts	0x010E, r1
	}
	
}
 352:	8f 91       	pop	r24
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <timer3_init>:


void timer3_init()
{
	// clear on compare match
	TCCR3A |= (1<<COM3A1);
 35e:	e0 e9       	ldi	r30, 0x90	; 144
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	80 68       	ori	r24, 0x80	; 128
 366:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32);
 368:	e1 e9       	ldi	r30, 0x91	; 145
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	88 60       	ori	r24, 0x08	; 8
 370:	80 83       	st	Z, r24
	// set up timer with no prescaler count to 500
	TCCR3B |= (1 << CS30);
 372:	80 81       	ld	r24, Z
 374:	81 60       	ori	r24, 0x01	; 1
 376:	80 83       	st	Z, r24
	
	//set up compare value
	OCR3AH = 0x01;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = 0xF4;
 37e:	84 ef       	ldi	r24, 0xF4	; 244
 380:	80 93 98 00 	sts	0x0098, r24
	
	// initialize counter
	TCNT3H = 0;
 384:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 388:	10 92 94 00 	sts	0x0094, r1
	
	
	
	TIMSK3 |= (1<<OCIE3A) | (1<<TOIE3);
 38c:	e1 e7       	ldi	r30, 0x71	; 113
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	83 60       	ori	r24, 0x03	; 3
 394:	80 83       	st	Z, r24
 396:	08 95       	ret

00000398 <__vector_32>:




ISR(TIMER3_COMPA_vect)
{
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	0b b6       	in	r0, 0x3b	; 59
 3a4:	0f 92       	push	r0
 3a6:	2f 93       	push	r18
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	
	// initialize counter
	TCNT3H = 0;
 3b0:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 3b4:	10 92 94 00 	sts	0x0094, r1
	// keep a track of number of overflows
	ovfl++;
 3b8:	80 91 38 02 	lds	r24, 0x0238
 3bc:	90 91 39 02 	lds	r25, 0x0239
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	90 93 39 02 	sts	0x0239, r25
 3c6:	80 93 38 02 	sts	0x0238, r24
	if(ovfl>=40)
 3ca:	80 91 38 02 	lds	r24, 0x0238
 3ce:	90 91 39 02 	lds	r25, 0x0239
 3d2:	88 97       	sbiw	r24, 0x28	; 40
 3d4:	20 f1       	brcs	.+72     	; 0x41e <__vector_32+0x86>
	{	s_time.ms++;
 3d6:	ef ea       	ldi	r30, 0xAF	; 175
 3d8:	f1 e0       	ldi	r31, 0x01	; 1
 3da:	80 81       	ld	r24, Z
 3dc:	91 81       	ldd	r25, Z+1	; 0x01
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	91 83       	std	Z+1, r25	; 0x01
 3e2:	80 83       	st	Z, r24
		if (s_time.ms>=1000)
 3e4:	88 3e       	cpi	r24, 0xE8	; 232
 3e6:	93 40       	sbci	r25, 0x03	; 3
 3e8:	b0 f0       	brcs	.+44     	; 0x416 <__vector_32+0x7e>
		{
			s_time.s++;
 3ea:	82 81       	ldd	r24, Z+2	; 0x02
 3ec:	93 81       	ldd	r25, Z+3	; 0x03
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	93 83       	std	Z+3, r25	; 0x03
 3f2:	82 83       	std	Z+2, r24	; 0x02
			s_time.ms=0;
 3f4:	11 82       	std	Z+1, r1	; 0x01
 3f6:	10 82       	st	Z, r1
			if(s_time.s>=60)
 3f8:	cc 97       	sbiw	r24, 0x3c	; 60
 3fa:	68 f0       	brcs	.+26     	; 0x416 <__vector_32+0x7e>
			{
				s_time.m++;
 3fc:	84 81       	ldd	r24, Z+4	; 0x04
 3fe:	95 81       	ldd	r25, Z+5	; 0x05
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	95 83       	std	Z+5, r25	; 0x05
 404:	84 83       	std	Z+4, r24	; 0x04
				s_time.s=0;
 406:	13 82       	std	Z+3, r1	; 0x03
 408:	12 82       	std	Z+2, r1	; 0x02
				
				if(s_time.m>=60)
 40a:	cc 97       	sbiw	r24, 0x3c	; 60
 40c:	20 f0       	brcs	.+8      	; 0x416 <__vector_32+0x7e>
				s_time.m=0;
 40e:	10 92 b4 01 	sts	0x01B4, r1
 412:	10 92 b3 01 	sts	0x01B3, r1
			}
			
		}
		ovfl=0;
 416:	10 92 39 02 	sts	0x0239, r1
 41a:	10 92 38 02 	sts	0x0238, r1
	}
	
	//ADC_update_values();
	
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0b be       	out	0x3b, r0	; 59
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

00000436 <USART_Init>:
unsigned int my_ubrr = MYUBRR;

void USART_Init()
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr>>8);
 436:	80 91 01 01 	lds	r24, 0x0101
 43a:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char)my_ubrr;
 43e:	80 91 00 01 	lds	r24, 0x0100
 442:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 446:	88 e1       	ldi	r24, 0x18	; 24
 448:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 44c:	8e e0       	ldi	r24, 0x0E	; 14
 44e:	80 93 c2 00 	sts	0x00C2, r24
 452:	08 95       	ret

00000454 <__subsf3>:
 454:	50 58       	subi	r21, 0x80	; 128

00000456 <__addsf3>:
 456:	bb 27       	eor	r27, r27
 458:	aa 27       	eor	r26, r26
 45a:	0e d0       	rcall	.+28     	; 0x478 <__addsf3x>
 45c:	44 c1       	rjmp	.+648    	; 0x6e6 <__fp_round>
 45e:	35 d1       	rcall	.+618    	; 0x6ca <__fp_pscA>
 460:	30 f0       	brcs	.+12     	; 0x46e <__addsf3+0x18>
 462:	3a d1       	rcall	.+628    	; 0x6d8 <__fp_pscB>
 464:	20 f0       	brcs	.+8      	; 0x46e <__addsf3+0x18>
 466:	31 f4       	brne	.+12     	; 0x474 <__addsf3+0x1e>
 468:	9f 3f       	cpi	r25, 0xFF	; 255
 46a:	11 f4       	brne	.+4      	; 0x470 <__addsf3+0x1a>
 46c:	1e f4       	brtc	.+6      	; 0x474 <__addsf3+0x1e>
 46e:	2a c1       	rjmp	.+596    	; 0x6c4 <__fp_nan>
 470:	0e f4       	brtc	.+2      	; 0x474 <__addsf3+0x1e>
 472:	e0 95       	com	r30
 474:	e7 fb       	bst	r30, 7
 476:	20 c1       	rjmp	.+576    	; 0x6b8 <__fp_inf>

00000478 <__addsf3x>:
 478:	e9 2f       	mov	r30, r25
 47a:	46 d1       	rcall	.+652    	; 0x708 <__fp_split3>
 47c:	80 f3       	brcs	.-32     	; 0x45e <__addsf3+0x8>
 47e:	ba 17       	cp	r27, r26
 480:	62 07       	cpc	r22, r18
 482:	73 07       	cpc	r23, r19
 484:	84 07       	cpc	r24, r20
 486:	95 07       	cpc	r25, r21
 488:	18 f0       	brcs	.+6      	; 0x490 <__addsf3x+0x18>
 48a:	71 f4       	brne	.+28     	; 0x4a8 <__addsf3x+0x30>
 48c:	9e f5       	brtc	.+102    	; 0x4f4 <__addsf3x+0x7c>
 48e:	5e c1       	rjmp	.+700    	; 0x74c <__fp_zero>
 490:	0e f4       	brtc	.+2      	; 0x494 <__addsf3x+0x1c>
 492:	e0 95       	com	r30
 494:	0b 2e       	mov	r0, r27
 496:	ba 2f       	mov	r27, r26
 498:	a0 2d       	mov	r26, r0
 49a:	0b 01       	movw	r0, r22
 49c:	b9 01       	movw	r22, r18
 49e:	90 01       	movw	r18, r0
 4a0:	0c 01       	movw	r0, r24
 4a2:	ca 01       	movw	r24, r20
 4a4:	a0 01       	movw	r20, r0
 4a6:	11 24       	eor	r1, r1
 4a8:	ff 27       	eor	r31, r31
 4aa:	59 1b       	sub	r21, r25
 4ac:	99 f0       	breq	.+38     	; 0x4d4 <__addsf3x+0x5c>
 4ae:	59 3f       	cpi	r21, 0xF9	; 249
 4b0:	50 f4       	brcc	.+20     	; 0x4c6 <__addsf3x+0x4e>
 4b2:	50 3e       	cpi	r21, 0xE0	; 224
 4b4:	68 f1       	brcs	.+90     	; 0x510 <__addsf3x+0x98>
 4b6:	1a 16       	cp	r1, r26
 4b8:	f0 40       	sbci	r31, 0x00	; 0
 4ba:	a2 2f       	mov	r26, r18
 4bc:	23 2f       	mov	r18, r19
 4be:	34 2f       	mov	r19, r20
 4c0:	44 27       	eor	r20, r20
 4c2:	58 5f       	subi	r21, 0xF8	; 248
 4c4:	f3 cf       	rjmp	.-26     	; 0x4ac <__addsf3x+0x34>
 4c6:	46 95       	lsr	r20
 4c8:	37 95       	ror	r19
 4ca:	27 95       	ror	r18
 4cc:	a7 95       	ror	r26
 4ce:	f0 40       	sbci	r31, 0x00	; 0
 4d0:	53 95       	inc	r21
 4d2:	c9 f7       	brne	.-14     	; 0x4c6 <__addsf3x+0x4e>
 4d4:	7e f4       	brtc	.+30     	; 0x4f4 <__addsf3x+0x7c>
 4d6:	1f 16       	cp	r1, r31
 4d8:	ba 0b       	sbc	r27, r26
 4da:	62 0b       	sbc	r22, r18
 4dc:	73 0b       	sbc	r23, r19
 4de:	84 0b       	sbc	r24, r20
 4e0:	ba f0       	brmi	.+46     	; 0x510 <__addsf3x+0x98>
 4e2:	91 50       	subi	r25, 0x01	; 1
 4e4:	a1 f0       	breq	.+40     	; 0x50e <__addsf3x+0x96>
 4e6:	ff 0f       	add	r31, r31
 4e8:	bb 1f       	adc	r27, r27
 4ea:	66 1f       	adc	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	c2 f7       	brpl	.-16     	; 0x4e2 <__addsf3x+0x6a>
 4f2:	0e c0       	rjmp	.+28     	; 0x510 <__addsf3x+0x98>
 4f4:	ba 0f       	add	r27, r26
 4f6:	62 1f       	adc	r22, r18
 4f8:	73 1f       	adc	r23, r19
 4fa:	84 1f       	adc	r24, r20
 4fc:	48 f4       	brcc	.+18     	; 0x510 <__addsf3x+0x98>
 4fe:	87 95       	ror	r24
 500:	77 95       	ror	r23
 502:	67 95       	ror	r22
 504:	b7 95       	ror	r27
 506:	f7 95       	ror	r31
 508:	9e 3f       	cpi	r25, 0xFE	; 254
 50a:	08 f0       	brcs	.+2      	; 0x50e <__addsf3x+0x96>
 50c:	b3 cf       	rjmp	.-154    	; 0x474 <__addsf3+0x1e>
 50e:	93 95       	inc	r25
 510:	88 0f       	add	r24, r24
 512:	08 f0       	brcs	.+2      	; 0x516 <__addsf3x+0x9e>
 514:	99 27       	eor	r25, r25
 516:	ee 0f       	add	r30, r30
 518:	97 95       	ror	r25
 51a:	87 95       	ror	r24
 51c:	08 95       	ret

0000051e <__cmpsf2>:
 51e:	a8 d0       	rcall	.+336    	; 0x670 <__fp_cmp>
 520:	08 f4       	brcc	.+2      	; 0x524 <__cmpsf2+0x6>
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	08 95       	ret

00000526 <__divsf3>:
 526:	0c d0       	rcall	.+24     	; 0x540 <__divsf3x>
 528:	de c0       	rjmp	.+444    	; 0x6e6 <__fp_round>
 52a:	d6 d0       	rcall	.+428    	; 0x6d8 <__fp_pscB>
 52c:	40 f0       	brcs	.+16     	; 0x53e <__divsf3+0x18>
 52e:	cd d0       	rcall	.+410    	; 0x6ca <__fp_pscA>
 530:	30 f0       	brcs	.+12     	; 0x53e <__divsf3+0x18>
 532:	21 f4       	brne	.+8      	; 0x53c <__divsf3+0x16>
 534:	5f 3f       	cpi	r21, 0xFF	; 255
 536:	19 f0       	breq	.+6      	; 0x53e <__divsf3+0x18>
 538:	bf c0       	rjmp	.+382    	; 0x6b8 <__fp_inf>
 53a:	51 11       	cpse	r21, r1
 53c:	08 c1       	rjmp	.+528    	; 0x74e <__fp_szero>
 53e:	c2 c0       	rjmp	.+388    	; 0x6c4 <__fp_nan>

00000540 <__divsf3x>:
 540:	e3 d0       	rcall	.+454    	; 0x708 <__fp_split3>
 542:	98 f3       	brcs	.-26     	; 0x52a <__divsf3+0x4>

00000544 <__divsf3_pse>:
 544:	99 23       	and	r25, r25
 546:	c9 f3       	breq	.-14     	; 0x53a <__divsf3+0x14>
 548:	55 23       	and	r21, r21
 54a:	b1 f3       	breq	.-20     	; 0x538 <__divsf3+0x12>
 54c:	95 1b       	sub	r25, r21
 54e:	55 0b       	sbc	r21, r21
 550:	bb 27       	eor	r27, r27
 552:	aa 27       	eor	r26, r26
 554:	62 17       	cp	r22, r18
 556:	73 07       	cpc	r23, r19
 558:	84 07       	cpc	r24, r20
 55a:	38 f0       	brcs	.+14     	; 0x56a <__divsf3_pse+0x26>
 55c:	9f 5f       	subi	r25, 0xFF	; 255
 55e:	5f 4f       	sbci	r21, 0xFF	; 255
 560:	22 0f       	add	r18, r18
 562:	33 1f       	adc	r19, r19
 564:	44 1f       	adc	r20, r20
 566:	aa 1f       	adc	r26, r26
 568:	a9 f3       	breq	.-22     	; 0x554 <__divsf3_pse+0x10>
 56a:	33 d0       	rcall	.+102    	; 0x5d2 <__divsf3_pse+0x8e>
 56c:	0e 2e       	mov	r0, r30
 56e:	3a f0       	brmi	.+14     	; 0x57e <__divsf3_pse+0x3a>
 570:	e0 e8       	ldi	r30, 0x80	; 128
 572:	30 d0       	rcall	.+96     	; 0x5d4 <__divsf3_pse+0x90>
 574:	91 50       	subi	r25, 0x01	; 1
 576:	50 40       	sbci	r21, 0x00	; 0
 578:	e6 95       	lsr	r30
 57a:	00 1c       	adc	r0, r0
 57c:	ca f7       	brpl	.-14     	; 0x570 <__divsf3_pse+0x2c>
 57e:	29 d0       	rcall	.+82     	; 0x5d2 <__divsf3_pse+0x8e>
 580:	fe 2f       	mov	r31, r30
 582:	27 d0       	rcall	.+78     	; 0x5d2 <__divsf3_pse+0x8e>
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	88 1f       	adc	r24, r24
 58a:	bb 1f       	adc	r27, r27
 58c:	26 17       	cp	r18, r22
 58e:	37 07       	cpc	r19, r23
 590:	48 07       	cpc	r20, r24
 592:	ab 07       	cpc	r26, r27
 594:	b0 e8       	ldi	r27, 0x80	; 128
 596:	09 f0       	breq	.+2      	; 0x59a <__divsf3_pse+0x56>
 598:	bb 0b       	sbc	r27, r27
 59a:	80 2d       	mov	r24, r0
 59c:	bf 01       	movw	r22, r30
 59e:	ff 27       	eor	r31, r31
 5a0:	93 58       	subi	r25, 0x83	; 131
 5a2:	5f 4f       	sbci	r21, 0xFF	; 255
 5a4:	2a f0       	brmi	.+10     	; 0x5b0 <__divsf3_pse+0x6c>
 5a6:	9e 3f       	cpi	r25, 0xFE	; 254
 5a8:	51 05       	cpc	r21, r1
 5aa:	68 f0       	brcs	.+26     	; 0x5c6 <__divsf3_pse+0x82>
 5ac:	85 c0       	rjmp	.+266    	; 0x6b8 <__fp_inf>
 5ae:	cf c0       	rjmp	.+414    	; 0x74e <__fp_szero>
 5b0:	5f 3f       	cpi	r21, 0xFF	; 255
 5b2:	ec f3       	brlt	.-6      	; 0x5ae <__divsf3_pse+0x6a>
 5b4:	98 3e       	cpi	r25, 0xE8	; 232
 5b6:	dc f3       	brlt	.-10     	; 0x5ae <__divsf3_pse+0x6a>
 5b8:	86 95       	lsr	r24
 5ba:	77 95       	ror	r23
 5bc:	67 95       	ror	r22
 5be:	b7 95       	ror	r27
 5c0:	f7 95       	ror	r31
 5c2:	9f 5f       	subi	r25, 0xFF	; 255
 5c4:	c9 f7       	brne	.-14     	; 0x5b8 <__divsf3_pse+0x74>
 5c6:	88 0f       	add	r24, r24
 5c8:	91 1d       	adc	r25, r1
 5ca:	96 95       	lsr	r25
 5cc:	87 95       	ror	r24
 5ce:	97 f9       	bld	r25, 7
 5d0:	08 95       	ret
 5d2:	e1 e0       	ldi	r30, 0x01	; 1
 5d4:	66 0f       	add	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	88 1f       	adc	r24, r24
 5da:	bb 1f       	adc	r27, r27
 5dc:	62 17       	cp	r22, r18
 5de:	73 07       	cpc	r23, r19
 5e0:	84 07       	cpc	r24, r20
 5e2:	ba 07       	cpc	r27, r26
 5e4:	20 f0       	brcs	.+8      	; 0x5ee <__divsf3_pse+0xaa>
 5e6:	62 1b       	sub	r22, r18
 5e8:	73 0b       	sbc	r23, r19
 5ea:	84 0b       	sbc	r24, r20
 5ec:	ba 0b       	sbc	r27, r26
 5ee:	ee 1f       	adc	r30, r30
 5f0:	88 f7       	brcc	.-30     	; 0x5d4 <__divsf3_pse+0x90>
 5f2:	e0 95       	com	r30
 5f4:	08 95       	ret

000005f6 <__floatunsisf>:
 5f6:	e8 94       	clt
 5f8:	09 c0       	rjmp	.+18     	; 0x60c <__floatsisf+0x12>

000005fa <__floatsisf>:
 5fa:	97 fb       	bst	r25, 7
 5fc:	3e f4       	brtc	.+14     	; 0x60c <__floatsisf+0x12>
 5fe:	90 95       	com	r25
 600:	80 95       	com	r24
 602:	70 95       	com	r23
 604:	61 95       	neg	r22
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	8f 4f       	sbci	r24, 0xFF	; 255
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	99 23       	and	r25, r25
 60e:	a9 f0       	breq	.+42     	; 0x63a <__floatsisf+0x40>
 610:	f9 2f       	mov	r31, r25
 612:	96 e9       	ldi	r25, 0x96	; 150
 614:	bb 27       	eor	r27, r27
 616:	93 95       	inc	r25
 618:	f6 95       	lsr	r31
 61a:	87 95       	ror	r24
 61c:	77 95       	ror	r23
 61e:	67 95       	ror	r22
 620:	b7 95       	ror	r27
 622:	f1 11       	cpse	r31, r1
 624:	f8 cf       	rjmp	.-16     	; 0x616 <__floatsisf+0x1c>
 626:	fa f4       	brpl	.+62     	; 0x666 <__floatsisf+0x6c>
 628:	bb 0f       	add	r27, r27
 62a:	11 f4       	brne	.+4      	; 0x630 <__floatsisf+0x36>
 62c:	60 ff       	sbrs	r22, 0
 62e:	1b c0       	rjmp	.+54     	; 0x666 <__floatsisf+0x6c>
 630:	6f 5f       	subi	r22, 0xFF	; 255
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	16 c0       	rjmp	.+44     	; 0x666 <__floatsisf+0x6c>
 63a:	88 23       	and	r24, r24
 63c:	11 f0       	breq	.+4      	; 0x642 <__floatsisf+0x48>
 63e:	96 e9       	ldi	r25, 0x96	; 150
 640:	11 c0       	rjmp	.+34     	; 0x664 <__floatsisf+0x6a>
 642:	77 23       	and	r23, r23
 644:	21 f0       	breq	.+8      	; 0x64e <__floatsisf+0x54>
 646:	9e e8       	ldi	r25, 0x8E	; 142
 648:	87 2f       	mov	r24, r23
 64a:	76 2f       	mov	r23, r22
 64c:	05 c0       	rjmp	.+10     	; 0x658 <__floatsisf+0x5e>
 64e:	66 23       	and	r22, r22
 650:	71 f0       	breq	.+28     	; 0x66e <__floatsisf+0x74>
 652:	96 e8       	ldi	r25, 0x86	; 134
 654:	86 2f       	mov	r24, r22
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	2a f0       	brmi	.+10     	; 0x666 <__floatsisf+0x6c>
 65c:	9a 95       	dec	r25
 65e:	66 0f       	add	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	88 1f       	adc	r24, r24
 664:	da f7       	brpl	.-10     	; 0x65c <__floatsisf+0x62>
 666:	88 0f       	add	r24, r24
 668:	96 95       	lsr	r25
 66a:	87 95       	ror	r24
 66c:	97 f9       	bld	r25, 7
 66e:	08 95       	ret

00000670 <__fp_cmp>:
 670:	99 0f       	add	r25, r25
 672:	00 08       	sbc	r0, r0
 674:	55 0f       	add	r21, r21
 676:	aa 0b       	sbc	r26, r26
 678:	e0 e8       	ldi	r30, 0x80	; 128
 67a:	fe ef       	ldi	r31, 0xFE	; 254
 67c:	16 16       	cp	r1, r22
 67e:	17 06       	cpc	r1, r23
 680:	e8 07       	cpc	r30, r24
 682:	f9 07       	cpc	r31, r25
 684:	c0 f0       	brcs	.+48     	; 0x6b6 <__fp_cmp+0x46>
 686:	12 16       	cp	r1, r18
 688:	13 06       	cpc	r1, r19
 68a:	e4 07       	cpc	r30, r20
 68c:	f5 07       	cpc	r31, r21
 68e:	98 f0       	brcs	.+38     	; 0x6b6 <__fp_cmp+0x46>
 690:	62 1b       	sub	r22, r18
 692:	73 0b       	sbc	r23, r19
 694:	84 0b       	sbc	r24, r20
 696:	95 0b       	sbc	r25, r21
 698:	39 f4       	brne	.+14     	; 0x6a8 <__fp_cmp+0x38>
 69a:	0a 26       	eor	r0, r26
 69c:	61 f0       	breq	.+24     	; 0x6b6 <__fp_cmp+0x46>
 69e:	23 2b       	or	r18, r19
 6a0:	24 2b       	or	r18, r20
 6a2:	25 2b       	or	r18, r21
 6a4:	21 f4       	brne	.+8      	; 0x6ae <__fp_cmp+0x3e>
 6a6:	08 95       	ret
 6a8:	0a 26       	eor	r0, r26
 6aa:	09 f4       	brne	.+2      	; 0x6ae <__fp_cmp+0x3e>
 6ac:	a1 40       	sbci	r26, 0x01	; 1
 6ae:	a6 95       	lsr	r26
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	81 1d       	adc	r24, r1
 6b4:	81 1d       	adc	r24, r1
 6b6:	08 95       	ret

000006b8 <__fp_inf>:
 6b8:	97 f9       	bld	r25, 7
 6ba:	9f 67       	ori	r25, 0x7F	; 127
 6bc:	80 e8       	ldi	r24, 0x80	; 128
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	08 95       	ret

000006c4 <__fp_nan>:
 6c4:	9f ef       	ldi	r25, 0xFF	; 255
 6c6:	80 ec       	ldi	r24, 0xC0	; 192
 6c8:	08 95       	ret

000006ca <__fp_pscA>:
 6ca:	00 24       	eor	r0, r0
 6cc:	0a 94       	dec	r0
 6ce:	16 16       	cp	r1, r22
 6d0:	17 06       	cpc	r1, r23
 6d2:	18 06       	cpc	r1, r24
 6d4:	09 06       	cpc	r0, r25
 6d6:	08 95       	ret

000006d8 <__fp_pscB>:
 6d8:	00 24       	eor	r0, r0
 6da:	0a 94       	dec	r0
 6dc:	12 16       	cp	r1, r18
 6de:	13 06       	cpc	r1, r19
 6e0:	14 06       	cpc	r1, r20
 6e2:	05 06       	cpc	r0, r21
 6e4:	08 95       	ret

000006e6 <__fp_round>:
 6e6:	09 2e       	mov	r0, r25
 6e8:	03 94       	inc	r0
 6ea:	00 0c       	add	r0, r0
 6ec:	11 f4       	brne	.+4      	; 0x6f2 <__fp_round+0xc>
 6ee:	88 23       	and	r24, r24
 6f0:	52 f0       	brmi	.+20     	; 0x706 <__fp_round+0x20>
 6f2:	bb 0f       	add	r27, r27
 6f4:	40 f4       	brcc	.+16     	; 0x706 <__fp_round+0x20>
 6f6:	bf 2b       	or	r27, r31
 6f8:	11 f4       	brne	.+4      	; 0x6fe <__fp_round+0x18>
 6fa:	60 ff       	sbrs	r22, 0
 6fc:	04 c0       	rjmp	.+8      	; 0x706 <__fp_round+0x20>
 6fe:	6f 5f       	subi	r22, 0xFF	; 255
 700:	7f 4f       	sbci	r23, 0xFF	; 255
 702:	8f 4f       	sbci	r24, 0xFF	; 255
 704:	9f 4f       	sbci	r25, 0xFF	; 255
 706:	08 95       	ret

00000708 <__fp_split3>:
 708:	57 fd       	sbrc	r21, 7
 70a:	90 58       	subi	r25, 0x80	; 128
 70c:	44 0f       	add	r20, r20
 70e:	55 1f       	adc	r21, r21
 710:	59 f0       	breq	.+22     	; 0x728 <__fp_splitA+0x10>
 712:	5f 3f       	cpi	r21, 0xFF	; 255
 714:	71 f0       	breq	.+28     	; 0x732 <__fp_splitA+0x1a>
 716:	47 95       	ror	r20

00000718 <__fp_splitA>:
 718:	88 0f       	add	r24, r24
 71a:	97 fb       	bst	r25, 7
 71c:	99 1f       	adc	r25, r25
 71e:	61 f0       	breq	.+24     	; 0x738 <__fp_splitA+0x20>
 720:	9f 3f       	cpi	r25, 0xFF	; 255
 722:	79 f0       	breq	.+30     	; 0x742 <__fp_splitA+0x2a>
 724:	87 95       	ror	r24
 726:	08 95       	ret
 728:	12 16       	cp	r1, r18
 72a:	13 06       	cpc	r1, r19
 72c:	14 06       	cpc	r1, r20
 72e:	55 1f       	adc	r21, r21
 730:	f2 cf       	rjmp	.-28     	; 0x716 <__fp_split3+0xe>
 732:	46 95       	lsr	r20
 734:	f1 df       	rcall	.-30     	; 0x718 <__fp_splitA>
 736:	08 c0       	rjmp	.+16     	; 0x748 <__fp_splitA+0x30>
 738:	16 16       	cp	r1, r22
 73a:	17 06       	cpc	r1, r23
 73c:	18 06       	cpc	r1, r24
 73e:	99 1f       	adc	r25, r25
 740:	f1 cf       	rjmp	.-30     	; 0x724 <__fp_splitA+0xc>
 742:	86 95       	lsr	r24
 744:	71 05       	cpc	r23, r1
 746:	61 05       	cpc	r22, r1
 748:	08 94       	sec
 74a:	08 95       	ret

0000074c <__fp_zero>:
 74c:	e8 94       	clt

0000074e <__fp_szero>:
 74e:	bb 27       	eor	r27, r27
 750:	66 27       	eor	r22, r22
 752:	77 27       	eor	r23, r23
 754:	cb 01       	movw	r24, r22
 756:	97 f9       	bld	r25, 7
 758:	08 95       	ret

0000075a <__gesf2>:
 75a:	8a df       	rcall	.-236    	; 0x670 <__fp_cmp>
 75c:	08 f4       	brcc	.+2      	; 0x760 <__gesf2+0x6>
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	08 95       	ret

00000762 <_exit>:
 762:	f8 94       	cli

00000764 <__stop_program>:
 764:	ff cf       	rjmp	.-2      	; 0x764 <__stop_program>
