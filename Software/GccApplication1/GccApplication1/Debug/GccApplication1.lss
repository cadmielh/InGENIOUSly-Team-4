
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000033a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800102  00800102  000003d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004ad  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001fd  00000000  00000000  0000094d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c5  00000000  00000000  00000b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031d  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b8  00000000  00000000  000012f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000015ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	0b c1       	rjmp	.+534    	; 0x298 <__vector_32>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ab d0       	rcall	.+342    	; 0x21a <main>
  c4:	38 c1       	rjmp	.+624    	; 0x336 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z8PWM_initv>:
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  c8:	84 b5       	in	r24, 0x24	; 36
  ca:	81 68       	ori	r24, 0x81	; 129
  cc:	84 bd       	out	0x24, r24	; 36
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	85 bd       	out	0x25, r24	; 37
  d2:	23 9a       	sbi	0x04, 3	; 4
  d4:	08 95       	ret

000000d6 <_Z10USART_Initv>:
  d6:	80 91 01 01 	lds	r24, 0x0101
  da:	80 93 c5 00 	sts	0x00C5, r24
  de:	80 91 00 01 	lds	r24, 0x0100
  e2:	80 93 c4 00 	sts	0x00C4, r24
  e6:	88 e1       	ldi	r24, 0x18	; 24
  e8:	80 93 c1 00 	sts	0x00C1, r24
  ec:	8e e0       	ldi	r24, 0x0E	; 14
  ee:	80 93 c2 00 	sts	0x00C2, r24
  f2:	08 95       	ret

000000f4 <_Z13USART_Receivev>:

unsigned char USART_Receive( void )
{
	
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)))
  f4:	e0 ec       	ldi	r30, 0xC0	; 192
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 23       	and	r24, r24
  fc:	ec f7       	brge	.-6      	; 0xf8 <_Z13USART_Receivev+0x4>
	{;}
	/* Get and return received data from buffer */
	return UDR0;
  fe:	80 91 c6 00 	lds	r24, 0x00C6
}
 102:	08 95       	ret

00000104 <_Z18receive_parametersv>:

unsigned int receive_parameters()
{
	unsigned int OK=0;    // semaphore to verify that parameters were received properly
	
	if (verify)
 104:	80 91 0a 01 	lds	r24, 0x010A
 108:	90 91 0b 01 	lds	r25, 0x010B
 10c:	89 2b       	or	r24, r25
 10e:	e9 f0       	breq	.+58     	; 0x14a <_Z18receive_parametersv+0x46>
	{
		direction=0x00;		
 110:	10 92 0d 01 	sts	0x010D, r1
		direction = USART_Receive();
 114:	ef df       	rcall	.-34     	; 0xf4 <_Z13USART_Receivev>
 116:	80 93 0d 01 	sts	0x010D, r24
		if(direction=='F' || direction=='B' || direction=='f' || direction=='b')   //if first parameter is B(backward) or F(forward), ready to receive the speed
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	82 34       	cpi	r24, 0x42	; 66
 11e:	11 f0       	breq	.+4      	; 0x124 <_Z18receive_parametersv+0x20>
 120:	82 36       	cpi	r24, 0x62	; 98
 122:	b1 f4       	brne	.+44     	; 0x150 <_Z18receive_parametersv+0x4c>
		{
			speed=0x00;
 124:	10 92 0e 01 	sts	0x010E, r1
			speed=USART_Receive();
 128:	e5 df       	rcall	.-54     	; 0xf4 <_Z13USART_Receivev>
 12a:	80 93 0e 01 	sts	0x010E, r24
			if(speed>0 && speed<=0xFF)     //if speed parameter is in speed limits
 12e:	88 23       	and	r24, r24
 130:	91 f0       	breq	.+36     	; 0x156 <_Z18receive_parametersv+0x52>
				{
					time = 0x00;
 132:	10 92 0c 01 	sts	0x010C, r1
					time=USART_Receive();
 136:	de df       	rcall	.-68     	; 0xf4 <_Z13USART_Receivev>
 138:	80 93 0c 01 	sts	0x010C, r24
					if(time!=0x00)        
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	81 11       	cpse	r24, r1
 142:	01 c0       	rjmp	.+2      	; 0x146 <_Z18receive_parametersv+0x42>
 144:	20 e0       	ldi	r18, 0x00	; 0



unsigned int receive_parameters()
{
	unsigned int OK=0;    // semaphore to verify that parameters were received properly
 146:	82 2f       	mov	r24, r18
 148:	08 95       	ret
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	08 95       	ret
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
			

	return OK;
}
 15a:	08 95       	ret

0000015c <_Z7Motor_1hhh>:


void Motor_1(unsigned char direction_1, unsigned char speed_1, unsigned char time_1)
{
	
	if(direction_1=='F' || direction_1=='f')
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	86 34       	cpi	r24, 0x46	; 70
 160:	79 f4       	brne	.+30     	; 0x180 <_Z7Motor_1hhh+0x24>
 162:	2d c0       	rjmp	.+90     	; 0x1be <_Z7Motor_1hhh+0x62>
		//go forward
		PORTD|=(1<<PORTD5)|(1<<PORTD6);
		_delay_ms(1);
		PORTD|=(1<<PORTD5);
		PORTD&=~(1<<PORTD6);
		for(uint8_t i=32;i<speed;i++)
 164:	80 e2       	ldi	r24, 0x20	; 32
		{
			OCR0A=i;
 166:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	e7 ea       	ldi	r30, 0xA7	; 167
 16a:	f1 e6       	ldi	r31, 0x61	; 97
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <_Z7Motor_1hhh+0x10>
 170:	00 c0       	rjmp	.+0      	; 0x172 <_Z7Motor_1hhh+0x16>
 172:	00 00       	nop
		//go forward
		PORTD|=(1<<PORTD5)|(1<<PORTD6);
		_delay_ms(1);
		PORTD|=(1<<PORTD5);
		PORTD&=~(1<<PORTD6);
		for(uint8_t i=32;i<speed;i++)
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	90 91 0e 01 	lds	r25, 0x010E
 17a:	89 17       	cp	r24, r25
 17c:	a0 f3       	brcs	.-24     	; 0x166 <_Z7Motor_1hhh+0xa>
 17e:	08 95       	ret
			_delay_ms(5);
		}
		//timer(time_1)
		
	}
	if(direction_1=='B' || direction_1=='b')
 180:	82 34       	cpi	r24, 0x42	; 66
 182:	61 f5       	brne	.+88     	; 0x1dc <_Z7Motor_1hhh+0x80>
	{
		//go backward
		PORTD|=(1<<PORTD5)|(1<<PORTD6);
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 66       	ori	r24, 0x60	; 96
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 e8       	ldi	r24, 0x87	; 135
 18c:	93 e1       	ldi	r25, 0x13	; 19
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <_Z7Motor_1hhh+0x32>
 192:	00 c0       	rjmp	.+0      	; 0x194 <_Z7Motor_1hhh+0x38>
 194:	00 00       	nop
		_delay_ms(1);
		PORTD|=(1<<PORTD6);
 196:	5e 9a       	sbi	0x0b, 6	; 11
		PORTD&=~(1<<PORTD5);
 198:	5d 98       	cbi	0x0b, 5	; 11
		for(uint8_t i=32;i<speed;i++)
 19a:	80 91 0e 01 	lds	r24, 0x010E
 19e:	81 32       	cpi	r24, 0x21	; 33
 1a0:	e8 f0       	brcs	.+58     	; 0x1dc <_Z7Motor_1hhh+0x80>
 1a2:	80 e2       	ldi	r24, 0x20	; 32
		{
			OCR0A=i;
 1a4:	87 bd       	out	0x27, r24	; 39
 1a6:	e7 ea       	ldi	r30, 0xA7	; 167
 1a8:	f1 e6       	ldi	r31, 0x61	; 97
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <_Z7Motor_1hhh+0x4e>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_Z7Motor_1hhh+0x54>
 1b0:	00 00       	nop
		//go backward
		PORTD|=(1<<PORTD5)|(1<<PORTD6);
		_delay_ms(1);
		PORTD|=(1<<PORTD6);
		PORTD&=~(1<<PORTD5);
		for(uint8_t i=32;i<speed;i++)
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	90 91 0e 01 	lds	r25, 0x010E
 1b8:	89 17       	cp	r24, r25
 1ba:	a0 f3       	brcs	.-24     	; 0x1a4 <_Z7Motor_1hhh+0x48>
 1bc:	08 95       	ret
{
	
	if(direction_1=='F' || direction_1=='f')
	{
		//go forward
		PORTD|=(1<<PORTD5)|(1<<PORTD6);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 66       	ori	r24, 0x60	; 96
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	87 e8       	ldi	r24, 0x87	; 135
 1c6:	93 e1       	ldi	r25, 0x13	; 19
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <_Z7Motor_1hhh+0x6c>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <_Z7Motor_1hhh+0x72>
 1ce:	00 00       	nop
		_delay_ms(1);
		PORTD|=(1<<PORTD5);
 1d0:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD&=~(1<<PORTD6);
 1d2:	5e 98       	cbi	0x0b, 6	; 11
		for(uint8_t i=32;i<speed;i++)
 1d4:	80 91 0e 01 	lds	r24, 0x010E
 1d8:	81 32       	cpi	r24, 0x21	; 33
 1da:	20 f6       	brcc	.-120    	; 0x164 <_Z7Motor_1hhh+0x8>
 1dc:	08 95       	ret

000001de <_Z11timer3_initv>:


void timer3_init()
{
	// clear on compare match
	TCCR3A |= (1<<COM3A1);
 1de:	e0 e9       	ldi	r30, 0x90	; 144
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32);
 1e8:	e1 e9       	ldi	r30, 0x91	; 145
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	80 83       	st	Z, r24
	// set up timer with no prescaler count to 500
	TCCR3B |= (1 << CS30);
 1f2:	80 81       	ld	r24, Z
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	80 83       	st	Z, r24
	
	//set up compare value
	OCR3AH = 0x01;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = 0xF4;
 1fe:	84 ef       	ldi	r24, 0xF4	; 244
 200:	80 93 98 00 	sts	0x0098, r24
	
	// initialize counter
	TCNT3H = 0;
 204:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 208:	10 92 94 00 	sts	0x0094, r1
	
	sei();
 20c:	78 94       	sei
	
	TIMSK3 |= (1<<OCIE3A) | (1<<TOIE3);
 20e:	e1 e7       	ldi	r30, 0x71	; 113
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	83 60       	ori	r24, 0x03	; 3
 216:	80 83       	st	Z, r24
 218:	08 95       	ret

0000021a <main>:



int main (void)
{ 
	USART_Init();
 21a:	5d df       	rcall	.-326    	; 0xd6 <_Z10USART_Initv>
	 PWM_init();
 21c:	55 df       	rcall	.-342    	; 0xc8 <_Z8PWM_initv>
	 timer3_init();
 21e:	df df       	rcall	.-66     	; 0x1de <_Z11timer3_initv>
	int sec =0;
	verify=1;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 0b 01 	sts	0x010B, r25
 228:	80 93 0a 01 	sts	0x010A, r24
	time=0;
 22c:	10 92 0c 01 	sts	0x010C, r1
	
	PORTD|=(1<<PORTD6)	;
 230:	5e 9a       	sbi	0x0b, 6	; 11
int main (void)
{ 
	USART_Init();
	 PWM_init();
	 timer3_init();
	int sec =0;
 232:	00 e0       	ldi	r16, 0x00	; 0
 234:	10 e0       	ldi	r17, 0x00	; 0
		
		if(receive_parameters())
		{
			
			Motor_1(direction,speed,time);
			sec=sys_time.s;
 236:	c2 e0       	ldi	r28, 0x02	; 2
 238:	d1 e0       	ldi	r29, 0x01	; 1
			for(uint8_t i=speed;i>0;i--)
			{
				OCR0A=i;
				_delay_ms(5);
			}
			verify=1;
 23a:	ee 24       	eor	r14, r14
 23c:	e3 94       	inc	r14
 23e:	f1 2c       	mov	r15, r1
	PORTD|=(1<<PORTD6)	;
	 
	while (1)  // main loop										
	{
		
		if(receive_parameters())
 240:	61 df       	rcall	.-318    	; 0x104 <_Z18receive_parametersv>
 242:	89 2b       	or	r24, r25
 244:	69 f0       	breq	.+26     	; 0x260 <main+0x46>
		{
			
			Motor_1(direction,speed,time);
 246:	40 91 0c 01 	lds	r20, 0x010C
 24a:	60 91 0e 01 	lds	r22, 0x010E
 24e:	80 91 0d 01 	lds	r24, 0x010D
 252:	84 df       	rcall	.-248    	; 0x15c <_Z7Motor_1hhh>
			sec=sys_time.s;
 254:	0a 81       	ldd	r16, Y+2	; 0x02
 256:	1b 81       	ldd	r17, Y+3	; 0x03
			verify=0;
 258:	10 92 0b 01 	sts	0x010B, r1
 25c:	10 92 0a 01 	sts	0x010A, r1
		}
		
			
		if ((sys_time.s - sec)>=time)
 260:	2a 81       	ldd	r18, Y+2	; 0x02
 262:	3b 81       	ldd	r19, Y+3	; 0x03
 264:	20 1b       	sub	r18, r16
 266:	31 0b       	sbc	r19, r17
 268:	80 91 0c 01 	lds	r24, 0x010C
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	28 17       	cp	r18, r24
 270:	39 07       	cpc	r19, r25
 272:	30 f3       	brcs	.-52     	; 0x240 <main+0x26>
		{
			for(uint8_t i=speed;i>0;i--)
 274:	80 91 0e 01 	lds	r24, 0x010E
 278:	88 23       	and	r24, r24
 27a:	49 f0       	breq	.+18     	; 0x28e <main+0x74>
			{
				OCR0A=i;
 27c:	87 bd       	out	0x27, r24	; 39
 27e:	e7 ea       	ldi	r30, 0xA7	; 167
 280:	f1 e6       	ldi	r31, 0x61	; 97
 282:	31 97       	sbiw	r30, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <main+0x68>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x6e>
 288:	00 00       	nop
		}
		
			
		if ((sys_time.s - sec)>=time)
		{
			for(uint8_t i=speed;i>0;i--)
 28a:	81 50       	subi	r24, 0x01	; 1
 28c:	b9 f7       	brne	.-18     	; 0x27c <main+0x62>
			{
				OCR0A=i;
				_delay_ms(5);
			}
			verify=1;
 28e:	f0 92 0b 01 	sts	0x010B, r15
 292:	e0 92 0a 01 	sts	0x010A, r14
 296:	d4 cf       	rjmp	.-88     	; 0x240 <main+0x26>

00000298 <__vector_32>:
	
	TIMSK3 |= (1<<OCIE3A) | (1<<TOIE3);
}

ISR(TIMER3_COMPA_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	0b b6       	in	r0, 0x3b	; 59
 2a4:	0f 92       	push	r0
 2a6:	2f 93       	push	r18
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	
	
	// initialize counter
	TCNT3H = 0;
 2b0:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 2b4:	10 92 94 00 	sts	0x0094, r1
	// keep a track of number of overflows
	ovfl++;
 2b8:	80 91 08 01 	lds	r24, 0x0108
 2bc:	90 91 09 01 	lds	r25, 0x0109
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	90 93 09 01 	sts	0x0109, r25
 2c6:	80 93 08 01 	sts	0x0108, r24
	if(ovfl>=40)
 2ca:	80 91 08 01 	lds	r24, 0x0108
 2ce:	90 91 09 01 	lds	r25, 0x0109
 2d2:	88 97       	sbiw	r24, 0x28	; 40
 2d4:	20 f1       	brcs	.+72     	; 0x31e <__vector_32+0x86>
	{	sys_time.ms++;	
 2d6:	e2 e0       	ldi	r30, 0x02	; 2
 2d8:	f1 e0       	ldi	r31, 0x01	; 1
 2da:	80 81       	ld	r24, Z
 2dc:	91 81       	ldd	r25, Z+1	; 0x01
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	91 83       	std	Z+1, r25	; 0x01
 2e2:	80 83       	st	Z, r24
		if (sys_time.ms>=1000)
 2e4:	88 3e       	cpi	r24, 0xE8	; 232
 2e6:	93 40       	sbci	r25, 0x03	; 3
 2e8:	b0 f0       	brcs	.+44     	; 0x316 <__vector_32+0x7e>
		{
			sys_time.s++;
 2ea:	82 81       	ldd	r24, Z+2	; 0x02
 2ec:	93 81       	ldd	r25, Z+3	; 0x03
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	93 83       	std	Z+3, r25	; 0x03
 2f2:	82 83       	std	Z+2, r24	; 0x02
			sys_time.ms=0;
 2f4:	11 82       	std	Z+1, r1	; 0x01
 2f6:	10 82       	st	Z, r1
			if(sys_time.s>=60)
 2f8:	cc 97       	sbiw	r24, 0x3c	; 60
 2fa:	68 f0       	brcs	.+26     	; 0x316 <__vector_32+0x7e>
			{
				sys_time.m++;
 2fc:	84 81       	ldd	r24, Z+4	; 0x04
 2fe:	95 81       	ldd	r25, Z+5	; 0x05
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	95 83       	std	Z+5, r25	; 0x05
 304:	84 83       	std	Z+4, r24	; 0x04
				sys_time.s=0;
 306:	13 82       	std	Z+3, r1	; 0x03
 308:	12 82       	std	Z+2, r1	; 0x02
				
				if(sys_time.m>=60)
 30a:	cc 97       	sbiw	r24, 0x3c	; 60
 30c:	20 f0       	brcs	.+8      	; 0x316 <__vector_32+0x7e>
					sys_time.m=0;
 30e:	10 92 07 01 	sts	0x0107, r1
 312:	10 92 06 01 	sts	0x0106, r1
			}
			
		}
		ovfl=0;
 316:	10 92 09 01 	sts	0x0109, r1
 31a:	10 92 08 01 	sts	0x0108, r1
	}
	
}
 31e:	ff 91       	pop	r31
 320:	ef 91       	pop	r30
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0b be       	out	0x3b, r0	; 59
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
