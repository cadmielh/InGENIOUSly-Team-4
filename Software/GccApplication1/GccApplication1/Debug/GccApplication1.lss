
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000092e  000009c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000092e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e0  00800102  00800102  000009c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c09  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000553  00000000  00000000  0000174d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d4  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030b  00000000  00000000  00002b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002ea9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c2       	rjmp	.+1190   	; 0x4ac <__vector_1>
   6:	00 00       	nop
   8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	6a c2       	rjmp	.+1236   	; 0x556 <__vector_32>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e2       	ldi	r30, 0x2E	; 46
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 3e       	cpi	r26, 0xE2	; 226
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	32 c4       	rjmp	.+2148   	; 0x92a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
	
	uint8_t speed;
	speed=200;

	
	USART_Init();
  c8:	a4 d2       	rcall	.+1352   	; 0x612 <USART_Init>
	ADC_init();
  ca:	1e d0       	rcall	.+60     	; 0x108 <ADC_init>
	PWM1_init();
  cc:	0f d0       	rcall	.+30     	; 0xec <PWM1_init>
	PWM2_init();
  ce:	15 d0       	rcall	.+42     	; 0xfa <PWM2_init>
	timer3_init();
  d0:	25 d2       	rcall	.+1098   	; 0x51c <timer3_init>
	encoders_init();
  d2:	d6 d1       	rcall	.+940    	; 0x480 <encoders_init>
	sei(); //enable interrupts
  d4:	78 94       	sei
	{
		//total=0;
		

		//rezultat=get_ADC_average(0);
		rezultat = get_ADC_average(0);
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	05 d1       	rcall	.+522    	; 0x2e4 <get_ADC_average>
  da:	60 93 be 01 	sts	0x01BE, r22
  de:	70 93 bf 01 	sts	0x01BF, r23
  e2:	80 93 c0 01 	sts	0x01C0, r24
  e6:	90 93 c1 01 	sts	0x01C1, r25
		
			//Motor_1('b',speed,5);
			//Motor_2('b',speed,5);
		

	} 
  ea:	f5 cf       	rjmp	.-22     	; 0xd6 <main+0xe>

000000ec <PWM1_init>:


void PWM1_init()
{
	// initialize TCCR0 as per requirement, say as follows
	TCCR0A |= (1<<COM0A1)|(1<<WGM00);
  ec:	84 b5       	in	r24, 0x24	; 36
  ee:	81 68       	ori	r24, 0x81	; 129
  f0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	85 bd       	out	0x25, r24	; 37
	
	//PWM PIN
	DDRB|= (1<<PORTB3);
  f6:	23 9a       	sbi	0x04, 3	; 4
  f8:	08 95       	ret

000000fa <PWM2_init>:


void PWM2_init()
{
	// initialize TCCR1 as per requirement, say as follows
	TCCR0A |= (1<<COM0B1)|(1<<WGM02);
  fa:	84 b5       	in	r24, 0x24	; 36
  fc:	88 62       	ori	r24, 0x28	; 40
  fe:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	85 bd       	out	0x25, r24	; 37
	
	//PWM PIN
	DDRB|= (1<<PORTB4);
 104:	24 9a       	sbi	0x04, 4	; 4
 106:	08 95       	ret

00000108 <ADC_init>:



void ADC_init()
{
	DDRA &= ~(1<<PINA1);
 108:	09 98       	cbi	0x01, 1	; 1
	ADCSRA |= 1<<ADEN;		  //Turn on ADC
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 68       	ori	r24, 0x80	; 128
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <ADC_read>:

uint16_t ADC_read(uint8_t channel)
{
	float distance;
	channel=channel & 0b00000111;		//Select ADC Channel, channel must be 0-7
	ADMUX = 0;
 116:	ec e7       	ldi	r30, 0x7C	; 124
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	10 82       	st	Z, r1
	//ADMUX |= (1<<MUX0);        //Clear the older channel that was read
	ADMUX|= channel;		//Defines the new ADC channel to be read
 11c:	90 81       	ld	r25, Z


uint16_t ADC_read(uint8_t channel)
{
	float distance;
	channel=channel & 0b00000111;		//Select ADC Channel, channel must be 0-7
 11e:	87 70       	andi	r24, 0x07	; 7
	ADMUX = 0;
	//ADMUX |= (1<<MUX0);        //Clear the older channel that was read
	ADMUX|= channel;		//Defines the new ADC channel to be read
 120:	98 2b       	or	r25, r24
 122:	90 83       	st	Z, r25
	
	ADCSRA |=(1<<ADSC);	// enable ADC and start single conversion
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	
	
	while(ADCSRA & (1<<ADSC));	// wait for conversion to complete
 12e:	80 81       	ld	r24, Z
 130:	86 fd       	sbrc	r24, 6
 132:	fd cf       	rjmp	.-6      	; 0x12e <ADC_read+0x18>
	//volts=ADC*0.0048828125;
	//distance = 65 * pow(volts, -1.10);
	//distance = (2914. / (ADC + 4.98)) -1;
	return ADC;
 134:	80 91 78 00 	lds	r24, 0x0078
 138:	90 91 79 00 	lds	r25, 0x0079
}
 13c:	08 95       	ret

0000013e <ADC_update_values>:


void ADC_update_values()
{		//taking first value from sensor which is inaccurate
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
		ADC_read(0);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	e8 df       	rcall	.-48     	; 0x116 <ADC_read>
		ADC_read(1);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	e6 df       	rcall	.-52     	; 0x116 <ADC_read>
		ADC_read(2);
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	e4 df       	rcall	.-56     	; 0x116 <ADC_read>
		ADC_read(3);
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	e2 df       	rcall	.-60     	; 0x116 <ADC_read>
		
		chan0[contor]=ADC_read(0);
 152:	c0 91 12 01 	lds	r28, 0x0112
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	dd df       	rcall	.-70     	; 0x116 <ADC_read>
 15c:	cc 0f       	add	r28, r28
 15e:	dd 1f       	adc	r29, r29
 160:	ca 52       	subi	r28, 0x2A	; 42
 162:	de 4f       	sbci	r29, 0xFE	; 254
 164:	99 83       	std	Y+1, r25	; 0x01
 166:	88 83       	st	Y, r24
		chan1[contor]=ADC_read(1);
 168:	c0 91 12 01 	lds	r28, 0x0112
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	d2 df       	rcall	.-92     	; 0x116 <ADC_read>
 172:	cc 0f       	add	r28, r28
 174:	dd 1f       	adc	r29, r29
 176:	cf 50       	subi	r28, 0x0F	; 15
 178:	de 4f       	sbci	r29, 0xFE	; 254
 17a:	99 83       	std	Y+1, r25	; 0x01
 17c:	88 83       	st	Y, r24
		chan2[contor]=ADC_read(2);
 17e:	c0 91 12 01 	lds	r28, 0x0112
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	c7 df       	rcall	.-114    	; 0x116 <ADC_read>
 188:	cc 0f       	add	r28, r28
 18a:	dd 1f       	adc	r29, r29
 18c:	c3 5f       	subi	r28, 0xF3	; 243
 18e:	dd 4f       	sbci	r29, 0xFD	; 253
 190:	99 83       	std	Y+1, r25	; 0x01
 192:	88 83       	st	Y, r24
		chan3[contor]=ADC_read(3);
 194:	c0 91 12 01 	lds	r28, 0x0112
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	bc df       	rcall	.-136    	; 0x116 <ADC_read>
 19e:	cc 0f       	add	r28, r28
 1a0:	dd 1f       	adc	r29, r29
 1a2:	ce 53       	subi	r28, 0x3E	; 62
 1a4:	de 4f       	sbci	r29, 0xFE	; 254
 1a6:	99 83       	std	Y+1, r25	; 0x01
 1a8:	88 83       	st	Y, r24
		
		sum0 += chan0[contor];
 1aa:	20 91 12 01 	lds	r18, 0x0112
 1ae:	82 2f       	mov	r24, r18
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	fc 01       	movw	r30, r24
 1b8:	ea 52       	subi	r30, 0x2A	; 42
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	a0 81       	ld	r26, Z
 1be:	b1 81       	ldd	r27, Z+1	; 0x01
 1c0:	40 91 0e 01 	lds	r20, 0x010E
 1c4:	50 91 0f 01 	lds	r21, 0x010F
 1c8:	60 91 10 01 	lds	r22, 0x0110
 1cc:	70 91 11 01 	lds	r23, 0x0111
 1d0:	4a 0f       	add	r20, r26
 1d2:	5b 1f       	adc	r21, r27
 1d4:	61 1d       	adc	r22, r1
 1d6:	71 1d       	adc	r23, r1
 1d8:	40 93 0e 01 	sts	0x010E, r20
 1dc:	50 93 0f 01 	sts	0x010F, r21
 1e0:	60 93 10 01 	sts	0x0110, r22
 1e4:	70 93 11 01 	sts	0x0111, r23
		chan0[contor]=0;
 1e8:	11 82       	std	Z+1, r1	; 0x01
 1ea:	10 82       	st	Z, r1
		sum1 += chan1[contor];
 1ec:	fc 01       	movw	r30, r24
 1ee:	ef 50       	subi	r30, 0x0F	; 15
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	a0 81       	ld	r26, Z
 1f4:	b1 81       	ldd	r27, Z+1	; 0x01
 1f6:	40 91 0a 01 	lds	r20, 0x010A
 1fa:	50 91 0b 01 	lds	r21, 0x010B
 1fe:	60 91 0c 01 	lds	r22, 0x010C
 202:	70 91 0d 01 	lds	r23, 0x010D
 206:	4a 0f       	add	r20, r26
 208:	5b 1f       	adc	r21, r27
 20a:	61 1d       	adc	r22, r1
 20c:	71 1d       	adc	r23, r1
 20e:	40 93 0a 01 	sts	0x010A, r20
 212:	50 93 0b 01 	sts	0x010B, r21
 216:	60 93 0c 01 	sts	0x010C, r22
 21a:	70 93 0d 01 	sts	0x010D, r23
		chan1[contor]=0;
 21e:	11 82       	std	Z+1, r1	; 0x01
 220:	10 82       	st	Z, r1
		sum2 += chan2[contor];
 222:	fc 01       	movw	r30, r24
 224:	e3 5f       	subi	r30, 0xF3	; 243
 226:	fd 4f       	sbci	r31, 0xFD	; 253
 228:	a0 81       	ld	r26, Z
 22a:	b1 81       	ldd	r27, Z+1	; 0x01
 22c:	40 91 06 01 	lds	r20, 0x0106
 230:	50 91 07 01 	lds	r21, 0x0107
 234:	60 91 08 01 	lds	r22, 0x0108
 238:	70 91 09 01 	lds	r23, 0x0109
 23c:	4a 0f       	add	r20, r26
 23e:	5b 1f       	adc	r21, r27
 240:	61 1d       	adc	r22, r1
 242:	71 1d       	adc	r23, r1
 244:	40 93 06 01 	sts	0x0106, r20
 248:	50 93 07 01 	sts	0x0107, r21
 24c:	60 93 08 01 	sts	0x0108, r22
 250:	70 93 09 01 	sts	0x0109, r23
		chan2[contor]=0;
 254:	11 82       	std	Z+1, r1	; 0x01
 256:	10 82       	st	Z, r1
		sum3 += chan3[contor];
 258:	fc 01       	movw	r30, r24
 25a:	ee 53       	subi	r30, 0x3E	; 62
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	40 81       	ld	r20, Z
 260:	51 81       	ldd	r21, Z+1	; 0x01
 262:	80 91 02 01 	lds	r24, 0x0102
 266:	90 91 03 01 	lds	r25, 0x0103
 26a:	a0 91 04 01 	lds	r26, 0x0104
 26e:	b0 91 05 01 	lds	r27, 0x0105
 272:	84 0f       	add	r24, r20
 274:	95 1f       	adc	r25, r21
 276:	a1 1d       	adc	r26, r1
 278:	b1 1d       	adc	r27, r1
 27a:	80 93 02 01 	sts	0x0102, r24
 27e:	90 93 03 01 	sts	0x0103, r25
 282:	a0 93 04 01 	sts	0x0104, r26
 286:	b0 93 05 01 	sts	0x0105, r27
		chan3[contor]=0;
 28a:	11 82       	std	Z+1, r1	; 0x01
 28c:	10 82       	st	Z, r1
		
	contor++;
 28e:	2f 5f       	subi	r18, 0xFF	; 255
	if(contor==10)
 290:	2a 30       	cpi	r18, 0x0A	; 10
 292:	19 f0       	breq	.+6      	; 0x29a <ADC_update_values+0x15c>
		sum2 += chan2[contor];
		chan2[contor]=0;
		sum3 += chan3[contor];
		chan3[contor]=0;
		
	contor++;
 294:	20 93 12 01 	sts	0x0112, r18
 298:	22 c0       	rjmp	.+68     	; 0x2de <ADC_update_values+0x1a0>
	if(contor==10)
			{
				contor=0;
 29a:	10 92 12 01 	sts	0x0112, r1
				sum0=0;
 29e:	10 92 0e 01 	sts	0x010E, r1
 2a2:	10 92 0f 01 	sts	0x010F, r1
 2a6:	10 92 10 01 	sts	0x0110, r1
 2aa:	10 92 11 01 	sts	0x0111, r1
				sum1=0;
 2ae:	10 92 0a 01 	sts	0x010A, r1
 2b2:	10 92 0b 01 	sts	0x010B, r1
 2b6:	10 92 0c 01 	sts	0x010C, r1
 2ba:	10 92 0d 01 	sts	0x010D, r1
				sum2=0;
 2be:	10 92 06 01 	sts	0x0106, r1
 2c2:	10 92 07 01 	sts	0x0107, r1
 2c6:	10 92 08 01 	sts	0x0108, r1
 2ca:	10 92 09 01 	sts	0x0109, r1
				sum3=0;
 2ce:	10 92 02 01 	sts	0x0102, r1
 2d2:	10 92 03 01 	sts	0x0103, r1
 2d6:	10 92 04 01 	sts	0x0104, r1
 2da:	10 92 05 01 	sts	0x0105, r1
			}
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <get_ADC_average>:


float get_ADC_average(uint8_t channel)
{
	switch(channel)
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	b9 f1       	breq	.+110    	; 0x356 <get_ADC_average+0x72>
 2e8:	38 f0       	brcs	.+14     	; 0x2f8 <get_ADC_average+0x14>
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <get_ADC_average+0xc>
 2ee:	62 c0       	rjmp	.+196    	; 0x3b4 <get_ADC_average+0xd0>
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <get_ADC_average+0x12>
 2f4:	8e c0       	rjmp	.+284    	; 0x412 <get_ADC_average+0x12e>
 2f6:	bb c0       	rjmp	.+374    	; 0x46e <get_ADC_average+0x18a>
	{
		case 0:  data_sensor = sum0 /10;
 2f8:	60 91 0e 01 	lds	r22, 0x010E
 2fc:	70 91 0f 01 	lds	r23, 0x010F
 300:	80 91 10 01 	lds	r24, 0x0110
 304:	90 91 11 01 	lds	r25, 0x0111
 308:	2a e0       	ldi	r18, 0x0A	; 10
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	ea d2       	rcall	.+1492   	; 0x8e6 <__udivmodsi4>
 312:	30 93 07 02 	sts	0x0207, r19
 316:	20 93 06 02 	sts	0x0206, r18
				 distance = (2914. / (data_sensor + 4.98)) -1;	//in cm formula
 31a:	b9 01       	movw	r22, r18
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	54 d2       	rcall	.+1192   	; 0x7ca <__floatunsisf>
 322:	29 e2       	ldi	r18, 0x29	; 41
 324:	3c e5       	ldi	r19, 0x5C	; 92
 326:	4f e9       	ldi	r20, 0x9F	; 159
 328:	50 e4       	ldi	r21, 0x40	; 64
 32a:	83 d1       	rcall	.+774    	; 0x632 <__addsf3>
 32c:	9b 01       	movw	r18, r22
 32e:	ac 01       	movw	r20, r24
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e2       	ldi	r23, 0x20	; 32
 334:	86 e3       	ldi	r24, 0x36	; 54
 336:	95 e4       	ldi	r25, 0x45	; 69
 338:	e0 d1       	rcall	.+960    	; 0x6fa <__divsf3>
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	40 e8       	ldi	r20, 0x80	; 128
 340:	5f e3       	ldi	r21, 0x3F	; 63
 342:	76 d1       	rcall	.+748    	; 0x630 <__subsf3>
 344:	60 93 eb 01 	sts	0x01EB, r22
 348:	70 93 ec 01 	sts	0x01EC, r23
 34c:	80 93 ed 01 	sts	0x01ED, r24
 350:	90 93 ee 01 	sts	0x01EE, r25
				 break;
 354:	8c c0       	rjmp	.+280    	; 0x46e <get_ADC_average+0x18a>
		case 1:  data_sensor = sum1 /10;
 356:	60 91 0a 01 	lds	r22, 0x010A
 35a:	70 91 0b 01 	lds	r23, 0x010B
 35e:	80 91 0c 01 	lds	r24, 0x010C
 362:	90 91 0d 01 	lds	r25, 0x010D
 366:	2a e0       	ldi	r18, 0x0A	; 10
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	bb d2       	rcall	.+1398   	; 0x8e6 <__udivmodsi4>
 370:	30 93 07 02 	sts	0x0207, r19
 374:	20 93 06 02 	sts	0x0206, r18
				 distance = (2914. / (data_sensor + 4.98)) -1;	//in cm formula
 378:	b9 01       	movw	r22, r18
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	25 d2       	rcall	.+1098   	; 0x7ca <__floatunsisf>
 380:	29 e2       	ldi	r18, 0x29	; 41
 382:	3c e5       	ldi	r19, 0x5C	; 92
 384:	4f e9       	ldi	r20, 0x9F	; 159
 386:	50 e4       	ldi	r21, 0x40	; 64
 388:	54 d1       	rcall	.+680    	; 0x632 <__addsf3>
 38a:	9b 01       	movw	r18, r22
 38c:	ac 01       	movw	r20, r24
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e2       	ldi	r23, 0x20	; 32
 392:	86 e3       	ldi	r24, 0x36	; 54
 394:	95 e4       	ldi	r25, 0x45	; 69
 396:	b1 d1       	rcall	.+866    	; 0x6fa <__divsf3>
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	40 e8       	ldi	r20, 0x80	; 128
 39e:	5f e3       	ldi	r21, 0x3F	; 63
 3a0:	47 d1       	rcall	.+654    	; 0x630 <__subsf3>
 3a2:	60 93 eb 01 	sts	0x01EB, r22
 3a6:	70 93 ec 01 	sts	0x01EC, r23
 3aa:	80 93 ed 01 	sts	0x01ED, r24
 3ae:	90 93 ee 01 	sts	0x01EE, r25
				 break;
 3b2:	5d c0       	rjmp	.+186    	; 0x46e <get_ADC_average+0x18a>
		case 2:  data_sensor = sum2 /10;
 3b4:	60 91 06 01 	lds	r22, 0x0106
 3b8:	70 91 07 01 	lds	r23, 0x0107
 3bc:	80 91 08 01 	lds	r24, 0x0108
 3c0:	90 91 09 01 	lds	r25, 0x0109
 3c4:	2a e0       	ldi	r18, 0x0A	; 10
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	8c d2       	rcall	.+1304   	; 0x8e6 <__udivmodsi4>
 3ce:	30 93 07 02 	sts	0x0207, r19
 3d2:	20 93 06 02 	sts	0x0206, r18
				 distance = (2914. / (data_sensor + 4.98)) -1;	//in cm formula
 3d6:	b9 01       	movw	r22, r18
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	f6 d1       	rcall	.+1004   	; 0x7ca <__floatunsisf>
 3de:	29 e2       	ldi	r18, 0x29	; 41
 3e0:	3c e5       	ldi	r19, 0x5C	; 92
 3e2:	4f e9       	ldi	r20, 0x9F	; 159
 3e4:	50 e4       	ldi	r21, 0x40	; 64
 3e6:	25 d1       	rcall	.+586    	; 0x632 <__addsf3>
 3e8:	9b 01       	movw	r18, r22
 3ea:	ac 01       	movw	r20, r24
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	70 e2       	ldi	r23, 0x20	; 32
 3f0:	86 e3       	ldi	r24, 0x36	; 54
 3f2:	95 e4       	ldi	r25, 0x45	; 69
 3f4:	82 d1       	rcall	.+772    	; 0x6fa <__divsf3>
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	40 e8       	ldi	r20, 0x80	; 128
 3fc:	5f e3       	ldi	r21, 0x3F	; 63
 3fe:	18 d1       	rcall	.+560    	; 0x630 <__subsf3>
 400:	60 93 eb 01 	sts	0x01EB, r22
 404:	70 93 ec 01 	sts	0x01EC, r23
 408:	80 93 ed 01 	sts	0x01ED, r24
 40c:	90 93 ee 01 	sts	0x01EE, r25
		         break;
 410:	2e c0       	rjmp	.+92     	; 0x46e <get_ADC_average+0x18a>
		case 3:  data_sensor = sum3 /10;
 412:	60 91 02 01 	lds	r22, 0x0102
 416:	70 91 03 01 	lds	r23, 0x0103
 41a:	80 91 04 01 	lds	r24, 0x0104
 41e:	90 91 05 01 	lds	r25, 0x0105
 422:	2a e0       	ldi	r18, 0x0A	; 10
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	5d d2       	rcall	.+1210   	; 0x8e6 <__udivmodsi4>
 42c:	30 93 07 02 	sts	0x0207, r19
 430:	20 93 06 02 	sts	0x0206, r18
		         distance = (2914. / (data_sensor + 4.98)) -1;	//in cm formula
 434:	b9 01       	movw	r22, r18
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	c7 d1       	rcall	.+910    	; 0x7ca <__floatunsisf>
 43c:	29 e2       	ldi	r18, 0x29	; 41
 43e:	3c e5       	ldi	r19, 0x5C	; 92
 440:	4f e9       	ldi	r20, 0x9F	; 159
 442:	50 e4       	ldi	r21, 0x40	; 64
 444:	f6 d0       	rcall	.+492    	; 0x632 <__addsf3>
 446:	9b 01       	movw	r18, r22
 448:	ac 01       	movw	r20, r24
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	70 e2       	ldi	r23, 0x20	; 32
 44e:	86 e3       	ldi	r24, 0x36	; 54
 450:	95 e4       	ldi	r25, 0x45	; 69
 452:	53 d1       	rcall	.+678    	; 0x6fa <__divsf3>
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	40 e8       	ldi	r20, 0x80	; 128
 45a:	5f e3       	ldi	r21, 0x3F	; 63
 45c:	e9 d0       	rcall	.+466    	; 0x630 <__subsf3>
 45e:	60 93 eb 01 	sts	0x01EB, r22
 462:	70 93 ec 01 	sts	0x01EC, r23
 466:	80 93 ed 01 	sts	0x01ED, r24
 46a:	90 93 ee 01 	sts	0x01EE, r25
		         break;		 
	}
	return distance; //ADC average in cm
 46e:	60 91 eb 01 	lds	r22, 0x01EB
 472:	70 91 ec 01 	lds	r23, 0x01EC
 476:	80 91 ed 01 	lds	r24, 0x01ED
 47a:	90 91 ee 01 	lds	r25, 0x01EE
}
 47e:	08 95       	ret

00000480 <encoders_init>:


void encoders_init()
{
	/* set PD2, PD3 as input */
	DDRD &=~ (1 << PORTD2);
 480:	52 98       	cbi	0x0a, 2	; 10
	DDRD &=~(1 << PORTD3);/* PD2 and PD3 as input */
 482:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << PORTD2)|(1<<PORTD3);   /* PD2 and PD3 pull-up enabled   */
 484:	8b b1       	in	r24, 0x0b	; 11
 486:	8c 60       	ori	r24, 0x0C	; 12
 488:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK|=(1<<INT0)|(1<<INT1);	//We use external interrupt INT0 and INT1
 48a:	8d b3       	in	r24, 0x1d	; 29
 48c:	83 60       	ori	r24, 0x03	; 3
 48e:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC00)|(1<<ISC01)|(1<<ISC10)|(1<<ISC11);	//The rising edge of INT0 and INT1 generates asynchronously an interrupt request.
 490:	e9 e6       	ldi	r30, 0x69	; 105
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	8f 60       	ori	r24, 0x0F	; 15
 498:	80 83       	st	Z, r24
	
	grey_left=0;
 49a:	10 92 15 01 	sts	0x0115, r1
	grey_right=0;
 49e:	10 92 13 01 	sts	0x0113, r1
	rotations_right=0;
 4a2:	10 92 14 01 	sts	0x0114, r1
	rotations_left=0;
 4a6:	10 92 bc 01 	sts	0x01BC, r1
 4aa:	08 95       	ret

000004ac <__vector_1>:
}



ISR(INT0_vect) //Right side interrupt
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	8f 93       	push	r24
	
		grey_right++;
 4b8:	80 91 13 01 	lds	r24, 0x0113
 4bc:	8f 5f       	subi	r24, 0xFF	; 255
 4be:	80 93 13 01 	sts	0x0113, r24
		if(grey_right>=10)
 4c2:	80 91 13 01 	lds	r24, 0x0113
 4c6:	8a 30       	cpi	r24, 0x0A	; 10
 4c8:	38 f0       	brcs	.+14     	; 0x4d8 <__vector_1+0x2c>
		{
			rotations_right++;
 4ca:	80 91 14 01 	lds	r24, 0x0114
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 93 14 01 	sts	0x0114, r24
			grey_right=0;
 4d4:	10 92 13 01 	sts	0x0113, r1
		}
	
}
 4d8:	8f 91       	pop	r24
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <__vector_2>:


ISR(INT1_vect)  //Left side interrupt
{
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	8f 93       	push	r24
	
	grey_left++;
 4f0:	80 91 15 01 	lds	r24, 0x0115
 4f4:	8f 5f       	subi	r24, 0xFF	; 255
 4f6:	80 93 15 01 	sts	0x0115, r24
	if(grey_left>=10)
 4fa:	80 91 15 01 	lds	r24, 0x0115
 4fe:	8a 30       	cpi	r24, 0x0A	; 10
 500:	38 f0       	brcs	.+14     	; 0x510 <__vector_2+0x2c>
	{
		rotations_left++;
 502:	80 91 bc 01 	lds	r24, 0x01BC
 506:	8f 5f       	subi	r24, 0xFF	; 255
 508:	80 93 bc 01 	sts	0x01BC, r24
		grey_left=0;
 50c:	10 92 15 01 	sts	0x0115, r1
	}
	
}
 510:	8f 91       	pop	r24
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <timer3_init>:


void timer3_init()
{
	// clear on compare match
	TCCR3A |= (1<<COM3A1);
 51c:	e0 e9       	ldi	r30, 0x90	; 144
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	80 68       	ori	r24, 0x80	; 128
 524:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32);
 526:	e1 e9       	ldi	r30, 0x91	; 145
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	88 60       	ori	r24, 0x08	; 8
 52e:	80 83       	st	Z, r24
	// set up timer with no prescaler count to 500
	TCCR3B |= (1 << CS30);
 530:	80 81       	ld	r24, Z
 532:	81 60       	ori	r24, 0x01	; 1
 534:	80 83       	st	Z, r24
	
	//set up compare value
	OCR3AH = 0x01;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = 0xF4;
 53c:	84 ef       	ldi	r24, 0xF4	; 244
 53e:	80 93 98 00 	sts	0x0098, r24
	
	// initialize counter
	TCNT3H = 0;
 542:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 546:	10 92 94 00 	sts	0x0094, r1
	
	
	
	TIMSK3 |= (1<<OCIE3A) | (1<<TOIE3);
 54a:	e1 e7       	ldi	r30, 0x71	; 113
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	83 60       	ori	r24, 0x03	; 3
 552:	80 83       	st	Z, r24
 554:	08 95       	ret

00000556 <__vector_32>:




ISR(TIMER3_COMPA_vect)
{
 556:	1f 92       	push	r1
 558:	0f 92       	push	r0
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	0f 92       	push	r0
 55e:	11 24       	eor	r1, r1
 560:	0b b6       	in	r0, 0x3b	; 59
 562:	0f 92       	push	r0
 564:	2f 93       	push	r18
 566:	3f 93       	push	r19
 568:	4f 93       	push	r20
 56a:	5f 93       	push	r21
 56c:	6f 93       	push	r22
 56e:	7f 93       	push	r23
 570:	8f 93       	push	r24
 572:	9f 93       	push	r25
 574:	af 93       	push	r26
 576:	bf 93       	push	r27
 578:	ef 93       	push	r30
 57a:	ff 93       	push	r31
	
	// initialize counter
	TCNT3H = 0;
 57c:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 580:	10 92 94 00 	sts	0x0094, r1
	// keep a track of number of overflows
	ovfl++;
 584:	80 91 2d 02 	lds	r24, 0x022D
 588:	90 91 2e 02 	lds	r25, 0x022E
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	90 93 2e 02 	sts	0x022E, r25
 592:	80 93 2d 02 	sts	0x022D, r24
	if(ovfl>=40)
 596:	80 91 2d 02 	lds	r24, 0x022D
 59a:	90 91 2e 02 	lds	r25, 0x022E
 59e:	88 97       	sbiw	r24, 0x28	; 40
 5a0:	20 f1       	brcs	.+72     	; 0x5ea <__vector_32+0x94>
	{	s_time.ms++;
 5a2:	e6 eb       	ldi	r30, 0xB6	; 182
 5a4:	f1 e0       	ldi	r31, 0x01	; 1
 5a6:	80 81       	ld	r24, Z
 5a8:	91 81       	ldd	r25, Z+1	; 0x01
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	91 83       	std	Z+1, r25	; 0x01
 5ae:	80 83       	st	Z, r24
		if (s_time.ms>=1000)
 5b0:	88 3e       	cpi	r24, 0xE8	; 232
 5b2:	93 40       	sbci	r25, 0x03	; 3
 5b4:	b0 f0       	brcs	.+44     	; 0x5e2 <__vector_32+0x8c>
		{
			s_time.s++;
 5b6:	82 81       	ldd	r24, Z+2	; 0x02
 5b8:	93 81       	ldd	r25, Z+3	; 0x03
 5ba:	01 96       	adiw	r24, 0x01	; 1
 5bc:	93 83       	std	Z+3, r25	; 0x03
 5be:	82 83       	std	Z+2, r24	; 0x02
			s_time.ms=0;
 5c0:	11 82       	std	Z+1, r1	; 0x01
 5c2:	10 82       	st	Z, r1
			if(s_time.s>=60)
 5c4:	cc 97       	sbiw	r24, 0x3c	; 60
 5c6:	68 f0       	brcs	.+26     	; 0x5e2 <__vector_32+0x8c>
			{
				s_time.m++;
 5c8:	84 81       	ldd	r24, Z+4	; 0x04
 5ca:	95 81       	ldd	r25, Z+5	; 0x05
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	95 83       	std	Z+5, r25	; 0x05
 5d0:	84 83       	std	Z+4, r24	; 0x04
				s_time.s=0;
 5d2:	13 82       	std	Z+3, r1	; 0x03
 5d4:	12 82       	std	Z+2, r1	; 0x02
				
				if(s_time.m>=60)
 5d6:	cc 97       	sbiw	r24, 0x3c	; 60
 5d8:	20 f0       	brcs	.+8      	; 0x5e2 <__vector_32+0x8c>
				s_time.m=0;
 5da:	10 92 bb 01 	sts	0x01BB, r1
 5de:	10 92 ba 01 	sts	0x01BA, r1
			}
			
		}
		ovfl=0;
 5e2:	10 92 2e 02 	sts	0x022E, r1
 5e6:	10 92 2d 02 	sts	0x022D, r1
	}
	
	ADC_update_values();
 5ea:	a9 dd       	rcall	.-1198   	; 0x13e <ADC_update_values>
	
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	0b be       	out	0x3b, r0	; 59
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <USART_Init>:
unsigned int my_ubrr = MYUBRR;

void USART_Init()
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr>>8);
 612:	80 91 01 01 	lds	r24, 0x0101
 616:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char)my_ubrr;
 61a:	80 91 00 01 	lds	r24, 0x0100
 61e:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 622:	88 e1       	ldi	r24, 0x18	; 24
 624:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 628:	8e e0       	ldi	r24, 0x0E	; 14
 62a:	80 93 c2 00 	sts	0x00C2, r24
 62e:	08 95       	ret

00000630 <__subsf3>:
 630:	50 58       	subi	r21, 0x80	; 128

00000632 <__addsf3>:
 632:	bb 27       	eor	r27, r27
 634:	aa 27       	eor	r26, r26
 636:	0e d0       	rcall	.+28     	; 0x654 <__addsf3x>
 638:	1c c1       	rjmp	.+568    	; 0x872 <__fp_round>
 63a:	0d d1       	rcall	.+538    	; 0x856 <__fp_pscA>
 63c:	30 f0       	brcs	.+12     	; 0x64a <__addsf3+0x18>
 63e:	12 d1       	rcall	.+548    	; 0x864 <__fp_pscB>
 640:	20 f0       	brcs	.+8      	; 0x64a <__addsf3+0x18>
 642:	31 f4       	brne	.+12     	; 0x650 <__addsf3+0x1e>
 644:	9f 3f       	cpi	r25, 0xFF	; 255
 646:	11 f4       	brne	.+4      	; 0x64c <__addsf3+0x1a>
 648:	1e f4       	brtc	.+6      	; 0x650 <__addsf3+0x1e>
 64a:	02 c1       	rjmp	.+516    	; 0x850 <__fp_nan>
 64c:	0e f4       	brtc	.+2      	; 0x650 <__addsf3+0x1e>
 64e:	e0 95       	com	r30
 650:	e7 fb       	bst	r30, 7
 652:	f8 c0       	rjmp	.+496    	; 0x844 <__fp_inf>

00000654 <__addsf3x>:
 654:	e9 2f       	mov	r30, r25
 656:	1e d1       	rcall	.+572    	; 0x894 <__fp_split3>
 658:	80 f3       	brcs	.-32     	; 0x63a <__addsf3+0x8>
 65a:	ba 17       	cp	r27, r26
 65c:	62 07       	cpc	r22, r18
 65e:	73 07       	cpc	r23, r19
 660:	84 07       	cpc	r24, r20
 662:	95 07       	cpc	r25, r21
 664:	18 f0       	brcs	.+6      	; 0x66c <__addsf3x+0x18>
 666:	71 f4       	brne	.+28     	; 0x684 <__addsf3x+0x30>
 668:	9e f5       	brtc	.+102    	; 0x6d0 <__addsf3x+0x7c>
 66a:	36 c1       	rjmp	.+620    	; 0x8d8 <__fp_zero>
 66c:	0e f4       	brtc	.+2      	; 0x670 <__addsf3x+0x1c>
 66e:	e0 95       	com	r30
 670:	0b 2e       	mov	r0, r27
 672:	ba 2f       	mov	r27, r26
 674:	a0 2d       	mov	r26, r0
 676:	0b 01       	movw	r0, r22
 678:	b9 01       	movw	r22, r18
 67a:	90 01       	movw	r18, r0
 67c:	0c 01       	movw	r0, r24
 67e:	ca 01       	movw	r24, r20
 680:	a0 01       	movw	r20, r0
 682:	11 24       	eor	r1, r1
 684:	ff 27       	eor	r31, r31
 686:	59 1b       	sub	r21, r25
 688:	99 f0       	breq	.+38     	; 0x6b0 <__addsf3x+0x5c>
 68a:	59 3f       	cpi	r21, 0xF9	; 249
 68c:	50 f4       	brcc	.+20     	; 0x6a2 <__addsf3x+0x4e>
 68e:	50 3e       	cpi	r21, 0xE0	; 224
 690:	68 f1       	brcs	.+90     	; 0x6ec <__addsf3x+0x98>
 692:	1a 16       	cp	r1, r26
 694:	f0 40       	sbci	r31, 0x00	; 0
 696:	a2 2f       	mov	r26, r18
 698:	23 2f       	mov	r18, r19
 69a:	34 2f       	mov	r19, r20
 69c:	44 27       	eor	r20, r20
 69e:	58 5f       	subi	r21, 0xF8	; 248
 6a0:	f3 cf       	rjmp	.-26     	; 0x688 <__addsf3x+0x34>
 6a2:	46 95       	lsr	r20
 6a4:	37 95       	ror	r19
 6a6:	27 95       	ror	r18
 6a8:	a7 95       	ror	r26
 6aa:	f0 40       	sbci	r31, 0x00	; 0
 6ac:	53 95       	inc	r21
 6ae:	c9 f7       	brne	.-14     	; 0x6a2 <__addsf3x+0x4e>
 6b0:	7e f4       	brtc	.+30     	; 0x6d0 <__addsf3x+0x7c>
 6b2:	1f 16       	cp	r1, r31
 6b4:	ba 0b       	sbc	r27, r26
 6b6:	62 0b       	sbc	r22, r18
 6b8:	73 0b       	sbc	r23, r19
 6ba:	84 0b       	sbc	r24, r20
 6bc:	ba f0       	brmi	.+46     	; 0x6ec <__addsf3x+0x98>
 6be:	91 50       	subi	r25, 0x01	; 1
 6c0:	a1 f0       	breq	.+40     	; 0x6ea <__addsf3x+0x96>
 6c2:	ff 0f       	add	r31, r31
 6c4:	bb 1f       	adc	r27, r27
 6c6:	66 1f       	adc	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	c2 f7       	brpl	.-16     	; 0x6be <__addsf3x+0x6a>
 6ce:	0e c0       	rjmp	.+28     	; 0x6ec <__addsf3x+0x98>
 6d0:	ba 0f       	add	r27, r26
 6d2:	62 1f       	adc	r22, r18
 6d4:	73 1f       	adc	r23, r19
 6d6:	84 1f       	adc	r24, r20
 6d8:	48 f4       	brcc	.+18     	; 0x6ec <__addsf3x+0x98>
 6da:	87 95       	ror	r24
 6dc:	77 95       	ror	r23
 6de:	67 95       	ror	r22
 6e0:	b7 95       	ror	r27
 6e2:	f7 95       	ror	r31
 6e4:	9e 3f       	cpi	r25, 0xFE	; 254
 6e6:	08 f0       	brcs	.+2      	; 0x6ea <__addsf3x+0x96>
 6e8:	b3 cf       	rjmp	.-154    	; 0x650 <__addsf3+0x1e>
 6ea:	93 95       	inc	r25
 6ec:	88 0f       	add	r24, r24
 6ee:	08 f0       	brcs	.+2      	; 0x6f2 <__addsf3x+0x9e>
 6f0:	99 27       	eor	r25, r25
 6f2:	ee 0f       	add	r30, r30
 6f4:	97 95       	ror	r25
 6f6:	87 95       	ror	r24
 6f8:	08 95       	ret

000006fa <__divsf3>:
 6fa:	0c d0       	rcall	.+24     	; 0x714 <__divsf3x>
 6fc:	ba c0       	rjmp	.+372    	; 0x872 <__fp_round>
 6fe:	b2 d0       	rcall	.+356    	; 0x864 <__fp_pscB>
 700:	40 f0       	brcs	.+16     	; 0x712 <__divsf3+0x18>
 702:	a9 d0       	rcall	.+338    	; 0x856 <__fp_pscA>
 704:	30 f0       	brcs	.+12     	; 0x712 <__divsf3+0x18>
 706:	21 f4       	brne	.+8      	; 0x710 <__divsf3+0x16>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	19 f0       	breq	.+6      	; 0x712 <__divsf3+0x18>
 70c:	9b c0       	rjmp	.+310    	; 0x844 <__fp_inf>
 70e:	51 11       	cpse	r21, r1
 710:	e4 c0       	rjmp	.+456    	; 0x8da <__fp_szero>
 712:	9e c0       	rjmp	.+316    	; 0x850 <__fp_nan>

00000714 <__divsf3x>:
 714:	bf d0       	rcall	.+382    	; 0x894 <__fp_split3>
 716:	98 f3       	brcs	.-26     	; 0x6fe <__divsf3+0x4>

00000718 <__divsf3_pse>:
 718:	99 23       	and	r25, r25
 71a:	c9 f3       	breq	.-14     	; 0x70e <__divsf3+0x14>
 71c:	55 23       	and	r21, r21
 71e:	b1 f3       	breq	.-20     	; 0x70c <__divsf3+0x12>
 720:	95 1b       	sub	r25, r21
 722:	55 0b       	sbc	r21, r21
 724:	bb 27       	eor	r27, r27
 726:	aa 27       	eor	r26, r26
 728:	62 17       	cp	r22, r18
 72a:	73 07       	cpc	r23, r19
 72c:	84 07       	cpc	r24, r20
 72e:	38 f0       	brcs	.+14     	; 0x73e <__divsf3_pse+0x26>
 730:	9f 5f       	subi	r25, 0xFF	; 255
 732:	5f 4f       	sbci	r21, 0xFF	; 255
 734:	22 0f       	add	r18, r18
 736:	33 1f       	adc	r19, r19
 738:	44 1f       	adc	r20, r20
 73a:	aa 1f       	adc	r26, r26
 73c:	a9 f3       	breq	.-22     	; 0x728 <__divsf3_pse+0x10>
 73e:	33 d0       	rcall	.+102    	; 0x7a6 <__divsf3_pse+0x8e>
 740:	0e 2e       	mov	r0, r30
 742:	3a f0       	brmi	.+14     	; 0x752 <__divsf3_pse+0x3a>
 744:	e0 e8       	ldi	r30, 0x80	; 128
 746:	30 d0       	rcall	.+96     	; 0x7a8 <__divsf3_pse+0x90>
 748:	91 50       	subi	r25, 0x01	; 1
 74a:	50 40       	sbci	r21, 0x00	; 0
 74c:	e6 95       	lsr	r30
 74e:	00 1c       	adc	r0, r0
 750:	ca f7       	brpl	.-14     	; 0x744 <__divsf3_pse+0x2c>
 752:	29 d0       	rcall	.+82     	; 0x7a6 <__divsf3_pse+0x8e>
 754:	fe 2f       	mov	r31, r30
 756:	27 d0       	rcall	.+78     	; 0x7a6 <__divsf3_pse+0x8e>
 758:	66 0f       	add	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	bb 1f       	adc	r27, r27
 760:	26 17       	cp	r18, r22
 762:	37 07       	cpc	r19, r23
 764:	48 07       	cpc	r20, r24
 766:	ab 07       	cpc	r26, r27
 768:	b0 e8       	ldi	r27, 0x80	; 128
 76a:	09 f0       	breq	.+2      	; 0x76e <__divsf3_pse+0x56>
 76c:	bb 0b       	sbc	r27, r27
 76e:	80 2d       	mov	r24, r0
 770:	bf 01       	movw	r22, r30
 772:	ff 27       	eor	r31, r31
 774:	93 58       	subi	r25, 0x83	; 131
 776:	5f 4f       	sbci	r21, 0xFF	; 255
 778:	2a f0       	brmi	.+10     	; 0x784 <__divsf3_pse+0x6c>
 77a:	9e 3f       	cpi	r25, 0xFE	; 254
 77c:	51 05       	cpc	r21, r1
 77e:	68 f0       	brcs	.+26     	; 0x79a <__divsf3_pse+0x82>
 780:	61 c0       	rjmp	.+194    	; 0x844 <__fp_inf>
 782:	ab c0       	rjmp	.+342    	; 0x8da <__fp_szero>
 784:	5f 3f       	cpi	r21, 0xFF	; 255
 786:	ec f3       	brlt	.-6      	; 0x782 <__divsf3_pse+0x6a>
 788:	98 3e       	cpi	r25, 0xE8	; 232
 78a:	dc f3       	brlt	.-10     	; 0x782 <__divsf3_pse+0x6a>
 78c:	86 95       	lsr	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b7 95       	ror	r27
 794:	f7 95       	ror	r31
 796:	9f 5f       	subi	r25, 0xFF	; 255
 798:	c9 f7       	brne	.-14     	; 0x78c <__divsf3_pse+0x74>
 79a:	88 0f       	add	r24, r24
 79c:	91 1d       	adc	r25, r1
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret
 7a6:	e1 e0       	ldi	r30, 0x01	; 1
 7a8:	66 0f       	add	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	bb 1f       	adc	r27, r27
 7b0:	62 17       	cp	r22, r18
 7b2:	73 07       	cpc	r23, r19
 7b4:	84 07       	cpc	r24, r20
 7b6:	ba 07       	cpc	r27, r26
 7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__divsf3_pse+0xaa>
 7ba:	62 1b       	sub	r22, r18
 7bc:	73 0b       	sbc	r23, r19
 7be:	84 0b       	sbc	r24, r20
 7c0:	ba 0b       	sbc	r27, r26
 7c2:	ee 1f       	adc	r30, r30
 7c4:	88 f7       	brcc	.-30     	; 0x7a8 <__divsf3_pse+0x90>
 7c6:	e0 95       	com	r30
 7c8:	08 95       	ret

000007ca <__floatunsisf>:
 7ca:	e8 94       	clt
 7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <__floatsisf+0x12>

000007ce <__floatsisf>:
 7ce:	97 fb       	bst	r25, 7
 7d0:	3e f4       	brtc	.+14     	; 0x7e0 <__floatsisf+0x12>
 7d2:	90 95       	com	r25
 7d4:	80 95       	com	r24
 7d6:	70 95       	com	r23
 7d8:	61 95       	neg	r22
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	99 23       	and	r25, r25
 7e2:	a9 f0       	breq	.+42     	; 0x80e <__floatsisf+0x40>
 7e4:	f9 2f       	mov	r31, r25
 7e6:	96 e9       	ldi	r25, 0x96	; 150
 7e8:	bb 27       	eor	r27, r27
 7ea:	93 95       	inc	r25
 7ec:	f6 95       	lsr	r31
 7ee:	87 95       	ror	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f1 11       	cpse	r31, r1
 7f8:	f8 cf       	rjmp	.-16     	; 0x7ea <__floatsisf+0x1c>
 7fa:	fa f4       	brpl	.+62     	; 0x83a <__floatsisf+0x6c>
 7fc:	bb 0f       	add	r27, r27
 7fe:	11 f4       	brne	.+4      	; 0x804 <__floatsisf+0x36>
 800:	60 ff       	sbrs	r22, 0
 802:	1b c0       	rjmp	.+54     	; 0x83a <__floatsisf+0x6c>
 804:	6f 5f       	subi	r22, 0xFF	; 255
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	16 c0       	rjmp	.+44     	; 0x83a <__floatsisf+0x6c>
 80e:	88 23       	and	r24, r24
 810:	11 f0       	breq	.+4      	; 0x816 <__floatsisf+0x48>
 812:	96 e9       	ldi	r25, 0x96	; 150
 814:	11 c0       	rjmp	.+34     	; 0x838 <__floatsisf+0x6a>
 816:	77 23       	and	r23, r23
 818:	21 f0       	breq	.+8      	; 0x822 <__floatsisf+0x54>
 81a:	9e e8       	ldi	r25, 0x8E	; 142
 81c:	87 2f       	mov	r24, r23
 81e:	76 2f       	mov	r23, r22
 820:	05 c0       	rjmp	.+10     	; 0x82c <__floatsisf+0x5e>
 822:	66 23       	and	r22, r22
 824:	71 f0       	breq	.+28     	; 0x842 <__floatsisf+0x74>
 826:	96 e8       	ldi	r25, 0x86	; 134
 828:	86 2f       	mov	r24, r22
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	2a f0       	brmi	.+10     	; 0x83a <__floatsisf+0x6c>
 830:	9a 95       	dec	r25
 832:	66 0f       	add	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	88 1f       	adc	r24, r24
 838:	da f7       	brpl	.-10     	; 0x830 <__floatsisf+0x62>
 83a:	88 0f       	add	r24, r24
 83c:	96 95       	lsr	r25
 83e:	87 95       	ror	r24
 840:	97 f9       	bld	r25, 7
 842:	08 95       	ret

00000844 <__fp_inf>:
 844:	97 f9       	bld	r25, 7
 846:	9f 67       	ori	r25, 0x7F	; 127
 848:	80 e8       	ldi	r24, 0x80	; 128
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	08 95       	ret

00000850 <__fp_nan>:
 850:	9f ef       	ldi	r25, 0xFF	; 255
 852:	80 ec       	ldi	r24, 0xC0	; 192
 854:	08 95       	ret

00000856 <__fp_pscA>:
 856:	00 24       	eor	r0, r0
 858:	0a 94       	dec	r0
 85a:	16 16       	cp	r1, r22
 85c:	17 06       	cpc	r1, r23
 85e:	18 06       	cpc	r1, r24
 860:	09 06       	cpc	r0, r25
 862:	08 95       	ret

00000864 <__fp_pscB>:
 864:	00 24       	eor	r0, r0
 866:	0a 94       	dec	r0
 868:	12 16       	cp	r1, r18
 86a:	13 06       	cpc	r1, r19
 86c:	14 06       	cpc	r1, r20
 86e:	05 06       	cpc	r0, r21
 870:	08 95       	ret

00000872 <__fp_round>:
 872:	09 2e       	mov	r0, r25
 874:	03 94       	inc	r0
 876:	00 0c       	add	r0, r0
 878:	11 f4       	brne	.+4      	; 0x87e <__fp_round+0xc>
 87a:	88 23       	and	r24, r24
 87c:	52 f0       	brmi	.+20     	; 0x892 <__fp_round+0x20>
 87e:	bb 0f       	add	r27, r27
 880:	40 f4       	brcc	.+16     	; 0x892 <__fp_round+0x20>
 882:	bf 2b       	or	r27, r31
 884:	11 f4       	brne	.+4      	; 0x88a <__fp_round+0x18>
 886:	60 ff       	sbrs	r22, 0
 888:	04 c0       	rjmp	.+8      	; 0x892 <__fp_round+0x20>
 88a:	6f 5f       	subi	r22, 0xFF	; 255
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	08 95       	ret

00000894 <__fp_split3>:
 894:	57 fd       	sbrc	r21, 7
 896:	90 58       	subi	r25, 0x80	; 128
 898:	44 0f       	add	r20, r20
 89a:	55 1f       	adc	r21, r21
 89c:	59 f0       	breq	.+22     	; 0x8b4 <__fp_splitA+0x10>
 89e:	5f 3f       	cpi	r21, 0xFF	; 255
 8a0:	71 f0       	breq	.+28     	; 0x8be <__fp_splitA+0x1a>
 8a2:	47 95       	ror	r20

000008a4 <__fp_splitA>:
 8a4:	88 0f       	add	r24, r24
 8a6:	97 fb       	bst	r25, 7
 8a8:	99 1f       	adc	r25, r25
 8aa:	61 f0       	breq	.+24     	; 0x8c4 <__fp_splitA+0x20>
 8ac:	9f 3f       	cpi	r25, 0xFF	; 255
 8ae:	79 f0       	breq	.+30     	; 0x8ce <__fp_splitA+0x2a>
 8b0:	87 95       	ror	r24
 8b2:	08 95       	ret
 8b4:	12 16       	cp	r1, r18
 8b6:	13 06       	cpc	r1, r19
 8b8:	14 06       	cpc	r1, r20
 8ba:	55 1f       	adc	r21, r21
 8bc:	f2 cf       	rjmp	.-28     	; 0x8a2 <__fp_split3+0xe>
 8be:	46 95       	lsr	r20
 8c0:	f1 df       	rcall	.-30     	; 0x8a4 <__fp_splitA>
 8c2:	08 c0       	rjmp	.+16     	; 0x8d4 <__fp_splitA+0x30>
 8c4:	16 16       	cp	r1, r22
 8c6:	17 06       	cpc	r1, r23
 8c8:	18 06       	cpc	r1, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	f1 cf       	rjmp	.-30     	; 0x8b0 <__fp_splitA+0xc>
 8ce:	86 95       	lsr	r24
 8d0:	71 05       	cpc	r23, r1
 8d2:	61 05       	cpc	r22, r1
 8d4:	08 94       	sec
 8d6:	08 95       	ret

000008d8 <__fp_zero>:
 8d8:	e8 94       	clt

000008da <__fp_szero>:
 8da:	bb 27       	eor	r27, r27
 8dc:	66 27       	eor	r22, r22
 8de:	77 27       	eor	r23, r23
 8e0:	cb 01       	movw	r24, r22
 8e2:	97 f9       	bld	r25, 7
 8e4:	08 95       	ret

000008e6 <__udivmodsi4>:
 8e6:	a1 e2       	ldi	r26, 0x21	; 33
 8e8:	1a 2e       	mov	r1, r26
 8ea:	aa 1b       	sub	r26, r26
 8ec:	bb 1b       	sub	r27, r27
 8ee:	fd 01       	movw	r30, r26
 8f0:	0d c0       	rjmp	.+26     	; 0x90c <__udivmodsi4_ep>

000008f2 <__udivmodsi4_loop>:
 8f2:	aa 1f       	adc	r26, r26
 8f4:	bb 1f       	adc	r27, r27
 8f6:	ee 1f       	adc	r30, r30
 8f8:	ff 1f       	adc	r31, r31
 8fa:	a2 17       	cp	r26, r18
 8fc:	b3 07       	cpc	r27, r19
 8fe:	e4 07       	cpc	r30, r20
 900:	f5 07       	cpc	r31, r21
 902:	20 f0       	brcs	.+8      	; 0x90c <__udivmodsi4_ep>
 904:	a2 1b       	sub	r26, r18
 906:	b3 0b       	sbc	r27, r19
 908:	e4 0b       	sbc	r30, r20
 90a:	f5 0b       	sbc	r31, r21

0000090c <__udivmodsi4_ep>:
 90c:	66 1f       	adc	r22, r22
 90e:	77 1f       	adc	r23, r23
 910:	88 1f       	adc	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	1a 94       	dec	r1
 916:	69 f7       	brne	.-38     	; 0x8f2 <__udivmodsi4_loop>
 918:	60 95       	com	r22
 91a:	70 95       	com	r23
 91c:	80 95       	com	r24
 91e:	90 95       	com	r25
 920:	9b 01       	movw	r18, r22
 922:	ac 01       	movw	r20, r24
 924:	bd 01       	movw	r22, r26
 926:	cf 01       	movw	r24, r30
 928:	08 95       	ret

0000092a <_exit>:
 92a:	f8 94       	cli

0000092c <__stop_program>:
 92c:	ff cf       	rjmp	.-2      	; 0x92c <__stop_program>
