
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000808  0000089c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000808  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002eb  00800102  00800102  0000089e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c93  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055c  00000000  00000000  000016bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095d  00000000  00000000  00001c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045a  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c8  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002ff2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	c5 c1       	rjmp	.+906    	; 0x390 <__vector_1>
   6:	00 00       	nop
   8:	df c1       	rjmp	.+958    	; 0x3c8 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	dc c1       	rjmp	.+952    	; 0x43a <__vector_32>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e0       	ldi	r30, 0x08	; 8
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 3e       	cpi	r26, 0xED	; 237
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	9f c3       	rjmp	.+1854   	; 0x804 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
{ 
	
	uint8_t speed;
	speed=200;

	flag=0;
  c8:	10 92 0c 01 	sts	0x010C, r1
  cc:	10 92 0b 01 	sts	0x010B, r1
	
	USART_Init();
  d0:	03 d2       	rcall	.+1030   	; 0x4d8 <USART_Init>
	ADC_init();
  d2:	12 d1       	rcall	.+548    	; 0x2f8 <ADC_init>
	PWM1_init();
  d4:	3a d0       	rcall	.+116    	; 0x14a <PWM1_init>
	PWM2_init();
  d6:	40 d0       	rcall	.+128    	; 0x158 <PWM2_init>
	timer3_init();
  d8:	93 d1       	rcall	.+806    	; 0x400 <timer3_init>
	encoders_init();
  da:	44 d1       	rcall	.+648    	; 0x364 <encoders_init>
	sei(); //enable interrupts
  dc:	78 94       	sei
  de:	0f 2e       	mov	r0, r31
  e0:	ff e0       	ldi	r31, 0x0F	; 15
  e2:	ef 2e       	mov	r14, r31
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	ff 2e       	mov	r15, r31
  e8:	f0 2d       	mov	r31, r0
  ea:	0f ea       	ldi	r16, 0xAF	; 175
  ec:	11 e0       	ldi	r17, 0x01	; 1
	while (1)  // main loop										
	{
		//total=0;
		
		
		ADC_read(0);
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0a d1       	rcall	.+532    	; 0x306 <ADC_read>
  f2:	e7 01       	movw	r28, r14
		for(int i=0;i<40;i++)
		{	v[i]=ADC_read(0);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	07 d1       	rcall	.+526    	; 0x306 <ADC_read>
  f8:	69 93       	st	Y+, r22
  fa:	79 93       	st	Y+, r23
  fc:	89 93       	st	Y+, r24
  fe:	99 93       	st	Y+, r25
			media=media+v[i];
 100:	20 91 02 01 	lds	r18, 0x0102
 104:	30 91 03 01 	lds	r19, 0x0103
 108:	40 91 04 01 	lds	r20, 0x0104
 10c:	50 91 05 01 	lds	r21, 0x0105
 110:	f3 d1       	rcall	.+998    	; 0x4f8 <__addsf3>
 112:	60 93 02 01 	sts	0x0102, r22
 116:	70 93 03 01 	sts	0x0103, r23
 11a:	80 93 04 01 	sts	0x0104, r24
 11e:	90 93 05 01 	sts	0x0105, r25
	{
		//total=0;
		
		
		ADC_read(0);
		for(int i=0;i<40;i++)
 122:	c0 17       	cp	r28, r16
 124:	d1 07       	cpc	r29, r17
 126:	31 f7       	brne	.-52     	; 0xf4 <main+0x2c>
		{	v[i]=ADC_read(0);
			media=media+v[i];
		}
		media=media/40;
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	40 e2       	ldi	r20, 0x20	; 32
 12e:	52 e4       	ldi	r21, 0x42	; 66
 130:	4b d2       	rcall	.+1174   	; 0x5c8 <__divsf3>
 132:	60 93 02 01 	sts	0x0102, r22
 136:	70 93 03 01 	sts	0x0103, r23
 13a:	80 93 04 01 	sts	0x0104, r24
 13e:	90 93 05 01 	sts	0x0105, r25
		reglation_by_left(PWM,PWM);
 142:	6c e3       	ldi	r22, 0x3C	; 60
 144:	8c e3       	ldi	r24, 0x3C	; 60
 146:	0f d0       	rcall	.+30     	; 0x166 <reglation_by_left>
		
		
		
		

	} 
 148:	d2 cf       	rjmp	.-92     	; 0xee <main+0x26>

0000014a <PWM1_init>:
		OCR0B=speed_left;
	}
	if(direction_left == 'b')
	{
		PORTD|=(1<<PORTD6);
		OCR0B=speed_left;
 14a:	84 b5       	in	r24, 0x24	; 36
 14c:	81 68       	ori	r24, 0x81	; 129
 14e:	84 bd       	out	0x24, r24	; 36
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	85 bd       	out	0x25, r24	; 37
 154:	23 9a       	sbi	0x04, 3	; 4
 156:	08 95       	ret

00000158 <PWM2_init>:
 158:	84 b5       	in	r24, 0x24	; 36
 15a:	88 62       	ori	r24, 0x28	; 40
 15c:	84 bd       	out	0x24, r24	; 36
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	85 bd       	out	0x25, r24	; 37
 162:	24 9a       	sbi	0x04, 4	; 4
 164:	08 95       	ret

00000166 <reglation_by_left>:
	}
}


void reglation_by_left(uint8_t pwm_left, uint8_t pwm_right)
{
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	d8 2f       	mov	r29, r24
 174:	c6 2f       	mov	r28, r22
	float data_sensor,error;
	data_sensor=ADC_read(0);		//left sensor's channel
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	c6 d0       	rcall	.+396    	; 0x306 <ADC_read>
 17a:	9b 01       	movw	r18, r22
 17c:	ac 01       	movw	r20, r24
									//in loc de ADC_read, valoarea filtrata
	error=11.9 - data_sensor;
 17e:	66 e6       	ldi	r22, 0x66	; 102
 180:	76 e6       	ldi	r23, 0x66	; 102
 182:	8e e3       	ldi	r24, 0x3E	; 62
 184:	91 e4       	ldi	r25, 0x41	; 65
 186:	b7 d1       	rcall	.+878    	; 0x4f6 <__subsf3>
 188:	6b 01       	movw	r12, r22
 18a:	7c 01       	movw	r14, r24
	
	if(error<=0.1 && error>=-0.2)
 18c:	2d ec       	ldi	r18, 0xCD	; 205
 18e:	3c ec       	ldi	r19, 0xCC	; 204
 190:	4c ec       	ldi	r20, 0xCC	; 204
 192:	5d e3       	ldi	r21, 0x3D	; 61
 194:	15 d2       	rcall	.+1066   	; 0x5c0 <__cmpsf2>
 196:	18 16       	cp	r1, r24
 198:	5c f0       	brlt	.+22     	; 0x1b0 <reglation_by_left+0x4a>
 19a:	2d ec       	ldi	r18, 0xCD	; 205
 19c:	3c ec       	ldi	r19, 0xCC	; 204
 19e:	4c e4       	ldi	r20, 0x4C	; 76
 1a0:	5e eb       	ldi	r21, 0xBE	; 190
 1a2:	c7 01       	movw	r24, r14
 1a4:	b6 01       	movw	r22, r12
 1a6:	2a d3       	rcall	.+1620   	; 0x7fc <__gesf2>
 1a8:	88 23       	and	r24, r24
 1aa:	14 f0       	brlt	.+4      	; 0x1b0 <reglation_by_left+0x4a>
		{
			OCR0B=pwm_left;
 1ac:	d8 bd       	out	0x28, r29	; 40
			OCR0A=pwm_right;
 1ae:	c7 bd       	out	0x27, r28	; 39
		}
	if(error> 0.1 && error<=1)
 1b0:	2d ec       	ldi	r18, 0xCD	; 205
 1b2:	3c ec       	ldi	r19, 0xCC	; 204
 1b4:	4c ec       	ldi	r20, 0xCC	; 204
 1b6:	5d e3       	ldi	r21, 0x3D	; 61
 1b8:	c7 01       	movw	r24, r14
 1ba:	b6 01       	movw	r22, r12
 1bc:	1f d3       	rcall	.+1598   	; 0x7fc <__gesf2>
 1be:	18 16       	cp	r1, r24
 1c0:	6c f4       	brge	.+26     	; 0x1dc <reglation_by_left+0x76>
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	40 e8       	ldi	r20, 0x80	; 128
 1c8:	5f e3       	ldi	r21, 0x3F	; 63
 1ca:	c7 01       	movw	r24, r14
 1cc:	b6 01       	movw	r22, r12
 1ce:	f8 d1       	rcall	.+1008   	; 0x5c0 <__cmpsf2>
 1d0:	18 16       	cp	r1, r24
 1d2:	24 f0       	brlt	.+8      	; 0x1dc <reglation_by_left+0x76>
		{
			OCR0B=pwm_left+25;
 1d4:	89 e1       	ldi	r24, 0x19	; 25
 1d6:	8d 0f       	add	r24, r29
 1d8:	88 bd       	out	0x28, r24	; 40
			OCR0B=pwm_right;
 1da:	c8 bd       	out	0x28, r28	; 40
		}
	if (error>1 && error <=2)
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e8       	ldi	r20, 0x80	; 128
 1e2:	5f e3       	ldi	r21, 0x3F	; 63
 1e4:	c7 01       	movw	r24, r14
 1e6:	b6 01       	movw	r22, r12
 1e8:	09 d3       	rcall	.+1554   	; 0x7fc <__gesf2>
 1ea:	18 16       	cp	r1, r24
 1ec:	6c f4       	brge	.+26     	; 0x208 <reglation_by_left+0xa2>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	50 e4       	ldi	r21, 0x40	; 64
 1f6:	c7 01       	movw	r24, r14
 1f8:	b6 01       	movw	r22, r12
 1fa:	e2 d1       	rcall	.+964    	; 0x5c0 <__cmpsf2>
 1fc:	18 16       	cp	r1, r24
 1fe:	24 f0       	brlt	.+8      	; 0x208 <reglation_by_left+0xa2>
	{	
		OCR0B=pwm_left+100;
 200:	84 e6       	ldi	r24, 0x64	; 100
 202:	8d 0f       	add	r24, r29
 204:	88 bd       	out	0x28, r24	; 40
		OCR0A=pwm_right;
 206:	c7 bd       	out	0x27, r28	; 39
	}
	if(error>2 && error <=3)
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	50 e4       	ldi	r21, 0x40	; 64
 210:	c7 01       	movw	r24, r14
 212:	b6 01       	movw	r22, r12
 214:	f3 d2       	rcall	.+1510   	; 0x7fc <__gesf2>
 216:	18 16       	cp	r1, r24
 218:	6c f4       	brge	.+26     	; 0x234 <reglation_by_left+0xce>
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	40 e4       	ldi	r20, 0x40	; 64
 220:	50 e4       	ldi	r21, 0x40	; 64
 222:	c7 01       	movw	r24, r14
 224:	b6 01       	movw	r22, r12
 226:	cc d1       	rcall	.+920    	; 0x5c0 <__cmpsf2>
 228:	18 16       	cp	r1, r24
 22a:	24 f0       	brlt	.+8      	; 0x234 <reglation_by_left+0xce>
	{
		OCR0B=pwm_left+40;
 22c:	88 e2       	ldi	r24, 0x28	; 40
 22e:	8d 0f       	add	r24, r29
 230:	88 bd       	out	0x28, r24	; 40
		OCR0A=pwm_right;
 232:	c7 bd       	out	0x27, r28	; 39
	}
	if(error > 3)
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e4       	ldi	r20, 0x40	; 64
 23a:	50 e4       	ldi	r21, 0x40	; 64
 23c:	c7 01       	movw	r24, r14
 23e:	b6 01       	movw	r22, r12
 240:	dd d2       	rcall	.+1466   	; 0x7fc <__gesf2>
 242:	18 16       	cp	r1, r24
 244:	24 f4       	brge	.+8      	; 0x24e <reglation_by_left+0xe8>
	{
		OCR0B=pwm_left+100;
 246:	84 e6       	ldi	r24, 0x64	; 100
 248:	8d 0f       	add	r24, r29
 24a:	88 bd       	out	0x28, r24	; 40
		OCR0A=pwm_right;
 24c:	c7 bd       	out	0x27, r28	; 39
	}
	if(error < -0.2 &&  error >= -1)
 24e:	2d ec       	ldi	r18, 0xCD	; 205
 250:	3c ec       	ldi	r19, 0xCC	; 204
 252:	4c e4       	ldi	r20, 0x4C	; 76
 254:	5e eb       	ldi	r21, 0xBE	; 190
 256:	c7 01       	movw	r24, r14
 258:	b6 01       	movw	r22, r12
 25a:	b2 d1       	rcall	.+868    	; 0x5c0 <__cmpsf2>
 25c:	88 23       	and	r24, r24
 25e:	6c f4       	brge	.+26     	; 0x27a <reglation_by_left+0x114>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 e8       	ldi	r20, 0x80	; 128
 266:	5f eb       	ldi	r21, 0xBF	; 191
 268:	c7 01       	movw	r24, r14
 26a:	b6 01       	movw	r22, r12
 26c:	c7 d2       	rcall	.+1422   	; 0x7fc <__gesf2>
 26e:	88 23       	and	r24, r24
 270:	24 f0       	brlt	.+8      	; 0x27a <reglation_by_left+0x114>
	{
		OCR0A=pwm_right+25;
 272:	89 e1       	ldi	r24, 0x19	; 25
 274:	8c 0f       	add	r24, r28
 276:	87 bd       	out	0x27, r24	; 39
		OCR0B=pwm_left;
 278:	d8 bd       	out	0x28, r29	; 40
	}
	if(error <-1 && error >=-2)
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e8       	ldi	r20, 0x80	; 128
 280:	5f eb       	ldi	r21, 0xBF	; 191
 282:	c7 01       	movw	r24, r14
 284:	b6 01       	movw	r22, r12
 286:	9c d1       	rcall	.+824    	; 0x5c0 <__cmpsf2>
 288:	88 23       	and	r24, r24
 28a:	6c f4       	brge	.+26     	; 0x2a6 <reglation_by_left+0x140>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	50 ec       	ldi	r21, 0xC0	; 192
 294:	c7 01       	movw	r24, r14
 296:	b6 01       	movw	r22, r12
 298:	b1 d2       	rcall	.+1378   	; 0x7fc <__gesf2>
 29a:	88 23       	and	r24, r24
 29c:	24 f0       	brlt	.+8      	; 0x2a6 <reglation_by_left+0x140>
	{
		OCR0A=pwm_right+50;
 29e:	82 e3       	ldi	r24, 0x32	; 50
 2a0:	8c 0f       	add	r24, r28
 2a2:	87 bd       	out	0x27, r24	; 39
		OCR0B=pwm_left;
 2a4:	d8 bd       	out	0x28, r29	; 40
	}
	if(error <-2 && error>=-3)
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	50 ec       	ldi	r21, 0xC0	; 192
 2ae:	c7 01       	movw	r24, r14
 2b0:	b6 01       	movw	r22, r12
 2b2:	86 d1       	rcall	.+780    	; 0x5c0 <__cmpsf2>
 2b4:	88 23       	and	r24, r24
 2b6:	6c f4       	brge	.+26     	; 0x2d2 <reglation_by_left+0x16c>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	40 e4       	ldi	r20, 0x40	; 64
 2be:	50 ec       	ldi	r21, 0xC0	; 192
 2c0:	c7 01       	movw	r24, r14
 2c2:	b6 01       	movw	r22, r12
 2c4:	9b d2       	rcall	.+1334   	; 0x7fc <__gesf2>
 2c6:	88 23       	and	r24, r24
 2c8:	24 f0       	brlt	.+8      	; 0x2d2 <reglation_by_left+0x16c>
	{
		OCR0A=pwm_right+80;
 2ca:	80 e5       	ldi	r24, 0x50	; 80
 2cc:	8c 0f       	add	r24, r28
 2ce:	87 bd       	out	0x27, r24	; 39
		OCR0B=pwm_left;
 2d0:	d8 bd       	out	0x28, r29	; 40
	}
	if(error < -3)
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	40 e4       	ldi	r20, 0x40	; 64
 2d8:	50 ec       	ldi	r21, 0xC0	; 192
 2da:	c7 01       	movw	r24, r14
 2dc:	b6 01       	movw	r22, r12
 2de:	70 d1       	rcall	.+736    	; 0x5c0 <__cmpsf2>
 2e0:	88 23       	and	r24, r24
 2e2:	1c f4       	brge	.+6      	; 0x2ea <reglation_by_left+0x184>
	{
		OCR0A=pwm_right+120;
 2e4:	c8 58       	subi	r28, 0x88	; 136
 2e6:	c7 bd       	out	0x27, r28	; 39
		OCR0B=pwm_left;
 2e8:	d8 bd       	out	0x28, r29	; 40
	}
		

}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	df 90       	pop	r13
 2f4:	cf 90       	pop	r12
 2f6:	08 95       	ret

000002f8 <ADC_init>:
				     distance = (2914. / (data_sensor + 4.98)) -1;	//in cm formula
					 break;		 
		}
		flag=0;
		return distance; //ADC average in cm
}
 2f8:	09 98       	cbi	0x01, 1	; 1
 2fa:	ea e7       	ldi	r30, 0x7A	; 122
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	80 68       	ori	r24, 0x80	; 128
 302:	80 83       	st	Z, r24
 304:	08 95       	ret

00000306 <ADC_read>:
 306:	ec e7       	ldi	r30, 0x7C	; 124
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	10 82       	st	Z, r1
 30c:	90 81       	ld	r25, Z
 30e:	87 70       	andi	r24, 0x07	; 7
 310:	98 2b       	or	r25, r24
 312:	90 83       	st	Z, r25
 314:	ea e7       	ldi	r30, 0x7A	; 122
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	80 64       	ori	r24, 0x40	; 64
 31c:	80 83       	st	Z, r24
 31e:	80 81       	ld	r24, Z
 320:	86 fd       	sbrc	r24, 6
 322:	fd cf       	rjmp	.-6      	; 0x31e <ADC_read+0x18>
 324:	e8 e7       	ldi	r30, 0x78	; 120
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	91 81       	ldd	r25, Z+1	; 0x01
 32c:	60 81       	ld	r22, Z
 32e:	71 81       	ldd	r23, Z+1	; 0x01
 330:	6b 5f       	subi	r22, 0xFB	; 251
 332:	7f 4f       	sbci	r23, 0xFF	; 255
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	af d1       	rcall	.+862    	; 0x698 <__floatunsisf>
 33a:	9b 01       	movw	r18, r22
 33c:	ac 01       	movw	r20, r24
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	70 e2       	ldi	r23, 0x20	; 32
 342:	86 e3       	ldi	r24, 0x36	; 54
 344:	95 e4       	ldi	r25, 0x45	; 69
 346:	40 d1       	rcall	.+640    	; 0x5c8 <__divsf3>
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	40 e8       	ldi	r20, 0x80	; 128
 34e:	5f e3       	ldi	r21, 0x3F	; 63
 350:	d2 d0       	rcall	.+420    	; 0x4f6 <__subsf3>
 352:	60 93 e4 01 	sts	0x01E4, r22
 356:	70 93 e5 01 	sts	0x01E5, r23
 35a:	80 93 e6 01 	sts	0x01E6, r24
 35e:	90 93 e7 01 	sts	0x01E7, r25
 362:	08 95       	ret

00000364 <encoders_init>:


void encoders_init()
{
	/* set PD2, PD3 as input */
	DDRD &=~ (1 << PORTD2);
 364:	52 98       	cbi	0x0a, 2	; 10
	DDRD &=~(1 << PORTD3);/* PD2 and PD3 as input */
 366:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << PORTD2)|(1<<PORTD3);   /* PD2 and PD3 pull-up enabled   */
 368:	8b b1       	in	r24, 0x0b	; 11
 36a:	8c 60       	ori	r24, 0x0C	; 12
 36c:	8b b9       	out	0x0b, r24	; 11
	
	EIMSK|=(1<<INT0)|(1<<INT1);	//We use external interrupt INT0 and INT1
 36e:	8d b3       	in	r24, 0x1d	; 29
 370:	83 60       	ori	r24, 0x03	; 3
 372:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC00)|(1<<ISC01)|(1<<ISC10)|(1<<ISC11);	//The rising edge of INT0 and INT1 generates asynchronously an interrupt request.
 374:	e9 e6       	ldi	r30, 0x69	; 105
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	8f 60       	ori	r24, 0x0F	; 15
 37c:	80 83       	st	Z, r24
	
	grey_left=0;
 37e:	10 92 0e 01 	sts	0x010E, r1
	grey_right=0;
 382:	10 92 06 01 	sts	0x0106, r1
	rotations_right=0;
 386:	10 92 0d 01 	sts	0x010D, r1
	rotations_left=0;
 38a:	10 92 b5 01 	sts	0x01B5, r1
 38e:	08 95       	ret

00000390 <__vector_1>:
}



ISR(INT0_vect) //Right side interrupt
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	8f 93       	push	r24
	
		grey_right++;
 39c:	80 91 06 01 	lds	r24, 0x0106
 3a0:	8f 5f       	subi	r24, 0xFF	; 255
 3a2:	80 93 06 01 	sts	0x0106, r24
		if(grey_right>=10)
 3a6:	80 91 06 01 	lds	r24, 0x0106
 3aa:	8a 30       	cpi	r24, 0x0A	; 10
 3ac:	38 f0       	brcs	.+14     	; 0x3bc <__vector_1+0x2c>
		{
			rotations_right++;
 3ae:	80 91 0d 01 	lds	r24, 0x010D
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	80 93 0d 01 	sts	0x010D, r24
			grey_right=0;
 3b8:	10 92 06 01 	sts	0x0106, r1
		}
	
}
 3bc:	8f 91       	pop	r24
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <__vector_2>:


ISR(INT1_vect)  //Left side interrupt
{
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	8f 93       	push	r24
	
	grey_left++;
 3d4:	80 91 0e 01 	lds	r24, 0x010E
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	80 93 0e 01 	sts	0x010E, r24
	if(grey_left>=10)
 3de:	80 91 0e 01 	lds	r24, 0x010E
 3e2:	8a 30       	cpi	r24, 0x0A	; 10
 3e4:	38 f0       	brcs	.+14     	; 0x3f4 <__vector_2+0x2c>
	{
		rotations_left++;
 3e6:	80 91 b5 01 	lds	r24, 0x01B5
 3ea:	8f 5f       	subi	r24, 0xFF	; 255
 3ec:	80 93 b5 01 	sts	0x01B5, r24
		grey_left=0;
 3f0:	10 92 0e 01 	sts	0x010E, r1
	}
	
}
 3f4:	8f 91       	pop	r24
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <timer3_init>:


void timer3_init()
{
	// clear on compare match
	TCCR3A |= (1<<COM3A1);
 400:	e0 e9       	ldi	r30, 0x90	; 144
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	80 68       	ori	r24, 0x80	; 128
 408:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32);
 40a:	e1 e9       	ldi	r30, 0x91	; 145
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	88 60       	ori	r24, 0x08	; 8
 412:	80 83       	st	Z, r24
	// set up timer with no prescaler count to 500
	TCCR3B |= (1 << CS30);
 414:	80 81       	ld	r24, Z
 416:	81 60       	ori	r24, 0x01	; 1
 418:	80 83       	st	Z, r24
	
	//set up compare value
	OCR3AH = 0x01;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = 0xF4;
 420:	84 ef       	ldi	r24, 0xF4	; 244
 422:	80 93 98 00 	sts	0x0098, r24
	
	// initialize counter
	TCNT3H = 0;
 426:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 42a:	10 92 94 00 	sts	0x0094, r1
	
	
	
	TIMSK3 |= (1<<OCIE3A) | (1<<TOIE3);
 42e:	e1 e7       	ldi	r30, 0x71	; 113
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	83 60       	ori	r24, 0x03	; 3
 436:	80 83       	st	Z, r24
 438:	08 95       	ret

0000043a <__vector_32>:




ISR(TIMER3_COMPA_vect)
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	0b b6       	in	r0, 0x3b	; 59
 446:	0f 92       	push	r0
 448:	2f 93       	push	r18
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31
	
	// initialize counter
	TCNT3H = 0;
 452:	10 92 95 00 	sts	0x0095, r1
	TCNT3L = 0;
 456:	10 92 94 00 	sts	0x0094, r1
	// keep a track of number of overflows
	ovfl++;
 45a:	80 91 38 02 	lds	r24, 0x0238
 45e:	90 91 39 02 	lds	r25, 0x0239
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	90 93 39 02 	sts	0x0239, r25
 468:	80 93 38 02 	sts	0x0238, r24
	if(ovfl>=40)
 46c:	80 91 38 02 	lds	r24, 0x0238
 470:	90 91 39 02 	lds	r25, 0x0239
 474:	88 97       	sbiw	r24, 0x28	; 40
 476:	20 f1       	brcs	.+72     	; 0x4c0 <__vector_32+0x86>
	{	s_time.ms++;
 478:	ef ea       	ldi	r30, 0xAF	; 175
 47a:	f1 e0       	ldi	r31, 0x01	; 1
 47c:	80 81       	ld	r24, Z
 47e:	91 81       	ldd	r25, Z+1	; 0x01
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	91 83       	std	Z+1, r25	; 0x01
 484:	80 83       	st	Z, r24
		if (s_time.ms>=1000)
 486:	88 3e       	cpi	r24, 0xE8	; 232
 488:	93 40       	sbci	r25, 0x03	; 3
 48a:	b0 f0       	brcs	.+44     	; 0x4b8 <__vector_32+0x7e>
		{
			s_time.s++;
 48c:	82 81       	ldd	r24, Z+2	; 0x02
 48e:	93 81       	ldd	r25, Z+3	; 0x03
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	93 83       	std	Z+3, r25	; 0x03
 494:	82 83       	std	Z+2, r24	; 0x02
			s_time.ms=0;
 496:	11 82       	std	Z+1, r1	; 0x01
 498:	10 82       	st	Z, r1
			if(s_time.s>=60)
 49a:	cc 97       	sbiw	r24, 0x3c	; 60
 49c:	68 f0       	brcs	.+26     	; 0x4b8 <__vector_32+0x7e>
			{
				s_time.m++;
 49e:	84 81       	ldd	r24, Z+4	; 0x04
 4a0:	95 81       	ldd	r25, Z+5	; 0x05
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	95 83       	std	Z+5, r25	; 0x05
 4a6:	84 83       	std	Z+4, r24	; 0x04
				s_time.s=0;
 4a8:	13 82       	std	Z+3, r1	; 0x03
 4aa:	12 82       	std	Z+2, r1	; 0x02
				
				if(s_time.m>=60)
 4ac:	cc 97       	sbiw	r24, 0x3c	; 60
 4ae:	20 f0       	brcs	.+8      	; 0x4b8 <__vector_32+0x7e>
				s_time.m=0;
 4b0:	10 92 b4 01 	sts	0x01B4, r1
 4b4:	10 92 b3 01 	sts	0x01B3, r1
			}
			
		}
		ovfl=0;
 4b8:	10 92 39 02 	sts	0x0239, r1
 4bc:	10 92 38 02 	sts	0x0238, r1
	}
	
	//ADC_update_values();
	
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0b be       	out	0x3b, r0	; 59
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <USART_Init>:
unsigned int my_ubrr = MYUBRR;

void USART_Init()
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr>>8);
 4d8:	80 91 01 01 	lds	r24, 0x0101
 4dc:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char)my_ubrr;
 4e0:	80 91 00 01 	lds	r24, 0x0100
 4e4:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 4e8:	88 e1       	ldi	r24, 0x18	; 24
 4ea:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 4ee:	8e e0       	ldi	r24, 0x0E	; 14
 4f0:	80 93 c2 00 	sts	0x00C2, r24
 4f4:	08 95       	ret

000004f6 <__subsf3>:
 4f6:	50 58       	subi	r21, 0x80	; 128

000004f8 <__addsf3>:
 4f8:	bb 27       	eor	r27, r27
 4fa:	aa 27       	eor	r26, r26
 4fc:	0e d0       	rcall	.+28     	; 0x51a <__addsf3x>
 4fe:	44 c1       	rjmp	.+648    	; 0x788 <__fp_round>
 500:	35 d1       	rcall	.+618    	; 0x76c <__fp_pscA>
 502:	30 f0       	brcs	.+12     	; 0x510 <__addsf3+0x18>
 504:	3a d1       	rcall	.+628    	; 0x77a <__fp_pscB>
 506:	20 f0       	brcs	.+8      	; 0x510 <__addsf3+0x18>
 508:	31 f4       	brne	.+12     	; 0x516 <__addsf3+0x1e>
 50a:	9f 3f       	cpi	r25, 0xFF	; 255
 50c:	11 f4       	brne	.+4      	; 0x512 <__addsf3+0x1a>
 50e:	1e f4       	brtc	.+6      	; 0x516 <__addsf3+0x1e>
 510:	2a c1       	rjmp	.+596    	; 0x766 <__fp_nan>
 512:	0e f4       	brtc	.+2      	; 0x516 <__addsf3+0x1e>
 514:	e0 95       	com	r30
 516:	e7 fb       	bst	r30, 7
 518:	20 c1       	rjmp	.+576    	; 0x75a <__fp_inf>

0000051a <__addsf3x>:
 51a:	e9 2f       	mov	r30, r25
 51c:	46 d1       	rcall	.+652    	; 0x7aa <__fp_split3>
 51e:	80 f3       	brcs	.-32     	; 0x500 <__addsf3+0x8>
 520:	ba 17       	cp	r27, r26
 522:	62 07       	cpc	r22, r18
 524:	73 07       	cpc	r23, r19
 526:	84 07       	cpc	r24, r20
 528:	95 07       	cpc	r25, r21
 52a:	18 f0       	brcs	.+6      	; 0x532 <__addsf3x+0x18>
 52c:	71 f4       	brne	.+28     	; 0x54a <__addsf3x+0x30>
 52e:	9e f5       	brtc	.+102    	; 0x596 <__addsf3x+0x7c>
 530:	5e c1       	rjmp	.+700    	; 0x7ee <__fp_zero>
 532:	0e f4       	brtc	.+2      	; 0x536 <__addsf3x+0x1c>
 534:	e0 95       	com	r30
 536:	0b 2e       	mov	r0, r27
 538:	ba 2f       	mov	r27, r26
 53a:	a0 2d       	mov	r26, r0
 53c:	0b 01       	movw	r0, r22
 53e:	b9 01       	movw	r22, r18
 540:	90 01       	movw	r18, r0
 542:	0c 01       	movw	r0, r24
 544:	ca 01       	movw	r24, r20
 546:	a0 01       	movw	r20, r0
 548:	11 24       	eor	r1, r1
 54a:	ff 27       	eor	r31, r31
 54c:	59 1b       	sub	r21, r25
 54e:	99 f0       	breq	.+38     	; 0x576 <__addsf3x+0x5c>
 550:	59 3f       	cpi	r21, 0xF9	; 249
 552:	50 f4       	brcc	.+20     	; 0x568 <__addsf3x+0x4e>
 554:	50 3e       	cpi	r21, 0xE0	; 224
 556:	68 f1       	brcs	.+90     	; 0x5b2 <__addsf3x+0x98>
 558:	1a 16       	cp	r1, r26
 55a:	f0 40       	sbci	r31, 0x00	; 0
 55c:	a2 2f       	mov	r26, r18
 55e:	23 2f       	mov	r18, r19
 560:	34 2f       	mov	r19, r20
 562:	44 27       	eor	r20, r20
 564:	58 5f       	subi	r21, 0xF8	; 248
 566:	f3 cf       	rjmp	.-26     	; 0x54e <__addsf3x+0x34>
 568:	46 95       	lsr	r20
 56a:	37 95       	ror	r19
 56c:	27 95       	ror	r18
 56e:	a7 95       	ror	r26
 570:	f0 40       	sbci	r31, 0x00	; 0
 572:	53 95       	inc	r21
 574:	c9 f7       	brne	.-14     	; 0x568 <__addsf3x+0x4e>
 576:	7e f4       	brtc	.+30     	; 0x596 <__addsf3x+0x7c>
 578:	1f 16       	cp	r1, r31
 57a:	ba 0b       	sbc	r27, r26
 57c:	62 0b       	sbc	r22, r18
 57e:	73 0b       	sbc	r23, r19
 580:	84 0b       	sbc	r24, r20
 582:	ba f0       	brmi	.+46     	; 0x5b2 <__addsf3x+0x98>
 584:	91 50       	subi	r25, 0x01	; 1
 586:	a1 f0       	breq	.+40     	; 0x5b0 <__addsf3x+0x96>
 588:	ff 0f       	add	r31, r31
 58a:	bb 1f       	adc	r27, r27
 58c:	66 1f       	adc	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	c2 f7       	brpl	.-16     	; 0x584 <__addsf3x+0x6a>
 594:	0e c0       	rjmp	.+28     	; 0x5b2 <__addsf3x+0x98>
 596:	ba 0f       	add	r27, r26
 598:	62 1f       	adc	r22, r18
 59a:	73 1f       	adc	r23, r19
 59c:	84 1f       	adc	r24, r20
 59e:	48 f4       	brcc	.+18     	; 0x5b2 <__addsf3x+0x98>
 5a0:	87 95       	ror	r24
 5a2:	77 95       	ror	r23
 5a4:	67 95       	ror	r22
 5a6:	b7 95       	ror	r27
 5a8:	f7 95       	ror	r31
 5aa:	9e 3f       	cpi	r25, 0xFE	; 254
 5ac:	08 f0       	brcs	.+2      	; 0x5b0 <__addsf3x+0x96>
 5ae:	b3 cf       	rjmp	.-154    	; 0x516 <__addsf3+0x1e>
 5b0:	93 95       	inc	r25
 5b2:	88 0f       	add	r24, r24
 5b4:	08 f0       	brcs	.+2      	; 0x5b8 <__addsf3x+0x9e>
 5b6:	99 27       	eor	r25, r25
 5b8:	ee 0f       	add	r30, r30
 5ba:	97 95       	ror	r25
 5bc:	87 95       	ror	r24
 5be:	08 95       	ret

000005c0 <__cmpsf2>:
 5c0:	a8 d0       	rcall	.+336    	; 0x712 <__fp_cmp>
 5c2:	08 f4       	brcc	.+2      	; 0x5c6 <__cmpsf2+0x6>
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	08 95       	ret

000005c8 <__divsf3>:
 5c8:	0c d0       	rcall	.+24     	; 0x5e2 <__divsf3x>
 5ca:	de c0       	rjmp	.+444    	; 0x788 <__fp_round>
 5cc:	d6 d0       	rcall	.+428    	; 0x77a <__fp_pscB>
 5ce:	40 f0       	brcs	.+16     	; 0x5e0 <__divsf3+0x18>
 5d0:	cd d0       	rcall	.+410    	; 0x76c <__fp_pscA>
 5d2:	30 f0       	brcs	.+12     	; 0x5e0 <__divsf3+0x18>
 5d4:	21 f4       	brne	.+8      	; 0x5de <__divsf3+0x16>
 5d6:	5f 3f       	cpi	r21, 0xFF	; 255
 5d8:	19 f0       	breq	.+6      	; 0x5e0 <__divsf3+0x18>
 5da:	bf c0       	rjmp	.+382    	; 0x75a <__fp_inf>
 5dc:	51 11       	cpse	r21, r1
 5de:	08 c1       	rjmp	.+528    	; 0x7f0 <__fp_szero>
 5e0:	c2 c0       	rjmp	.+388    	; 0x766 <__fp_nan>

000005e2 <__divsf3x>:
 5e2:	e3 d0       	rcall	.+454    	; 0x7aa <__fp_split3>
 5e4:	98 f3       	brcs	.-26     	; 0x5cc <__divsf3+0x4>

000005e6 <__divsf3_pse>:
 5e6:	99 23       	and	r25, r25
 5e8:	c9 f3       	breq	.-14     	; 0x5dc <__divsf3+0x14>
 5ea:	55 23       	and	r21, r21
 5ec:	b1 f3       	breq	.-20     	; 0x5da <__divsf3+0x12>
 5ee:	95 1b       	sub	r25, r21
 5f0:	55 0b       	sbc	r21, r21
 5f2:	bb 27       	eor	r27, r27
 5f4:	aa 27       	eor	r26, r26
 5f6:	62 17       	cp	r22, r18
 5f8:	73 07       	cpc	r23, r19
 5fa:	84 07       	cpc	r24, r20
 5fc:	38 f0       	brcs	.+14     	; 0x60c <__divsf3_pse+0x26>
 5fe:	9f 5f       	subi	r25, 0xFF	; 255
 600:	5f 4f       	sbci	r21, 0xFF	; 255
 602:	22 0f       	add	r18, r18
 604:	33 1f       	adc	r19, r19
 606:	44 1f       	adc	r20, r20
 608:	aa 1f       	adc	r26, r26
 60a:	a9 f3       	breq	.-22     	; 0x5f6 <__divsf3_pse+0x10>
 60c:	33 d0       	rcall	.+102    	; 0x674 <__divsf3_pse+0x8e>
 60e:	0e 2e       	mov	r0, r30
 610:	3a f0       	brmi	.+14     	; 0x620 <__divsf3_pse+0x3a>
 612:	e0 e8       	ldi	r30, 0x80	; 128
 614:	30 d0       	rcall	.+96     	; 0x676 <__divsf3_pse+0x90>
 616:	91 50       	subi	r25, 0x01	; 1
 618:	50 40       	sbci	r21, 0x00	; 0
 61a:	e6 95       	lsr	r30
 61c:	00 1c       	adc	r0, r0
 61e:	ca f7       	brpl	.-14     	; 0x612 <__divsf3_pse+0x2c>
 620:	29 d0       	rcall	.+82     	; 0x674 <__divsf3_pse+0x8e>
 622:	fe 2f       	mov	r31, r30
 624:	27 d0       	rcall	.+78     	; 0x674 <__divsf3_pse+0x8e>
 626:	66 0f       	add	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	88 1f       	adc	r24, r24
 62c:	bb 1f       	adc	r27, r27
 62e:	26 17       	cp	r18, r22
 630:	37 07       	cpc	r19, r23
 632:	48 07       	cpc	r20, r24
 634:	ab 07       	cpc	r26, r27
 636:	b0 e8       	ldi	r27, 0x80	; 128
 638:	09 f0       	breq	.+2      	; 0x63c <__divsf3_pse+0x56>
 63a:	bb 0b       	sbc	r27, r27
 63c:	80 2d       	mov	r24, r0
 63e:	bf 01       	movw	r22, r30
 640:	ff 27       	eor	r31, r31
 642:	93 58       	subi	r25, 0x83	; 131
 644:	5f 4f       	sbci	r21, 0xFF	; 255
 646:	2a f0       	brmi	.+10     	; 0x652 <__divsf3_pse+0x6c>
 648:	9e 3f       	cpi	r25, 0xFE	; 254
 64a:	51 05       	cpc	r21, r1
 64c:	68 f0       	brcs	.+26     	; 0x668 <__divsf3_pse+0x82>
 64e:	85 c0       	rjmp	.+266    	; 0x75a <__fp_inf>
 650:	cf c0       	rjmp	.+414    	; 0x7f0 <__fp_szero>
 652:	5f 3f       	cpi	r21, 0xFF	; 255
 654:	ec f3       	brlt	.-6      	; 0x650 <__divsf3_pse+0x6a>
 656:	98 3e       	cpi	r25, 0xE8	; 232
 658:	dc f3       	brlt	.-10     	; 0x650 <__divsf3_pse+0x6a>
 65a:	86 95       	lsr	r24
 65c:	77 95       	ror	r23
 65e:	67 95       	ror	r22
 660:	b7 95       	ror	r27
 662:	f7 95       	ror	r31
 664:	9f 5f       	subi	r25, 0xFF	; 255
 666:	c9 f7       	brne	.-14     	; 0x65a <__divsf3_pse+0x74>
 668:	88 0f       	add	r24, r24
 66a:	91 1d       	adc	r25, r1
 66c:	96 95       	lsr	r25
 66e:	87 95       	ror	r24
 670:	97 f9       	bld	r25, 7
 672:	08 95       	ret
 674:	e1 e0       	ldi	r30, 0x01	; 1
 676:	66 0f       	add	r22, r22
 678:	77 1f       	adc	r23, r23
 67a:	88 1f       	adc	r24, r24
 67c:	bb 1f       	adc	r27, r27
 67e:	62 17       	cp	r22, r18
 680:	73 07       	cpc	r23, r19
 682:	84 07       	cpc	r24, r20
 684:	ba 07       	cpc	r27, r26
 686:	20 f0       	brcs	.+8      	; 0x690 <__divsf3_pse+0xaa>
 688:	62 1b       	sub	r22, r18
 68a:	73 0b       	sbc	r23, r19
 68c:	84 0b       	sbc	r24, r20
 68e:	ba 0b       	sbc	r27, r26
 690:	ee 1f       	adc	r30, r30
 692:	88 f7       	brcc	.-30     	; 0x676 <__divsf3_pse+0x90>
 694:	e0 95       	com	r30
 696:	08 95       	ret

00000698 <__floatunsisf>:
 698:	e8 94       	clt
 69a:	09 c0       	rjmp	.+18     	; 0x6ae <__floatsisf+0x12>

0000069c <__floatsisf>:
 69c:	97 fb       	bst	r25, 7
 69e:	3e f4       	brtc	.+14     	; 0x6ae <__floatsisf+0x12>
 6a0:	90 95       	com	r25
 6a2:	80 95       	com	r24
 6a4:	70 95       	com	r23
 6a6:	61 95       	neg	r22
 6a8:	7f 4f       	sbci	r23, 0xFF	; 255
 6aa:	8f 4f       	sbci	r24, 0xFF	; 255
 6ac:	9f 4f       	sbci	r25, 0xFF	; 255
 6ae:	99 23       	and	r25, r25
 6b0:	a9 f0       	breq	.+42     	; 0x6dc <__floatsisf+0x40>
 6b2:	f9 2f       	mov	r31, r25
 6b4:	96 e9       	ldi	r25, 0x96	; 150
 6b6:	bb 27       	eor	r27, r27
 6b8:	93 95       	inc	r25
 6ba:	f6 95       	lsr	r31
 6bc:	87 95       	ror	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b7 95       	ror	r27
 6c4:	f1 11       	cpse	r31, r1
 6c6:	f8 cf       	rjmp	.-16     	; 0x6b8 <__floatsisf+0x1c>
 6c8:	fa f4       	brpl	.+62     	; 0x708 <__floatsisf+0x6c>
 6ca:	bb 0f       	add	r27, r27
 6cc:	11 f4       	brne	.+4      	; 0x6d2 <__floatsisf+0x36>
 6ce:	60 ff       	sbrs	r22, 0
 6d0:	1b c0       	rjmp	.+54     	; 0x708 <__floatsisf+0x6c>
 6d2:	6f 5f       	subi	r22, 0xFF	; 255
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	8f 4f       	sbci	r24, 0xFF	; 255
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	16 c0       	rjmp	.+44     	; 0x708 <__floatsisf+0x6c>
 6dc:	88 23       	and	r24, r24
 6de:	11 f0       	breq	.+4      	; 0x6e4 <__floatsisf+0x48>
 6e0:	96 e9       	ldi	r25, 0x96	; 150
 6e2:	11 c0       	rjmp	.+34     	; 0x706 <__floatsisf+0x6a>
 6e4:	77 23       	and	r23, r23
 6e6:	21 f0       	breq	.+8      	; 0x6f0 <__floatsisf+0x54>
 6e8:	9e e8       	ldi	r25, 0x8E	; 142
 6ea:	87 2f       	mov	r24, r23
 6ec:	76 2f       	mov	r23, r22
 6ee:	05 c0       	rjmp	.+10     	; 0x6fa <__floatsisf+0x5e>
 6f0:	66 23       	and	r22, r22
 6f2:	71 f0       	breq	.+28     	; 0x710 <__floatsisf+0x74>
 6f4:	96 e8       	ldi	r25, 0x86	; 134
 6f6:	86 2f       	mov	r24, r22
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	2a f0       	brmi	.+10     	; 0x708 <__floatsisf+0x6c>
 6fe:	9a 95       	dec	r25
 700:	66 0f       	add	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	88 1f       	adc	r24, r24
 706:	da f7       	brpl	.-10     	; 0x6fe <__floatsisf+0x62>
 708:	88 0f       	add	r24, r24
 70a:	96 95       	lsr	r25
 70c:	87 95       	ror	r24
 70e:	97 f9       	bld	r25, 7
 710:	08 95       	ret

00000712 <__fp_cmp>:
 712:	99 0f       	add	r25, r25
 714:	00 08       	sbc	r0, r0
 716:	55 0f       	add	r21, r21
 718:	aa 0b       	sbc	r26, r26
 71a:	e0 e8       	ldi	r30, 0x80	; 128
 71c:	fe ef       	ldi	r31, 0xFE	; 254
 71e:	16 16       	cp	r1, r22
 720:	17 06       	cpc	r1, r23
 722:	e8 07       	cpc	r30, r24
 724:	f9 07       	cpc	r31, r25
 726:	c0 f0       	brcs	.+48     	; 0x758 <__fp_cmp+0x46>
 728:	12 16       	cp	r1, r18
 72a:	13 06       	cpc	r1, r19
 72c:	e4 07       	cpc	r30, r20
 72e:	f5 07       	cpc	r31, r21
 730:	98 f0       	brcs	.+38     	; 0x758 <__fp_cmp+0x46>
 732:	62 1b       	sub	r22, r18
 734:	73 0b       	sbc	r23, r19
 736:	84 0b       	sbc	r24, r20
 738:	95 0b       	sbc	r25, r21
 73a:	39 f4       	brne	.+14     	; 0x74a <__fp_cmp+0x38>
 73c:	0a 26       	eor	r0, r26
 73e:	61 f0       	breq	.+24     	; 0x758 <__fp_cmp+0x46>
 740:	23 2b       	or	r18, r19
 742:	24 2b       	or	r18, r20
 744:	25 2b       	or	r18, r21
 746:	21 f4       	brne	.+8      	; 0x750 <__fp_cmp+0x3e>
 748:	08 95       	ret
 74a:	0a 26       	eor	r0, r26
 74c:	09 f4       	brne	.+2      	; 0x750 <__fp_cmp+0x3e>
 74e:	a1 40       	sbci	r26, 0x01	; 1
 750:	a6 95       	lsr	r26
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	81 1d       	adc	r24, r1
 756:	81 1d       	adc	r24, r1
 758:	08 95       	ret

0000075a <__fp_inf>:
 75a:	97 f9       	bld	r25, 7
 75c:	9f 67       	ori	r25, 0x7F	; 127
 75e:	80 e8       	ldi	r24, 0x80	; 128
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	08 95       	ret

00000766 <__fp_nan>:
 766:	9f ef       	ldi	r25, 0xFF	; 255
 768:	80 ec       	ldi	r24, 0xC0	; 192
 76a:	08 95       	ret

0000076c <__fp_pscA>:
 76c:	00 24       	eor	r0, r0
 76e:	0a 94       	dec	r0
 770:	16 16       	cp	r1, r22
 772:	17 06       	cpc	r1, r23
 774:	18 06       	cpc	r1, r24
 776:	09 06       	cpc	r0, r25
 778:	08 95       	ret

0000077a <__fp_pscB>:
 77a:	00 24       	eor	r0, r0
 77c:	0a 94       	dec	r0
 77e:	12 16       	cp	r1, r18
 780:	13 06       	cpc	r1, r19
 782:	14 06       	cpc	r1, r20
 784:	05 06       	cpc	r0, r21
 786:	08 95       	ret

00000788 <__fp_round>:
 788:	09 2e       	mov	r0, r25
 78a:	03 94       	inc	r0
 78c:	00 0c       	add	r0, r0
 78e:	11 f4       	brne	.+4      	; 0x794 <__fp_round+0xc>
 790:	88 23       	and	r24, r24
 792:	52 f0       	brmi	.+20     	; 0x7a8 <__fp_round+0x20>
 794:	bb 0f       	add	r27, r27
 796:	40 f4       	brcc	.+16     	; 0x7a8 <__fp_round+0x20>
 798:	bf 2b       	or	r27, r31
 79a:	11 f4       	brne	.+4      	; 0x7a0 <__fp_round+0x18>
 79c:	60 ff       	sbrs	r22, 0
 79e:	04 c0       	rjmp	.+8      	; 0x7a8 <__fp_round+0x20>
 7a0:	6f 5f       	subi	r22, 0xFF	; 255
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	08 95       	ret

000007aa <__fp_split3>:
 7aa:	57 fd       	sbrc	r21, 7
 7ac:	90 58       	subi	r25, 0x80	; 128
 7ae:	44 0f       	add	r20, r20
 7b0:	55 1f       	adc	r21, r21
 7b2:	59 f0       	breq	.+22     	; 0x7ca <__fp_splitA+0x10>
 7b4:	5f 3f       	cpi	r21, 0xFF	; 255
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <__fp_splitA+0x1a>
 7b8:	47 95       	ror	r20

000007ba <__fp_splitA>:
 7ba:	88 0f       	add	r24, r24
 7bc:	97 fb       	bst	r25, 7
 7be:	99 1f       	adc	r25, r25
 7c0:	61 f0       	breq	.+24     	; 0x7da <__fp_splitA+0x20>
 7c2:	9f 3f       	cpi	r25, 0xFF	; 255
 7c4:	79 f0       	breq	.+30     	; 0x7e4 <__fp_splitA+0x2a>
 7c6:	87 95       	ror	r24
 7c8:	08 95       	ret
 7ca:	12 16       	cp	r1, r18
 7cc:	13 06       	cpc	r1, r19
 7ce:	14 06       	cpc	r1, r20
 7d0:	55 1f       	adc	r21, r21
 7d2:	f2 cf       	rjmp	.-28     	; 0x7b8 <__fp_split3+0xe>
 7d4:	46 95       	lsr	r20
 7d6:	f1 df       	rcall	.-30     	; 0x7ba <__fp_splitA>
 7d8:	08 c0       	rjmp	.+16     	; 0x7ea <__fp_splitA+0x30>
 7da:	16 16       	cp	r1, r22
 7dc:	17 06       	cpc	r1, r23
 7de:	18 06       	cpc	r1, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	f1 cf       	rjmp	.-30     	; 0x7c6 <__fp_splitA+0xc>
 7e4:	86 95       	lsr	r24
 7e6:	71 05       	cpc	r23, r1
 7e8:	61 05       	cpc	r22, r1
 7ea:	08 94       	sec
 7ec:	08 95       	ret

000007ee <__fp_zero>:
 7ee:	e8 94       	clt

000007f0 <__fp_szero>:
 7f0:	bb 27       	eor	r27, r27
 7f2:	66 27       	eor	r22, r22
 7f4:	77 27       	eor	r23, r23
 7f6:	cb 01       	movw	r24, r22
 7f8:	97 f9       	bld	r25, 7
 7fa:	08 95       	ret

000007fc <__gesf2>:
 7fc:	8a df       	rcall	.-236    	; 0x712 <__fp_cmp>
 7fe:	08 f4       	brcc	.+2      	; 0x802 <__gesf2+0x6>
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	08 95       	ret

00000804 <_exit>:
 804:	f8 94       	cli

00000806 <__stop_program>:
 806:	ff cf       	rjmp	.-2      	; 0x806 <__stop_program>
